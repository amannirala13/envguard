{
    "sourceFile": "packages/cli/src/core/keychain.ts",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 20,
            "patches": [
                {
                    "date": 1760741840659,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1760741846084,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -6,8 +6,10 @@\n  *\n  * @license MIT\n  * @author amannirala13\n  *\n+ * @remarks\n+ * The IKeychainProvider interface defines the contract for keychain operations,\n  * while the SystemKeychain class implements this interface using the NAPI-RS Keyring library.\n  * This allows for secure storage and retrieval of sensitive information in a platform-agnostic manner.\n  *\n  * @see {@link IKeychainProvider} for the interface definition.\n"
                },
                {
                    "date": 1760748681295,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -69,17 +69,21 @@\n  * This ensures that entries from different applications do not conflict with each other.\n  *\n  * @param packageName - The package name used as the service identifier in the keychain.\n  *\n- * @throws Will not throw; errors are swallowed in individual methods.\n+ * @throws {Error} Errors may be thrown when keychain operations fail due to system limitations or permissions.\n  *\n  * @example\n  * ```ts\n- * const keychain = new SystemKeychain('my-package-name');\n- * await keychain.set('myKey', 'myValue');\n- * const value = await keychain.get('myKey');\n- * console.log(value); // Outputs: 'myValue'\n- * await keychain.delete('myKey');\n+ * try {\n+ *   const keychain = new SystemKeychain('my-package-name');\n+ *   await keychain.set('myKey', 'myValue');\n+ *   const value = await keychain.get('myKey');\n+ *   console.log(value); // Outputs: 'myValue'\n+ *   await keychain.delete('myKey');\n+ * } catch (error) {\n+ *   console.error('Keychain operation failed:', error);\n+ * }\n  * ```\n  *\n  * @remarks\n  * The SystemKeychain class is designed to provide a simple and consistent interface for keychain operations\n@@ -88,8 +92,11 @@\n  *\n  * Note that some operations, such as listing all keys or clearing the keychain, are not supported\n  * by the underlying NAPI-RS Keyring library and are implemented as no-ops or return empty results.\n  *\n+ * All keychain operations that interact with the system keychain will throw errors if the operation fails,\n+ * providing better error visibility and enabling proper error handling in applications.\n+ *\n  * @see {@link IKeychainProvider} for the interface definition.\n  * @see {@link Entry} from NAPI-RS Keyring for more details on the underlying implementation.\n  * @see {@link set} to store values in the keychain.\n  * @see {@link get} to retrieve values from the keychain.\n@@ -97,15 +104,8 @@\n  * @see {@link delete} to remove values from the keychain.\n  * @see {@link clear} to clear all entries in the keychain (not supported).\n  *\n  * @author amannirala13\n- */\n-export class SystemKeychain implements IKeychainProvider {\n-  /**\n-   * Creates an instance of SystemKeychain.\n-   * @param packageName - The package name used as the service identifier in the keychain.\n-   *\n-   * @example\n    * ```ts\n    * const keychain = new SystemKeychain('my-package-name');\n    * ```\n    * @remarks\n"
                },
                {
                    "date": 1760748692257,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -104,8 +104,15 @@\n  * @see {@link delete} to remove values from the keychain.\n  * @see {@link clear} to clear all entries in the keychain (not supported).\n  *\n  * @author amannirala13\n+ */\n+export class SystemKeychain implements IKeychainProvider {\n+  /**\n+   * Creates an instance of SystemKeychain.\n+   * @param packageName - The package name used as the service identifier in the keychain.\n+   *\n+   * @example\n    * ```ts\n    * const keychain = new SystemKeychain('my-package-name');\n    * ```\n    * @remarks\n@@ -179,21 +186,21 @@\n \n   /**\n    * Gets a value from the keychain.\n    * @returns {Promise<string | null>} A promise that resolves to the value associated with the key, or null if not found.\n-   * @throws Will not throw; errors are swallowed and null is returned.\n+   * @throws {Error} When keychain access fails due to permissions, system limitations, or other errors.\n    * @param key - The key to retrieve.\n    * @example\n    * ```ts\n-   * const value = await keychain.get('myKey');\n-   * console.log(value);\n+   * try {\n+   *   const value = await keychain.get('myKey');\n+   *   console.log(value);\n+   * } catch (error) {\n+   *   console.error('Failed to retrieve keychain entry:', error);\n+   * }\n    * ```\n    *\n    * @remarks\n-   * This method uses the NAPI-RS Keyring library to retrieve the value securely from the system keychain.\n-   * If an error occurs during the operation, it is logged to the console but not propagated.\n-   * This ensures that the application can continue running even if the keychain operation fails.\n-   * Use this method to retrieve sensitive information such as tokens or passwords.\n    *\n    * @see {@link set} to store values in the keychain.\n    * @see {@link delete} to remove values from the keychain.\n    * @see {@link list} to list all keys in the keychain (not supported).\n"
                },
                {
                    "date": 1760748707162,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -184,39 +184,38 @@\n     }\n   }\n \n   /**\n-   * Gets a value from the keychain.\n-   * @returns {Promise<string | null>} A promise that resolves to the value associated with the key, or null if not found.\n+   * Deletes a value from the keychain.\n+   *\n+   * @returns {Promise<void>} A promise that resolves when the value is deleted.\n    * @throws {Error} When keychain access fails due to permissions, system limitations, or other errors.\n-   * @param key - The key to retrieve.\n+   * @param key - The key to delete.\n    * @example\n    * ```ts\n    * try {\n-   *   const value = await keychain.get('myKey');\n-   *   console.log(value);\n+   *   await keychain.delete('myKey');\n    * } catch (error) {\n-   *   console.error('Failed to retrieve keychain entry:', error);\n+   *   console.error('Failed to delete keychain entry:', error);\n    * }\n    * ```\n    *\n    * @remarks\n+   * This method uses the NAPI-RS Keyring library to delete the value securely from the system keychain.\n+   * If an error occurs during the operation, it is thrown to enable proper error handling.\n+   * Use this method to remove sensitive information such as tokens or passwords.\n    *\n    * @see {@link set} to store values in the keychain.\n-   * @see {@link delete} to remove values from the keychain.\n+   * @see {@link get} to retrieve values from the keychain.\n    * @see {@link list} to list all keys in the keychain (not supported).\n    * @see {@link clear} to clear all entries in the keychain (not supported).\n    */\n-  async get(key: string): Promise<string | null> {\n+  async delete(key: string): Promise<void> {\n     try {\n       const entity = new Entry(this.packageName, key);\n-      return entity.getPassword();\n+      entity.deletePassword();\n     } catch (error) {\n-      // swallow errors and return null\n-      console.error('Failed to get keychain entry:', error);\n-      return null;\n-    } finally {\n-      // noop\n+      throw new Error(`Failed to delete keychain entry for key '${key}': ${error instanceof Error ? error.message : String(error)}`);\n     }\n   }\n \n   /**\n"
                },
                {
                    "date": 1760748715515,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -183,42 +183,10 @@\n       // noop\n     }\n   }\n \n-  /**\n-   * Deletes a value from the keychain.\n-   *\n-   * @returns {Promise<void>} A promise that resolves when the value is deleted.\n-   * @throws {Error} When keychain access fails due to permissions, system limitations, or other errors.\n-   * @param key - The key to delete.\n-   * @example\n-   * ```ts\n-   * try {\n-   *   await keychain.delete('myKey');\n-   * } catch (error) {\n-   *   console.error('Failed to delete keychain entry:', error);\n-   * }\n-   * ```\n-   *\n-   * @remarks\n-   * This method uses the NAPI-RS Keyring library to delete the value securely from the system keychain.\n-   * If an error occurs during the operation, it is thrown to enable proper error handling.\n-   * Use this method to remove sensitive information such as tokens or passwords.\n-   *\n-   * @see {@link set} to store values in the keychain.\n-   * @see {@link get} to retrieve values from the keychain.\n-   * @see {@link list} to list all keys in the keychain (not supported).\n-   * @see {@link clear} to clear all entries in the keychain (not supported).\n-   */\n-  async delete(key: string): Promise<void> {\n-    try {\n-      const entity = new Entry(this.packageName, key);\n-      entity.deletePassword();\n-    } catch (error) {\n-      throw new Error(`Failed to delete keychain entry for key '${key}': ${error instanceof Error ? error.message : String(error)}`);\n-    }\n-  }\n \n+\n   /**\n    * Sets a value in the keychain.\n    *\n    * @param key - The key to set.\n"
                },
                {
                    "date": 1760748728226,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -186,41 +186,75 @@\n \n \n \n   /**\n-   * Sets a value in the keychain.\n+   * Gets a value from the keychain.\n+   * @returns {Promise<string | null>} A promise that resolves to the value associated with the key, or null if not found.\n+   * @throws {Error} When keychain access fails due to permissions, system limitations, or other errors.\n+   * @param key - The key to retrieve.\n+   * @example\n+   * ```ts\n+   * try {\n+   *   const value = await keychain.get('myKey');\n+   *   console.log(value);\n+   * } catch (error) {\n+   *   console.error('Failed to retrieve keychain entry:', error);\n+   * }\n+   * ```\n    *\n-   * @param key - The key to set.\n-   * @param value - The value to set.\n-   * @returns {Promise<void>} A promise that resolves when the value is set.\n-   * @throws Will not throw; errors are swallowed.\n+   * @remarks\n+   * This method uses the NAPI-RS Keyring library to retrieve the value securely from the system keychain.\n+   * If an error occurs during the operation, it is thrown to enable proper error handling.\n+   * Use this method to retrieve sensitive information such as tokens or passwords.\n+   *\n+   * @see {@link set} to store values in the keychain.\n+   * @see {@link delete} to remove values from the keychain.\n+   * @see {@link list} to list all keys in the keychain (not supported).\n+   * @see {@link clear} to clear all entries in the keychain (not supported).\n+   */\n+  async get(key: string): Promise<string | null> {\n+    try {\n+      const entity = new Entry(this.packageName, key);\n+      return entity.getPassword();\n+    } catch (error) {\n+      throw new Error(`Failed to get keychain entry for key '${key}': ${error instanceof Error ? error.message : String(error)}`);\n+    }\n+  }\n+\n+  /**\n+   * Deletes a value from the keychain.\n+   *\n+   * @returns {Promise<void>} A promise that resolves when the value is deleted.\n+   * @throws {Error} When keychain access fails due to permissions, system limitations, or other errors.\n+   * @param key - The key to delete.\n    * @example\n    * ```ts\n-   * await keychain.set('myKey', 'myValue');\n+   * try {\n+   *   await keychain.delete('myKey');\n+   * } catch (error) {\n+   *   console.error('Failed to delete keychain entry:', error);\n+   * }\n    * ```\n    *\n    * @remarks\n-   * This method uses the NAPI-RS Keyring library to store the value securely in the system keychain.\n-   * If an error occurs during the operation, it is logged to the console but not propagated.\n-   * This ensures that the application can continue running even if the keychain operation fails.\n-   * Use this method to store sensitive information such as tokens or passwords.\n+   * This method uses the NAPI-RS Keyring library to delete the value securely from the system keychain.\n+   * If an error occurs during the operation, it is thrown to enable proper error handling.\n+   * Use this method to remove sensitive information such as tokens or passwords.\n    *\n+   * @see {@link set} to store values in the keychain.\n    * @see {@link get} to retrieve values from the keychain.\n-   * @see {@link delete} to remove values from the keychain.\n    * @see {@link list} to list all keys in the keychain (not supported).\n    * @see {@link clear} to clear all entries in the keychain (not supported).\n    */\n-  async set(key: string, value: string): Promise<void> {\n+  async delete(key: string): Promise<void> {\n     try {\n       const entity = new Entry(this.packageName, key);\n-      entity.setPassword(value);\n+      entity.deletePassword();\n     } catch (error) {\n-      // swallow errors\n-      console.error('Failed to set keychain entry:', error);\n-    } finally {\n-      // noop\n+      throw new Error(`Failed to delete keychain entry for key '${key}': ${error instanceof Error ? error.message : String(error)}`);\n     }\n   }\n+  }\n \n   /**\n    * Lists all keys stored in the keychain.\n    *\n"
                },
                {
                    "date": 1760748749303,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -186,38 +186,38 @@\n \n \n \n   /**\n-   * Gets a value from the keychain.\n-   * @returns {Promise<string | null>} A promise that resolves to the value associated with the key, or null if not found.\n+   * Deletes a value from the keychain.\n+   *\n+   * @returns {Promise<void>} A promise that resolves when the value is deleted.\n    * @throws {Error} When keychain access fails due to permissions, system limitations, or other errors.\n-   * @param key - The key to retrieve.\n+   * @param key - The key to delete.\n    * @example\n    * ```ts\n    * try {\n-   *   const value = await keychain.get('myKey');\n-   *   console.log(value);\n+   *   await keychain.delete('myKey');\n    * } catch (error) {\n-   *   console.error('Failed to retrieve keychain entry:', error);\n+   *   console.error('Failed to delete keychain entry:', error);\n    * }\n    * ```\n    *\n    * @remarks\n-   * This method uses the NAPI-RS Keyring library to retrieve the value securely from the system keychain.\n+   * This method uses the NAPI-RS Keyring library to delete the value securely from the system keychain.\n    * If an error occurs during the operation, it is thrown to enable proper error handling.\n-   * Use this method to retrieve sensitive information such as tokens or passwords.\n+   * Use this method to remove sensitive information such as tokens or passwords.\n    *\n    * @see {@link set} to store values in the keychain.\n-   * @see {@link delete} to remove values from the keychain.\n+   * @see {@link get} to retrieve values from the keychain.\n    * @see {@link list} to list all keys in the keychain (not supported).\n    * @see {@link clear} to clear all entries in the keychain (not supported).\n    */\n-  async get(key: string): Promise<string | null> {\n+  async delete(key: string): Promise<void> {\n     try {\n       const entity = new Entry(this.packageName, key);\n-      return entity.getPassword();\n+      entity.deletePassword();\n     } catch (error) {\n-      throw new Error(`Failed to get keychain entry for key '${key}': ${error instanceof Error ? error.message : String(error)}`);\n+      throw new Error(`Failed to delete keychain entry for key '${key}': ${error instanceof Error ? error.message : String(error)}`);\n     }\n   }\n \n   /**\n"
                },
                {
                    "date": 1760748759504,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -220,41 +220,41 @@\n     }\n   }\n \n   /**\n-   * Deletes a value from the keychain.\n+   * Sets a value in the keychain.\n    *\n-   * @returns {Promise<void>} A promise that resolves when the value is deleted.\n+   * @param key - The key to set.\n+   * @param value - The value to set.\n+   * @returns {Promise<void>} A promise that resolves when the value is set.\n    * @throws {Error} When keychain access fails due to permissions, system limitations, or other errors.\n-   * @param key - The key to delete.\n    * @example\n    * ```ts\n    * try {\n-   *   await keychain.delete('myKey');\n+   *   await keychain.set('myKey', 'myValue');\n    * } catch (error) {\n-   *   console.error('Failed to delete keychain entry:', error);\n+   *   console.error('Failed to set keychain entry:', error);\n    * }\n    * ```\n    *\n    * @remarks\n-   * This method uses the NAPI-RS Keyring library to delete the value securely from the system keychain.\n+   * This method uses the NAPI-RS Keyring library to store the value securely in the system keychain.\n    * If an error occurs during the operation, it is thrown to enable proper error handling.\n-   * Use this method to remove sensitive information such as tokens or passwords.\n+   * Use this method to store sensitive information such as tokens or passwords.\n    *\n-   * @see {@link set} to store values in the keychain.\n    * @see {@link get} to retrieve values from the keychain.\n+   * @see {@link delete} to remove values from the keychain.\n    * @see {@link list} to list all keys in the keychain (not supported).\n    * @see {@link clear} to clear all entries in the keychain (not supported).\n    */\n-  async delete(key: string): Promise<void> {\n+  async set(key: string, value: string): Promise<void> {\n     try {\n       const entity = new Entry(this.packageName, key);\n-      entity.deletePassword();\n+      entity.setPassword(value);\n     } catch (error) {\n-      throw new Error(`Failed to delete keychain entry for key '${key}': ${error instanceof Error ? error.message : String(error)}`);\n+      throw new Error(`Failed to set keychain entry for key '${key}': ${error instanceof Error ? error.message : String(error)}`);\n     }\n   }\n-  }\n \n   /**\n    * Lists all keys stored in the keychain.\n    *\n"
                },
                {
                    "date": 1760748803034,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -125,8 +125,11 @@\n    * @see {@link list} to list all keys in the keychain (not supported).\n    * @see {@link delete} to remove values from the keychain.\n    */\n   constructor(private readonly packageName: string) {}\n+  get(key: string): Promise<string | null> {\n+    throw new Error('Method not implemented.');\n+  }\n \n   /**\n    * Clears all entries from the keychain.\n    *\n"
                },
                {
                    "date": 1760748809148,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -125,11 +125,8 @@\n    * @see {@link list} to list all keys in the keychain (not supported).\n    * @see {@link delete} to remove values from the keychain.\n    */\n   constructor(private readonly packageName: string) {}\n-  get(key: string): Promise<string | null> {\n-    throw new Error('Method not implemented.');\n-  }\n \n   /**\n    * Clears all entries from the keychain.\n    *\n@@ -223,41 +220,41 @@\n     }\n   }\n \n   /**\n-   * Sets a value in the keychain.\n+   * Deletes a value from the keychain.\n    *\n-   * @param key - The key to set.\n-   * @param value - The value to set.\n-   * @returns {Promise<void>} A promise that resolves when the value is set.\n+   * @returns {Promise<void>} A promise that resolves when the value is deleted.\n    * @throws {Error} When keychain access fails due to permissions, system limitations, or other errors.\n+   * @param key - The key to delete.\n    * @example\n    * ```ts\n    * try {\n-   *   await keychain.set('myKey', 'myValue');\n+   *   await keychain.delete('myKey');\n    * } catch (error) {\n-   *   console.error('Failed to set keychain entry:', error);\n+   *   console.error('Failed to delete keychain entry:', error);\n    * }\n    * ```\n    *\n    * @remarks\n-   * This method uses the NAPI-RS Keyring library to store the value securely in the system keychain.\n+   * This method uses the NAPI-RS Keyring library to delete the value securely from the system keychain.\n    * If an error occurs during the operation, it is thrown to enable proper error handling.\n-   * Use this method to store sensitive information such as tokens or passwords.\n+   * Use this method to remove sensitive information such as tokens or passwords.\n    *\n+   * @see {@link set} to store values in the keychain.\n    * @see {@link get} to retrieve values from the keychain.\n-   * @see {@link delete} to remove values from the keychain.\n    * @see {@link list} to list all keys in the keychain (not supported).\n    * @see {@link clear} to clear all entries in the keychain (not supported).\n    */\n-  async set(key: string, value: string): Promise<void> {\n+  async delete(key: string): Promise<void> {\n     try {\n       const entity = new Entry(this.packageName, key);\n-      entity.setPassword(value);\n+      entity.deletePassword();\n     } catch (error) {\n-      throw new Error(`Failed to set keychain entry for key '${key}': ${error instanceof Error ? error.message : String(error)}`);\n+      throw new Error(`Failed to delete keychain entry for key '${key}': ${error instanceof Error ? error.message : String(error)}`);\n     }\n   }\n+  }\n \n   /**\n    * Lists all keys stored in the keychain.\n    *\n"
                },
                {
                    "date": 1760748848803,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -69,21 +69,17 @@\n  * This ensures that entries from different applications do not conflict with each other.\n  *\n  * @param packageName - The package name used as the service identifier in the keychain.\n  *\n- * @throws {Error} Errors may be thrown when keychain operations fail due to system limitations or permissions.\n+ * @throws Will not throw; errors are swallowed in individual methods.\n  *\n  * @example\n  * ```ts\n- * try {\n- *   const keychain = new SystemKeychain('my-package-name');\n- *   await keychain.set('myKey', 'myValue');\n- *   const value = await keychain.get('myKey');\n- *   console.log(value); // Outputs: 'myValue'\n- *   await keychain.delete('myKey');\n- * } catch (error) {\n- *   console.error('Keychain operation failed:', error);\n- * }\n+ * const keychain = new SystemKeychain('my-package-name');\n+ * await keychain.set('myKey', 'myValue');\n+ * const value = await keychain.get('myKey');\n+ * console.log(value); // Outputs: 'myValue'\n+ * await keychain.delete('myKey');\n  * ```\n  *\n  * @remarks\n  * The SystemKeychain class is designed to provide a simple and consistent interface for keychain operations\n@@ -92,11 +88,8 @@\n  *\n  * Note that some operations, such as listing all keys or clearing the keychain, are not supported\n  * by the underlying NAPI-RS Keyring library and are implemented as no-ops or return empty results.\n  *\n- * All keychain operations that interact with the system keychain will throw errors if the operation fails,\n- * providing better error visibility and enabling proper error handling in applications.\n- *\n  * @see {@link IKeychainProvider} for the interface definition.\n  * @see {@link Entry} from NAPI-RS Keyring for more details on the underlying implementation.\n  * @see {@link set} to store values in the keychain.\n  * @see {@link get} to retrieve values from the keychain.\n@@ -125,8 +118,11 @@\n    * @see {@link list} to list all keys in the keychain (not supported).\n    * @see {@link delete} to remove values from the keychain.\n    */\n   constructor(private readonly packageName: string) {}\n+  get(key: string): Promise<string | null> {\n+    throw new Error('Method not implemented.');\n+  }\n \n   /**\n    * Clears all entries from the keychain.\n    *\n@@ -220,41 +216,41 @@\n     }\n   }\n \n   /**\n-   * Deletes a value from the keychain.\n+   * Sets a value in the keychain.\n    *\n-   * @returns {Promise<void>} A promise that resolves when the value is deleted.\n+   * @param key - The key to set.\n+   * @param value - The value to set.\n+   * @returns {Promise<void>} A promise that resolves when the value is set.\n    * @throws {Error} When keychain access fails due to permissions, system limitations, or other errors.\n-   * @param key - The key to delete.\n    * @example\n    * ```ts\n    * try {\n-   *   await keychain.delete('myKey');\n+   *   await keychain.set('myKey', 'myValue');\n    * } catch (error) {\n-   *   console.error('Failed to delete keychain entry:', error);\n+   *   console.error('Failed to set keychain entry:', error);\n    * }\n    * ```\n    *\n    * @remarks\n-   * This method uses the NAPI-RS Keyring library to delete the value securely from the system keychain.\n+   * This method uses the NAPI-RS Keyring library to store the value securely in the system keychain.\n    * If an error occurs during the operation, it is thrown to enable proper error handling.\n-   * Use this method to remove sensitive information such as tokens or passwords.\n+   * Use this method to store sensitive information such as tokens or passwords.\n    *\n-   * @see {@link set} to store values in the keychain.\n    * @see {@link get} to retrieve values from the keychain.\n+   * @see {@link delete} to remove values from the keychain.\n    * @see {@link list} to list all keys in the keychain (not supported).\n    * @see {@link clear} to clear all entries in the keychain (not supported).\n    */\n-  async delete(key: string): Promise<void> {\n+  async set(key: string, value: string): Promise<void> {\n     try {\n       const entity = new Entry(this.packageName, key);\n-      entity.deletePassword();\n+      entity.setPassword(value);\n     } catch (error) {\n-      throw new Error(`Failed to delete keychain entry for key '${key}': ${error instanceof Error ? error.message : String(error)}`);\n+      throw new Error(`Failed to set keychain entry for key '${key}': ${error instanceof Error ? error.message : String(error)}`);\n     }\n   }\n-  }\n \n   /**\n    * Lists all keys stored in the keychain.\n    *\n"
                },
                {
                    "date": 1760748856439,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -118,12 +118,10 @@\n    * @see {@link list} to list all keys in the keychain (not supported).\n    * @see {@link delete} to remove values from the keychain.\n    */\n   constructor(private readonly packageName: string) {}\n-  get(key: string): Promise<string | null> {\n-    throw new Error('Method not implemented.');\n-  }\n \n+\n   /**\n    * Clears all entries from the keychain.\n    *\n    * @warning NAPI-RS Keyring does not support clearing all entries. This method is a noop.\n"
                },
                {
                    "date": 1760748865641,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -119,8 +119,42 @@\n    * @see {@link delete} to remove values from the keychain.\n    */\n   constructor(private readonly packageName: string) {}\n \n+  /**\n+   * Gets a value from the keychain.\n+   * @returns {Promise<string | null>} A promise that resolves to the value associated with the key, or null if not found.\n+   * @throws Will not throw; errors are swallowed and null is returned.\n+   * @param key - The key to retrieve.\n+   * @example\n+   * ```ts\n+   * const value = await keychain.get('myKey');\n+   * console.log(value);\n+   * ```\n+   *\n+   * @remarks\n+   * This method uses the NAPI-RS Keyring library to retrieve the value securely from the system keychain.\n+   * If an error occurs during the operation, it is logged to the console but not propagated.\n+   * This ensures that the application can continue running even if the keychain operation fails.\n+   * Use this method to retrieve sensitive information such as tokens or passwords.\n+   *\n+   * @see {@link set} to store values in the keychain.\n+   * @see {@link delete} to remove values from the keychain.\n+   * @see {@link list} to list all keys in the keychain (not supported).\n+   * @see {@link clear} to clear all entries in the keychain (not supported).\n+   */\n+  async get(key: string): Promise<string | null> {\n+    try {\n+      const entity = new Entry(this.packageName, key);\n+      return entity.getPassword();\n+    } catch (error) {\n+      // swallow errors and return null\n+      console.error('Failed to get keychain entry:', error);\n+      return null;\n+    } finally {\n+      // noop\n+    }\n+  }\n \n   /**\n    * Clears all entries from the keychain.\n    *\n"
                },
                {
                    "date": 1760748878310,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -211,28 +211,23 @@\n       // noop\n     }\n   }\n \n-\n-\n   /**\n    * Deletes a value from the keychain.\n    *\n    * @returns {Promise<void>} A promise that resolves when the value is deleted.\n-   * @throws {Error} When keychain access fails due to permissions, system limitations, or other errors.\n+   * @throws Will not throw; errors are swallowed.\n    * @param key - The key to delete.\n    * @example\n    * ```ts\n-   * try {\n-   *   await keychain.delete('myKey');\n-   * } catch (error) {\n-   *   console.error('Failed to delete keychain entry:', error);\n-   * }\n+   * await keychain.delete('myKey');\n    * ```\n    *\n    * @remarks\n    * This method uses the NAPI-RS Keyring library to delete the value securely from the system keychain.\n-   * If an error occurs during the operation, it is thrown to enable proper error handling.\n+   * If an error occurs during the operation, it is logged to the console but not propagated.\n+   * This ensures that the application can continue running even if the keychain operation fails.\n    * Use this method to remove sensitive information such as tokens or passwords.\n    *\n    * @see {@link set} to store values in the keychain.\n    * @see {@link get} to retrieve values from the keychain.\n@@ -243,45 +238,14 @@\n     try {\n       const entity = new Entry(this.packageName, key);\n       entity.deletePassword();\n     } catch (error) {\n-      throw new Error(`Failed to delete keychain entry for key '${key}': ${error instanceof Error ? error.message : String(error)}`);\n+      // swallow errors\n+      console.error('Failed to delete keychain entry:', error);\n+    } finally {\n+      // noop\n     }\n   }\n-\n-  /**\n-   * Sets a value in the keychain.\n-   *\n-   * @param key - The key to set.\n-   * @param value - The value to set.\n-   * @returns {Promise<void>} A promise that resolves when the value is set.\n-   * @throws {Error} When keychain access fails due to permissions, system limitations, or other errors.\n-   * @example\n-   * ```ts\n-   * try {\n-   *   await keychain.set('myKey', 'myValue');\n-   * } catch (error) {\n-   *   console.error('Failed to set keychain entry:', error);\n-   * }\n-   * ```\n-   *\n-   * @remarks\n-   * This method uses the NAPI-RS Keyring library to store the value securely in the system keychain.\n-   * If an error occurs during the operation, it is thrown to enable proper error handling.\n-   * Use this method to store sensitive information such as tokens or passwords.\n-   *\n-   * @see {@link get} to retrieve values from the keychain.\n-   * @see {@link delete} to remove values from the keychain.\n-   * @see {@link list} to list all keys in the keychain (not supported).\n-   * @see {@link clear} to clear all entries in the keychain (not supported).\n-   */\n-  async set(key: string, value: string): Promise<void> {\n-    try {\n-      const entity = new Entry(this.packageName, key);\n-      entity.setPassword(value);\n-    } catch (error) {\n-      throw new Error(`Failed to set keychain entry for key '${key}': ${error instanceof Error ? error.message : String(error)}`);\n-    }\n   }\n \n   /**\n    * Lists all keys stored in the keychain.\n"
                },
                {
                    "date": 1760748891661,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -212,41 +212,67 @@\n     }\n   }\n \n   /**\n-   * Deletes a value from the keychain.\n+   * Sets a value in the keychain.\n    *\n-   * @returns {Promise<void>} A promise that resolves when the value is deleted.\n+   * @param key - The key to set.\n+   * @param value - The value to set.\n+   * @returns {Promise<void>} A promise that resolves when the value is set.\n    * @throws Will not throw; errors are swallowed.\n-   * @param key - The key to delete.\n    * @example\n    * ```ts\n-   * await keychain.delete('myKey');\n+   * await keychain.set('myKey', 'myValue');\n    * ```\n    *\n    * @remarks\n-   * This method uses the NAPI-RS Keyring library to delete the value securely from the system keychain.\n+   * This method uses the NAPI-RS Keyring library to store the value securely in the system keychain.\n    * If an error occurs during the operation, it is logged to the console but not propagated.\n    * This ensures that the application can continue running even if the keychain operation fails.\n-   * Use this method to remove sensitive information such as tokens or passwords.\n+   * Use this method to store sensitive information such as tokens or passwords.\n    *\n-   * @see {@link set} to store values in the keychain.\n    * @see {@link get} to retrieve values from the keychain.\n+   * @see {@link delete} to remove values from the keychain.\n    * @see {@link list} to list all keys in the keychain (not supported).\n    * @see {@link clear} to clear all entries in the keychain (not supported).\n    */\n-  async delete(key: string): Promise<void> {\n+  async set(key: string, value: string): Promise<void> {\n     try {\n       const entity = new Entry(this.packageName, key);\n-      entity.deletePassword();\n+      entity.setPassword(value);\n     } catch (error) {\n       // swallow errors\n-      console.error('Failed to delete keychain entry:', error);\n+      console.error('Failed to set keychain entry:', error);\n     } finally {\n       // noop\n     }\n   }\n+\n+  /**\n+   * Lists all keys stored in the keychain.\n+   *\n+   * @warning NAPI-RS Keyring does not support listing entries. This method returns an empty array.\n+   * @returns {Promise<string[]>} An empty array.\n+   * @throws Will not throw; always returns an empty array.\n+   * @example\n+   * ```ts\n+   * const keys = await keychain.list();\n+   * console.log(keys);\n+   * ```\n+   * @remarks\n+   * This method is included to fulfill the IKeychainProvider interface but does not provide actual\n+   * functionality due to limitations in the underlying library.\n+   *\n+   * @see {@link get} to retrieve values from the keychain.\n+   * @see {@link set} to store values in the keychain.\n+   * @see {@link delete} to remove values from the keychain.\n+   * @see {@link clear} to clear all entries in the keychain (not supported).\n+   */\n+  async list(): Promise<string[]> {\n+    // NAPI-RS Keyring does not support listing entries, so return an empty array.\n+    return Promise.resolve([]);\n   }\n+}\n \n   /**\n    * Lists all keys stored in the keychain.\n    *\n"
                },
                {
                    "date": 1760748909078,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -271,30 +271,4 @@\n     // NAPI-RS Keyring does not support listing entries, so return an empty array.\n     return Promise.resolve([]);\n   }\n }\n-\n-  /**\n-   * Lists all keys stored in the keychain.\n-   *\n-   * @warning NAPI-RS Keyring does not support listing entries. This method returns an empty array.\n-   * @returns {Promise<string[]>} An empty array.\n-   * @throws Will not throw; always returns an empty array.\n-   * @example\n-   * ```ts\n-   * const keys = await keychain.list();\n-   * console.log(keys);\n-   * ```\n-   * @remarks\n-   * This method is included to fulfill the IKeychainProvider interface but does not provide actual\n-   * functionality due to limitations in the underlying library.\n-   *\n-   * @see {@link get} to retrieve values from the keychain.\n-   * @see {@link set} to store values in the keychain.\n-   * @see {@link delete} to remove values from the keychain.\n-   * @see {@link clear} to clear all entries in the keychain (not supported).\n-   */\n-  async list(): Promise<string[]> {\n-    // NAPI-RS Keyring does not support listing entries, so return an empty array.\n-    return Promise.resolve([]);\n-  }\n-}\n"
                },
                {
                    "date": 1760749211115,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -69,9 +69,10 @@\n  * This ensures that entries from different applications do not conflict with each other.\n  *\n  * @param packageName - The package name used as the service identifier in the keychain.\n  *\n- * @throws Will not throw; errors are swallowed in individual methods.\n+ * @exceptions Errors may occur during keychain operations but are intentionally caught and logged\n+ * rather than thrown to ensure the application continues running. No exceptions are thrown by this class.\n  *\n  * @example\n  * ```ts\n  * const keychain = new SystemKeychain('my-package-name');\n@@ -148,9 +149,9 @@\n       return entity.getPassword();\n     } catch (error) {\n       // swallow errors and return null\n       console.error('Failed to get keychain entry:', error);\n-      return null;\n+      throw new Error('Failed to get keychain entry', { cause: error });\n     } finally {\n       // noop\n     }\n   }\n@@ -175,8 +176,9 @@\n    * @see {@link delete} to remove values from the keychain.\n    */\n   async clear(): Promise<void> {\n     // NAPI-RS Keyring does not support clearing all entries, so this is a noop.\n+    console.warn('SystemKeychain.clear() is not supported and is a noop.');\n     return;\n   }\n \n   /**\n@@ -206,8 +208,9 @@\n       entity.deletePassword();\n     } catch (error) {\n       // swallow errors\n       console.error('Failed to delete keychain entry:', error);\n+      throw new Error('Failed to delete keychain entry', { cause: error });\n     } finally {\n       // noop\n     }\n   }\n@@ -241,8 +244,9 @@\n       entity.setPassword(value);\n     } catch (error) {\n       // swallow errors\n       console.error('Failed to set keychain entry:', error);\n+      throw new Error('Failed to set keychain entry', { cause: error });\n     } finally {\n       // noop\n     }\n   }\n@@ -268,7 +272,8 @@\n    * @see {@link clear} to clear all entries in the keychain (not supported).\n    */\n   async list(): Promise<string[]> {\n     // NAPI-RS Keyring does not support listing entries, so return an empty array.\n+    console.warn(`SystemKeychain list() is not supported and is a noop.`);\n     return Promise.resolve([]);\n   }\n }\n"
                },
                {
                    "date": 1760749237926,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -149,9 +149,9 @@\n       return entity.getPassword();\n     } catch (error) {\n       // swallow errors and return null\n       console.error('Failed to get keychain entry:', error);\n-      throw new Error('Failed to get keychain entry', { cause: error });\n+      return null;\n     } finally {\n       // noop\n     }\n   }\n"
                },
                {
                    "date": 1760749395863,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -69,10 +69,10 @@\n  * This ensures that entries from different applications do not conflict with each other.\n  *\n  * @param packageName - The package name used as the service identifier in the keychain.\n  *\n- * @exceptions Errors may occur during keychain operations but are intentionally caught and logged\n- * rather than thrown to ensure the application continues running. No exceptions are thrown by this class.\n+ * @throws {Error} Throws an error if a keychain operation (get, set, delete) fails.\n+ * This allows callers to handle failures explicitly.\n  *\n  * @example\n  * ```ts\n  * const keychain = new SystemKeychain('my-package-name');\n@@ -123,46 +123,31 @@\n \n   /**\n    * Gets a value from the keychain.\n    * @returns {Promise<string | null>} A promise that resolves to the value associated with the key, or null if not found.\n-   * @throws Will not throw; errors are swallowed and null is returned.\n+   * @throws {Error} Throws an error if the keychain operation fails.\n    * @param key - The key to retrieve.\n    * @example\n    * ```ts\n    * const value = await keychain.get('myKey');\n    * console.log(value);\n    * ```\n-   *\n-   * @remarks\n-   * This method uses the NAPI-RS Keyring library to retrieve the value securely from the system keychain.\n-   * If an error occurs during the operation, it is logged to the console but not propagated.\n-   * This ensures that the application can continue running even if the keychain operation fails.\n-   * Use this method to retrieve sensitive information such as tokens or passwords.\n-   *\n-   * @see {@link set} to store values in the keychain.\n-   * @see {@link delete} to remove values from the keychain.\n-   * @see {@link list} to list all keys in the keychain (not supported).\n-   * @see {@link clear} to clear all entries in the keychain (not supported).\n    */\n   async get(key: string): Promise<string | null> {\n     try {\n       const entity = new Entry(this.packageName, key);\n       return entity.getPassword();\n     } catch (error) {\n-      // swallow errors and return null\n       console.error('Failed to get keychain entry:', error);\n-      return null;\n-    } finally {\n-      // noop\n+      throw new Error('Failed to get keychain entry', { cause: error });\n     }\n   }\n \n   /**\n    * Clears all entries from the keychain.\n    *\n    * @warning NAPI-RS Keyring does not support clearing all entries. This method is a noop.\n    * @returns {Promise<void>} A promise that resolves when the operation is complete.\n-   * @throws Will not throw; this is a noop.\n    * @example\n    * ```ts\n    * await keychain.clear();\n    * ```\n@@ -184,35 +169,22 @@\n   /**\n    * Deletes a value from the keychain.\n    *\n    * @returns {Promise<void>} A promise that resolves when the value is deleted.\n-   * @throws Will not throw; errors are swallowed.\n+   * @throws {Error} Throws an error if the keychain operation fails.\n    * @param key - The key to delete.\n    * @example\n    * ```ts\n    * await keychain.delete('myKey');\n    * ```\n-   * @remarks\n-   * This method uses the NAPI-RS Keyring library to delete the value securely from the system keychain.\n-   * If an error occurs during the operation, it is logged to the console but not propagated.\n-   * This ensures that the application can continue running even if the keychain operation fails.\n-   * Use this method to remove sensitive information such as tokens or passwords.\n-   *\n-   * @see {@link set} to store values in the keychain.\n-   * @see {@link get} to retrieve values from the keychain.\n-   * @see {@link list} to list all keys in the keychain (not supported).\n-   * @see {@link clear} to clear all entries in the keychain (not supported).\n    */\n   async delete(key: string): Promise<void> {\n     try {\n       const entity = new Entry(this.packageName, key);\n       entity.deletePassword();\n     } catch (error) {\n-      // swallow errors\n       console.error('Failed to delete keychain entry:', error);\n       throw new Error('Failed to delete keychain entry', { cause: error });\n-    } finally {\n-      // noop\n     }\n   }\n \n   /**\n@@ -220,44 +192,29 @@\n    *\n    * @param key - The key to set.\n    * @param value - The value to set.\n    * @returns {Promise<void>} A promise that resolves when the value is set.\n-   * @throws Will not throw; errors are swallowed.\n+   * @throws {Error} Throws an error if the keychain operation fails.\n    * @example\n    * ```ts\n    * await keychain.set('myKey', 'myValue');\n    * ```\n-   *\n-   * @remarks\n-   * This method uses the NAPI-RS Keyring library to store the value securely in the system keychain.\n-   * If an error occurs during the operation, it is logged to the console but not propagated.\n-   * This ensures that the application can continue running even if the keychain operation fails.\n-   * Use this method to store sensitive information such as tokens or passwords.\n-   *\n-   * @see {@link get} to retrieve values from the keychain.\n-   * @see {@link delete} to remove values from the keychain.\n-   * @see {@link list} to list all keys in the keychain (not supported).\n-   * @see {@link clear} to clear all entries in the keychain (not supported).\n    */\n   async set(key: string, value: string): Promise<void> {\n     try {\n       const entity = new Entry(this.packageName, key);\n       entity.setPassword(value);\n     } catch (error) {\n-      // swallow errors\n       console.error('Failed to set keychain entry:', error);\n       throw new Error('Failed to set keychain entry', { cause: error });\n-    } finally {\n-      // noop\n     }\n   }\n \n   /**\n    * Lists all keys stored in the keychain.\n    *\n    * @warning NAPI-RS Keyring does not support listing entries. This method returns an empty array.\n    * @returns {Promise<string[]>} An empty array.\n-   * @throws Will not throw; always returns an empty array.\n    * @example\n    * ```ts\n    * const keys = await keychain.list();\n    * console.log(keys);\n"
                },
                {
                    "date": 1760749672183,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -69,10 +69,9 @@\n  * This ensures that entries from different applications do not conflict with each other.\n  *\n  * @param packageName - The package name used as the service identifier in the keychain.\n  *\n- * @throws {Error} Throws an error if a keychain operation (get, set, delete) fails.\n- * This allows callers to handle failures explicitly.\n+ * @throws Propagates errors from the underlying keychain operations so callers can handle failures.\n  *\n  * @example\n  * ```ts\n  * const keychain = new SystemKeychain('my-package-name');\n@@ -123,31 +122,45 @@\n \n   /**\n    * Gets a value from the keychain.\n    * @returns {Promise<string | null>} A promise that resolves to the value associated with the key, or null if not found.\n-   * @throws {Error} Throws an error if the keychain operation fails.\n+   * @throws Rethrows any error encountered while accessing the underlying keychain entry.\n    * @param key - The key to retrieve.\n    * @example\n    * ```ts\n    * const value = await keychain.get('myKey');\n    * console.log(value);\n    * ```\n+   *\n+   * @remarks\n+   * This method uses the NAPI-RS Keyring library to retrieve the value securely from the system keychain.\n+   * If an error occurs during the operation, it is logged and the error is rethrown so callers can decide how to handle it.\n+   * Use this method to retrieve sensitive information such as tokens or passwords.\n+   *\n+   * @see {@link set} to store values in the keychain.\n+   * @see {@link delete} to remove values from the keychain.\n+   * @see {@link list} to list all keys in the keychain (not supported).\n+   * @see {@link clear} to clear all entries in the keychain (not supported).\n    */\n   async get(key: string): Promise<string | null> {\n     try {\n       const entity = new Entry(this.packageName, key);\n       return entity.getPassword();\n     } catch (error) {\n+      // swallow errors and return null\n       console.error('Failed to get keychain entry:', error);\n       throw new Error('Failed to get keychain entry', { cause: error });\n+    } finally {\n+      // noop\n     }\n   }\n \n   /**\n    * Clears all entries from the keychain.\n    *\n    * @warning NAPI-RS Keyring does not support clearing all entries. This method is a noop.\n    * @returns {Promise<void>} A promise that resolves when the operation is complete.\n+   * @throws Will not throw; this is a noop.\n    * @example\n    * ```ts\n    * await keychain.clear();\n    * ```\n@@ -169,22 +182,34 @@\n   /**\n    * Deletes a value from the keychain.\n    *\n    * @returns {Promise<void>} A promise that resolves when the value is deleted.\n-   * @throws {Error} Throws an error if the keychain operation fails.\n+   * @throws Rethrows any error encountered while deleting the underlying keychain entry.\n    * @param key - The key to delete.\n    * @example\n    * ```ts\n    * await keychain.delete('myKey');\n    * ```\n+   * @remarks\n+   * This method uses the NAPI-RS Keyring library to delete the value securely from the system keychain.\n+   * If an error occurs during the operation, it is logged and the error is rethrown so callers can decide how to handle it.\n+   * Use this method to remove sensitive information such as tokens or passwords.\n+   *\n+   * @see {@link set} to store values in the keychain.\n+   * @see {@link get} to retrieve values from the keychain.\n+   * @see {@link list} to list all keys in the keychain (not supported).\n+   * @see {@link clear} to clear all entries in the keychain (not supported).\n    */\n   async delete(key: string): Promise<void> {\n     try {\n       const entity = new Entry(this.packageName, key);\n       entity.deletePassword();\n     } catch (error) {\n+      // swallow errors\n       console.error('Failed to delete keychain entry:', error);\n       throw new Error('Failed to delete keychain entry', { cause: error });\n+    } finally {\n+      // noop\n     }\n   }\n \n   /**\n@@ -192,29 +217,43 @@\n    *\n    * @param key - The key to set.\n    * @param value - The value to set.\n    * @returns {Promise<void>} A promise that resolves when the value is set.\n-   * @throws {Error} Throws an error if the keychain operation fails.\n+   * @throws Rethrows any error encountered while storing the value in the underlying keychain entry.\n    * @example\n    * ```ts\n    * await keychain.set('myKey', 'myValue');\n    * ```\n+   *\n+   * @remarks\n+   * This method uses the NAPI-RS Keyring library to store the value securely in the system keychain.\n+   * If an error occurs during the operation, it is logged and the error is rethrown so callers can decide how to handle it.\n+   * Use this method to store sensitive information such as tokens or passwords.\n+   *\n+   * @see {@link get} to retrieve values from the keychain.\n+   * @see {@link delete} to remove values from the keychain.\n+   * @see {@link list} to list all keys in the keychain (not supported).\n+   * @see {@link clear} to clear all entries in the keychain (not supported).\n    */\n   async set(key: string, value: string): Promise<void> {\n     try {\n       const entity = new Entry(this.packageName, key);\n       entity.setPassword(value);\n     } catch (error) {\n+      // swallow errors\n       console.error('Failed to set keychain entry:', error);\n       throw new Error('Failed to set keychain entry', { cause: error });\n+    } finally {\n+      // noop\n     }\n   }\n \n   /**\n    * Lists all keys stored in the keychain.\n    *\n    * @warning NAPI-RS Keyring does not support listing entries. This method returns an empty array.\n    * @returns {Promise<string[]>} An empty array.\n+   * @throws  Will not throw; this is a noop.\n    * @example\n    * ```ts\n    * const keys = await keychain.list();\n    * console.log(keys);\n"
                }
            ],
            "date": 1760741840659,
            "name": "Commit-0",
            "content": "/**\n * @file keychain.ts\n * @description This file defines the IKeychainProvider interface and the SystemKeychain class,\n * which provides a secure way to store and retrieve sensitive information such as tokens and passwords\n * using the system's native keychain services via the NAPI-RS Keyring library.\n *\n * @license MIT\n * @author amannirala13\n *\n * while the SystemKeychain class implements this interface using the NAPI-RS Keyring library.\n * This allows for secure storage and retrieval of sensitive information in a platform-agnostic manner.\n *\n * @see {@link IKeychainProvider} for the interface definition.\n * @see {@link SystemKeychain} for the concrete implementation.\n * @see {@link Entry} from NAPI-RS Keyring for more details on the underlying implementation.\n */\n\nimport { Entry } from '@napi-rs/keyring';\nimport * as console from 'node:console';\n\n/**\n * IKeychainProvider defines the interface for a keychain provider.\n * It includes methods for getting, listing, setting, deleting, and clearing keychain entries.\n *\n * @interface IKeychainProvider\n * @example\n * ```ts\n * const keychain: IKeychainProvider = new SystemKeychain('my-package-name');\n * await keychain.set('myKey', 'myValue');\n * const value = await keychain.get('myKey');\n * console.log(value); // Outputs: 'myValue'\n * await keychain.delete('myKey');\n * ```\n * @remarks\n * This interface provides a contract for keychain operations, allowing different implementations\n * to be used interchangeably. It is particularly useful for abstracting away platform-specific\n * keychain details and providing a consistent API for secure storage of sensitive information.\n *\n * @see {@link SystemKeychain} for a concrete implementation of this interface.\n * @see {@link Entry} from NAPI-RS Keyring for more details on the underlying implementation.\n * @see {@link set} to store values in the keychain.\n * @see {@link get} to retrieve values from the keychain.\n * @see {@link list} to list all keys in the keychain.\n * @see {@link delete} to remove values from the keychain.\n * @see {@link clear} to clear all entries in the keychain.\n *\n * @author amannirala13\n */\nexport interface IKeychainProvider {\n  get(key: string): Promise<string | null>;\n  list(): Promise<string[]>;\n  set(key: string, value: string): Promise<void>;\n  delete(key: string): Promise<void>;\n  clear(): Promise<void>;\n}\n\n/**\n * SystemKeychain provides a secure way to store and retrieve sensitive information\n * such as tokens and passwords using the system's native keychain services.\n * It leverages the NAPI-RS Keyring library to interact with the underlying keychain.\n *\n * @implements {IKeychainProvider}\n * @class SystemKeychain\n * @classDesc\n * SystemKeychain provides methods to set, get, delete, list, and clear keychain entries.\n * It uses the package name as the service identifier to namespace the entries.\n * This ensures that entries from different applications do not conflict with each other.\n *\n * @param packageName - The package name used as the service identifier in the keychain.\n *\n * @throws Will not throw; errors are swallowed in individual methods.\n *\n * @example\n * ```ts\n * const keychain = new SystemKeychain('my-package-name');\n * await keychain.set('myKey', 'myValue');\n * const value = await keychain.get('myKey');\n * console.log(value); // Outputs: 'myValue'\n * await keychain.delete('myKey');\n * ```\n *\n * @remarks\n * The SystemKeychain class is designed to provide a simple and consistent interface for keychain operations\n * across different platforms. It abstracts away the complexities of dealing with platform-specific\n * keychain APIs, allowing developers to focus on their application logic.\n *\n * Note that some operations, such as listing all keys or clearing the keychain, are not supported\n * by the underlying NAPI-RS Keyring library and are implemented as no-ops or return empty results.\n *\n * @see {@link IKeychainProvider} for the interface definition.\n * @see {@link Entry} from NAPI-RS Keyring for more details on the underlying implementation.\n * @see {@link set} to store values in the keychain.\n * @see {@link get} to retrieve values from the keychain.\n * @see {@link list} to list all keys in the keychain (not supported).\n * @see {@link delete} to remove values from the keychain.\n * @see {@link clear} to clear all entries in the keychain (not supported).\n *\n * @author amannirala13\n */\nexport class SystemKeychain implements IKeychainProvider {\n  /**\n   * Creates an instance of SystemKeychain.\n   * @param packageName - The package name used as the service identifier in the keychain.\n   *\n   * @example\n   * ```ts\n   * const keychain = new SystemKeychain('my-package-name');\n   * ```\n   * @remarks\n   * The package name is used to namespace the keychain entries, ensuring that they do not conflict\n   * with entries from other applications. This is particularly important when multiple applications\n   * may be using the same keychain on the system.\n   *\n   * @see {@link set} to store values in the keychain.\n   * @see {@link get} to retrieve values from the keychain.\n   * @see {@link list} to list all keys in the keychain (not supported).\n   * @see {@link delete} to remove values from the keychain.\n   */\n  constructor(private readonly packageName: string) {}\n\n  /**\n   * Clears all entries from the keychain.\n   *\n   * @warning NAPI-RS Keyring does not support clearing all entries. This method is a noop.\n   * @returns {Promise<void>} A promise that resolves when the operation is complete.\n   * @throws Will not throw; this is a noop.\n   * @example\n   * ```ts\n   * await keychain.clear();\n   * ```\n   * @remarks\n   * This method is included to fulfill the IKeychainProvider interface but does not provide actual\n   * functionality due to limitations in the underlying library.\n   *\n   * @see {@link set} to store values in the keychain.\n   * @see {@link get} to retrieve values from the keychain.\n   * @see {@link list} to list all keys in the keychain (not supported).\n   * @see {@link delete} to remove values from the keychain.\n   */\n  async clear(): Promise<void> {\n    // NAPI-RS Keyring does not support clearing all entries, so this is a noop.\n    return;\n  }\n\n  /**\n   * Deletes a value from the keychain.\n   *\n   * @returns {Promise<void>} A promise that resolves when the value is deleted.\n   * @throws Will not throw; errors are swallowed.\n   * @param key - The key to delete.\n   * @example\n   * ```ts\n   * await keychain.delete('myKey');\n   * ```\n   * @remarks\n   * This method uses the NAPI-RS Keyring library to delete the value securely from the system keychain.\n   * If an error occurs during the operation, it is logged to the console but not propagated.\n   * This ensures that the application can continue running even if the keychain operation fails.\n   * Use this method to remove sensitive information such as tokens or passwords.\n   *\n   * @see {@link set} to store values in the keychain.\n   * @see {@link get} to retrieve values from the keychain.\n   * @see {@link list} to list all keys in the keychain (not supported).\n   * @see {@link clear} to clear all entries in the keychain (not supported).\n   */\n  async delete(key: string): Promise<void> {\n    try {\n      const entity = new Entry(this.packageName, key);\n      entity.deletePassword();\n    } catch (error) {\n      // swallow errors\n      console.error('Failed to delete keychain entry:', error);\n    } finally {\n      // noop\n    }\n  }\n\n  /**\n   * Gets a value from the keychain.\n   * @returns {Promise<string | null>} A promise that resolves to the value associated with the key, or null if not found.\n   * @throws Will not throw; errors are swallowed and null is returned.\n   * @param key - The key to retrieve.\n   * @example\n   * ```ts\n   * const value = await keychain.get('myKey');\n   * console.log(value);\n   * ```\n   *\n   * @remarks\n   * This method uses the NAPI-RS Keyring library to retrieve the value securely from the system keychain.\n   * If an error occurs during the operation, it is logged to the console but not propagated.\n   * This ensures that the application can continue running even if the keychain operation fails.\n   * Use this method to retrieve sensitive information such as tokens or passwords.\n   *\n   * @see {@link set} to store values in the keychain.\n   * @see {@link delete} to remove values from the keychain.\n   * @see {@link list} to list all keys in the keychain (not supported).\n   * @see {@link clear} to clear all entries in the keychain (not supported).\n   */\n  async get(key: string): Promise<string | null> {\n    try {\n      const entity = new Entry(this.packageName, key);\n      return entity.getPassword();\n    } catch (error) {\n      // swallow errors and return null\n      console.error('Failed to get keychain entry:', error);\n      return null;\n    } finally {\n      // noop\n    }\n  }\n\n  /**\n   * Sets a value in the keychain.\n   *\n   * @param key - The key to set.\n   * @param value - The value to set.\n   * @returns {Promise<void>} A promise that resolves when the value is set.\n   * @throws Will not throw; errors are swallowed.\n   * @example\n   * ```ts\n   * await keychain.set('myKey', 'myValue');\n   * ```\n   *\n   * @remarks\n   * This method uses the NAPI-RS Keyring library to store the value securely in the system keychain.\n   * If an error occurs during the operation, it is logged to the console but not propagated.\n   * This ensures that the application can continue running even if the keychain operation fails.\n   * Use this method to store sensitive information such as tokens or passwords.\n   *\n   * @see {@link get} to retrieve values from the keychain.\n   * @see {@link delete} to remove values from the keychain.\n   * @see {@link list} to list all keys in the keychain (not supported).\n   * @see {@link clear} to clear all entries in the keychain (not supported).\n   */\n  async set(key: string, value: string): Promise<void> {\n    try {\n      const entity = new Entry(this.packageName, key);\n      entity.setPassword(value);\n    } catch (error) {\n      // swallow errors\n      console.error('Failed to set keychain entry:', error);\n    } finally {\n      // noop\n    }\n  }\n\n  /**\n   * Lists all keys stored in the keychain.\n   *\n   * @warning NAPI-RS Keyring does not support listing entries. This method returns an empty array.\n   * @returns {Promise<string[]>} An empty array.\n   * @throws Will not throw; always returns an empty array.\n   * @example\n   * ```ts\n   * const keys = await keychain.list();\n   * console.log(keys);\n   * ```\n   * @remarks\n   * This method is included to fulfill the IKeychainProvider interface but does not provide actual\n   * functionality due to limitations in the underlying library.\n   *\n   * @see {@link get} to retrieve values from the keychain.\n   * @see {@link set} to store values in the keychain.\n   * @see {@link delete} to remove values from the keychain.\n   * @see {@link clear} to clear all entries in the keychain (not supported).\n   */\n  async list(): Promise<string[]> {\n    // NAPI-RS Keyring does not support listing entries, so return an empty array.\n    return Promise.resolve([]);\n  }\n}\n"
        }
    ]
}