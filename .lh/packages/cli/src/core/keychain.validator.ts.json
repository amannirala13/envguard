{
    "sourceFile": "packages/cli/src/core/keychain.validator.ts",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 60,
            "patches": [
                {
                    "date": 1760754817347,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1760754823729,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,1 +1,1 @@\n-export \n\\ No newline at end of file\n+export const \n\\ No newline at end of file\n"
                },
                {
                    "date": 1760754832884,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,1 +1,1 @@\n-export const \n\\ No newline at end of file\n+export function validate\n\\ No newline at end of file\n"
                },
                {
                    "date": 1760754840303,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,1 +1,1 @@\n-export function validate\n\\ No newline at end of file\n+export function validateK\n\\ No newline at end of file\n"
                },
                {
                    "date": 1760754846925,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,1 +1,2 @@\n-export function validateK\n\\ No newline at end of file\n+export function validateKey(key: string): boolean {\n+  \n\\ No newline at end of file\n"
                },
                {
                    "date": 1760754853653,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,2 +1,2 @@\n export function validateKey(key: string): boolean {\n-  \n\\ No newline at end of file\n+  return Key\n\\ No newline at end of file\n"
                },
                {
                    "date": 1760754858960,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,2 +1,4 @@\n+import { KeyChainKeySchema } from \"../types/types.schema\";\n+\n\\ No newline at end of file\n export function validateKey(key: string): boolean {\n-  return Key\n+  return KeyChainKeySchema.parse\n\\ No newline at end of file\n"
                },
                {
                    "date": 1760754864946,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,4 +1,4 @@\n import { KeyChainKeySchema } from \"../types/types.schema\";\n \n export function validateKey(key: string): boolean {\n-  return KeyChainKeySchema.parse\n\\ No newline at end of file\n+  return KeyChainKeySchema.parse(key);\n\\ No newline at end of file\n"
                },
                {
                    "date": 1760754911841,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,4 +1,5 @@\n import { KeyChainKeySchema } from \"../types/types.schema\";\n \n export function validateKey(key: string): boolean {\n-  return KeyChainKeySchema.parse(key);\n\\ No newline at end of file\n+  \n+}\n\\ No newline at end of file\n"
                },
                {
                    "date": 1760754918215,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,5 +1,5 @@\n import { KeyChainKeySchema } from \"../types/types.schema\";\n \n export function validateKey(key: string): boolean {\n-  \n+  // validate zod \n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1760754924313,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,5 +1,7 @@\n import { KeyChainKeySchema } from \"../types/types.schema\";\n \n export function validateKey(key: string): boolean {\n-  // validate zod \n+  // validate zod schema\n+  const schema = KeyChainKeySchema;\n+  const result = schema.safeParse(key);\n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1760754932569,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -3,5 +3,10 @@\n export function validateKey(key: string): boolean {\n   // validate zod schema\n   const schema = KeyChainKeySchema;\n   const result = schema.safeParse(key);\n+  if (!result.success) {\n+    console.error('Invalid key:', result.erro.errors);\n+    return false;\n+  }\n+  return true;\n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1760754940860,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -4,9 +4,9 @@\n   // validate zod schema\n   const schema = KeyChainKeySchema;\n   const result = schema.safeParse(key);\n   if (!result.success) {\n-    console.error('Invalid key:', result.erro.errors);\n+    console.error('Invalid key:', result.error);\n     return false;\n   }\n   return true;\n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1760754947797,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -4,9 +4,9 @@\n   // validate zod schema\n   const schema = KeyChainKeySchema;\n   const result = schema.safeParse(key);\n   if (!result.success) {\n-    console.error('Invalid key:', result.error);\n+    console.error('Invalid key:', result.error.);\n     return false;\n   }\n   return true;\n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1760754966486,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,12 +1,12 @@\n import { KeyChainKeySchema } from \"../types/types.schema\";\n \n export function validateKey(key: string): boolean {\n   // validate zod schema\n-  const schema = KeyChainKeySchema;\n+  const schema = ;\n   const result = schema.safeParse(key);\n   if (!result.success) {\n-    console.error('Invalid key:', result.error.);\n+    console.error('Invalid key:', result.error);\n     return false;\n   }\n   return true;\n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1760755018662,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,12 +1,11 @@\n import { KeyChainKeySchema } from \"../types/types.schema\";\n \n export function validateKey(key: string): boolean {\n-  // validate zod schema\n-  const schema = ;\n-  const result = schema.safeParse(key);\n+  const result = KeyChainKeySchema.safeParse(key);\n   if (!result.success) {\n     console.error('Invalid key:', result.error);\n     return false;\n   }\n   return true;\n\\ No newline at end of file\n-}\n+}\n+\n"
                },
                {
                    "date": 1760755023856,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -7,4 +7,6 @@\n     return false;\n   }\n   return true;\n }\n+\n+export function \n\\ No newline at end of file\n"
                },
                {
                    "date": 1760755029893,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -8,5 +8,5 @@\n   }\n   return true;\n }\n \n-export function \n\\ No newline at end of file\n+export function valida\n\\ No newline at end of file\n"
                },
                {
                    "date": 1760755035578,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -8,5 +8,5 @@\n   }\n   return true;\n }\n \n-export function valida\n\\ No newline at end of file\n+export function validateValue\n\\ No newline at end of file\n"
                },
                {
                    "date": 1760755043333,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -8,5 +8,12 @@\n   }\n   return true;\n }\n \n-export function validateValue\n\\ No newline at end of file\n+export function validateValue(value: string): boolean {\n+  const result = K.safeParse(value);\n+  if (!result.success) {\n+    console.error('Invalid value:', result.error);\n+    return false;\n+  }\n+  return true;\n+}\n\\ No newline at end of file\n"
                },
                {
                    "date": 1760755052679,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -9,9 +9,9 @@\n   return true;\n }\n \n export function validateValue(value: string): boolean {\n-  const result = K.safeParse(value);\n+  const result = Def.safeParse(value);\n   if (!result.success) {\n     console.error('Invalid value:', result.error);\n     return false;\n   }\n"
                },
                {
                    "date": 1760755060096,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,5 +1,5 @@\n-import { KeyChainKeySchema } from \"../types/types.schema\";\n+import { DefaultKeyChainValueSchema, KeyChainKeySchema } from \"../types/types.schema\";\n \n export function validateKey(key: string): boolean {\n   const result = KeyChainKeySchema.safeParse(key);\n   if (!result.success) {\n@@ -9,9 +9,9 @@\n   return true;\n }\n \n export function validateValue(value: string): boolean {\n-  const result = Def.safeParse(value);\n+  const result = DefaultKeyChainValueSchema.safeParse(value);\n   if (!result.success) {\n     console.error('Invalid value:', result.error);\n     return false;\n   }\n"
                },
                {
                    "date": 1760755065263,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -8,9 +8,9 @@\n   }\n   return true;\n }\n \n-export function validateValue(value: string): boolean {\n+export function validateValue(svalue: string): boolean {\n   const result = DefaultKeyChainValueSchema.safeParse(value);\n   if (!result.success) {\n     console.error('Invalid value:', result.error);\n     return false;\n"
                },
                {
                    "date": 1760755070514,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -8,9 +8,9 @@\n   }\n   return true;\n }\n \n-export function validateValue(svalue: string): boolean {\n+export function validateValue(schma:value: string): boolean {\n   const result = DefaultKeyChainValueSchema.safeParse(value);\n   if (!result.success) {\n     console.error('Invalid value:', result.error);\n     return false;\n"
                },
                {
                    "date": 1760755075897,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -8,9 +8,9 @@\n   }\n   return true;\n }\n \n-export function validateValue(schma:value: string): boolean {\n+export function validateValue(schma:Zvalue: string): boolean {\n   const result = DefaultKeyChainValueSchema.safeParse(value);\n   if (!result.success) {\n     console.error('Invalid value:', result.error);\n     return false;\n"
                },
                {
                    "date": 1760755081667,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -8,9 +8,9 @@\n   }\n   return true;\n }\n \n-export function validateValue(schma:Zvalue: string): boolean {\n+export function validateValue(schma:Zodvalue: string): boolean {\n   const result = DefaultKeyChainValueSchema.safeParse(value);\n   if (!result.success) {\n     console.error('Invalid value:', result.error);\n     return false;\n"
                },
                {
                    "date": 1760755088826,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -8,9 +8,9 @@\n   }\n   return true;\n }\n \n-export function validateValue(schma:Zodvalue: string): boolean {\n+export function validateValue(schma:ZodSchvalue: string): boolean {\n   const result = DefaultKeyChainValueSchema.safeParse(value);\n   if (!result.success) {\n     console.error('Invalid value:', result.error);\n     return false;\n"
                },
                {
                    "date": 1760755098656,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -8,9 +8,9 @@\n   }\n   return true;\n }\n \n-export function validateValue(schma:ZodSchvalue: string): boolean {\n+export function validateValue(schma:ZodSchema, value    : string): boolean {\n   const result = DefaultKeyChainValueSchema.safeParse(value);\n   if (!result.success) {\n     console.error('Invalid value:', result.error);\n     return false;\n"
                },
                {
                    "date": 1760755104324,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -8,9 +8,9 @@\n   }\n   return true;\n }\n \n-export function validateValue(schma:ZodSchema, value    : string): boolean {\n+export function validateValue(schma:ZodSchema = , value: string): boolean {\n   const result = DefaultKeyChainValueSchema.safeParse(value);\n   if (!result.success) {\n     console.error('Invalid value:', result.error);\n     return false;\n"
                },
                {
                    "date": 1760755114967,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -8,10 +8,10 @@\n   }\n   return true;\n }\n \n-export function validateValue(schma:ZodSchema = , value: string): boolean {\n-  const result = DefaultKeyChainValueSchema.safeParse(value);\n+export function validateValue(schma:ZodSchema = DefaultKeyChainValueSchema, value: string): boolean {\n+  const result = schma.safeParse(value);\n   if (!result.success) {\n     console.error('Invalid value:', result.error);\n     return false;\n   }\n"
                },
                {
                    "date": 1760755122055,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,4 +1,5 @@\n+import { ZodSchema } from \"zod\";\n import { DefaultKeyChainValueSchema, KeyChainKeySchema } from \"../types/types.schema\";\n \n export function validateKey(key: string): boolean {\n   const result = KeyChainKeySchema.safeParse(key);\n"
                },
                {
                    "date": 1760755135058,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -9,9 +9,9 @@\n   }\n   return true;\n }\n \n-export function validateValue(schma:ZodSchema = DefaultKeyChainValueSchema, value: string): boolean {\n+export function validateValue(schma:Z = DefaultKeyChainValueSchema, value: string): boolean {\n   const result = schma.safeParse(value);\n   if (!result.success) {\n     console.error('Invalid value:', result.error);\n     return false;\n"
                },
                {
                    "date": 1760755141336,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,5 +1,5 @@\n-import { ZodSchema } from \"zod\";\n+import { ZodSchema, ZodType } from \"zod\";\n import { DefaultKeyChainValueSchema, KeyChainKeySchema } from \"../types/types.schema\";\n \n export function validateKey(key: string): boolean {\n   const result = KeyChainKeySchema.safeParse(key);\n@@ -9,9 +9,9 @@\n   }\n   return true;\n }\n \n-export function validateValue(schma:Z = DefaultKeyChainValueSchema, value: string): boolean {\n+export function validateValue(schma:ZodType = DefaultKeyChainValueSchema, value: string): boolean {\n   const result = schma.safeParse(value);\n   if (!result.success) {\n     console.error('Invalid value:', result.error);\n     return false;\n"
                },
                {
                    "date": 1760755154344,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,5 +1,5 @@\n-import { ZodSchema, ZodType } from \"zod\";\n+import { ZodType } from \"zod\";\n import { DefaultKeyChainValueSchema, KeyChainKeySchema } from \"../types/types.schema\";\n \n export function validateKey(key: string): boolean {\n   const result = KeyChainKeySchema.safeParse(key);\n"
                },
                {
                    "date": 1760755225280,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -9,9 +9,9 @@\n   }\n   return true;\n }\n \n-export function validateValue(schma:ZodType = DefaultKeyChainValueSchema, value: string): boolean {\n+export function validateValue(schma:ZodTypeA = DefaultKeyChainValueSchema, value: string): boolean {\n   const result = schma.safeParse(value);\n   if (!result.success) {\n     console.error('Invalid value:', result.error);\n     return false;\n"
                },
                {
                    "date": 1760755231070,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,5 +1,5 @@\n-import { ZodType } from \"zod\";\n+import { ZodTypeA } from \"zod\";\n import { DefaultKeyChainValueSchema, KeyChainKeySchema } from \"../types/types.schema\";\n \n export function validateKey(key: string): boolean {\n   const result = KeyChainKeySchema.safeParse(key);\n@@ -9,9 +9,9 @@\n   }\n   return true;\n }\n \n-export function validateValue(schma:ZodTypeA = DefaultKeyChainValueSchema, value: string): boolean {\n+export function validateValue(schma:ZodTypeAny = DefaultKeyChainValueSchema, value: string): boolean {\n   const result = schma.safeParse(value);\n   if (!result.success) {\n     console.error('Invalid value:', result.error);\n     return false;\n"
                },
                {
                    "date": 1760755249347,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,5 +1,5 @@\n-import { ZodTypeA } from \"zod\";\n+import {  } from \"zod\";\n import { DefaultKeyChainValueSchema, KeyChainKeySchema } from \"../types/types.schema\";\n \n export function validateKey(key: string): boolean {\n   const result = KeyChainKeySchema.safeParse(key);\n"
                },
                {
                    "date": 1760755255851,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,6 +1,7 @@\n-import {  } from \"zod\";\n+\n import { DefaultKeyChainValueSchema, KeyChainKeySchema } from \"../types/types.schema\";\n+import { ZodType } from 'zod';\n \n export function validateKey(key: string): boolean {\n   const result = KeyChainKeySchema.safeParse(key);\n   if (!result.success) {\n@@ -9,9 +10,9 @@\n   }\n   return true;\n }\n \n-export function validateValue(schma:ZodTypeAny = DefaultKeyChainValueSchema, value: string): boolean {\n+export function validateValue(schma:z.ZodType = DefaultKeyChainValueSchema, value: string): boolean {\n   const result = schma.safeParse(value);\n   if (!result.success) {\n     console.error('Invalid value:', result.error);\n     return false;\n"
                },
                {
                    "date": 1760755279776,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,8 +1,8 @@\n \n import { DefaultKeyChainValueSchema, KeyChainKeySchema } from \"../types/types.schema\";\n-import { ZodType } from 'zod';\n \n+\n export function validateKey(key: string): boolean {\n   const result = KeyChainKeySchema.safeParse(key);\n   if (!result.success) {\n     console.error('Invalid key:', result.error);\n"
                },
                {
                    "date": 1760755286002,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,5 +1,6 @@\n \n+import z from \"zod\";\n import { DefaultKeyChainValueSchema, KeyChainKeySchema } from \"../types/types.schema\";\n \n \n export function validateKey(key: string): boolean {\n"
                },
                {
                    "date": 1760755301477,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -11,9 +11,9 @@\n   }\n   return true;\n }\n \n-export function validateValue(schma:z.ZodType = DefaultKeyChainValueSchema, value: string): boolean {\n+export function validateValue(schma:z.ZodType<a = DefaultKeyChainValueSchema, value: string): boolean {\n   const result = schma.safeParse(value);\n   if (!result.success) {\n     console.error('Invalid value:', result.error);\n     return false;\n"
                },
                {
                    "date": 1760755322919,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -11,9 +11,9 @@\n   }\n   return true;\n }\n \n-export function validateValue(schma:z.ZodType<a = DefaultKeyChainValueSchema, value: string): boolean {\n+export function validateValue(schma:z.ZodType<ay> = DefaultKeyChainValueSchema, value: string): boolean {\n   const result = schma.safeParse(value);\n   if (!result.success) {\n     console.error('Invalid value:', result.error);\n     return false;\n"
                },
                {
                    "date": 1760755329988,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -11,9 +11,9 @@\n   }\n   return true;\n }\n \n-export function validateValue(schma:z.ZodType<ay> = DefaultKeyChainValueSchema, value: string): boolean {\n+export function validateValue(schma:z.ZodType<any> = DefaultKeyChainValueSchema, value: string): boolean {\n   const result = schma.safeParse(value);\n   if (!result.success) {\n     console.error('Invalid value:', result.error);\n     return false;\n"
                },
                {
                    "date": 1760755338793,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -11,9 +11,9 @@\n   }\n   return true;\n }\n \n-export function validateValue(schma:z.ZodType<any> = DefaultKeyChainValueSchema, value: string): boolean {\n+export function validateValue(schma:z.ZodType<anDey> = DefaultKeyChainValueSchema, value: string): boolean {\n   const result = schma.safeParse(value);\n   if (!result.success) {\n     console.error('Invalid value:', result.error);\n     return false;\n"
                },
                {
                    "date": 1760755346863,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -11,9 +11,10 @@\n   }\n   return true;\n }\n \n-export function validateValue(schma:z.ZodType<anDey> = DefaultKeyChainValueSchema, value: string): boolean {\n+\n+export function validateValue(schma:z.ZodType<any> = DefaultKeyChainValueSchema, value: string): boolean {\n   const result = schma.safeParse(value);\n   if (!result.success) {\n     console.error('Invalid value:', result.error);\n     return false;\n"
                },
                {
                    "date": 1760755352415,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -11,9 +11,9 @@\n   }\n   return true;\n }\n \n-\n+/**\n export function validateValue(schma:z.ZodType<any> = DefaultKeyChainValueSchema, value: string): boolean {\n   const result = schma.safeParse(value);\n   if (!result.success) {\n     console.error('Invalid value:', result.error);\n"
                },
                {
                    "date": 1760755363697,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -12,8 +12,14 @@\n   return true;\n }\n \n /**\n+ * Validates a value using a Zod schema.\n+ * @param schma The Zod schema to validate the value against.\n+ * @param value The value to validate.\n+ * @returns {boolean} True if the value is valid, false otherwise.\n+ * \n+ */\n export function validateValue(schma:z.ZodType<any> = DefaultKeyChainValueSchema, value: string): boolean {\n   const result = schma.safeParse(value);\n   if (!result.success) {\n     console.error('Invalid value:', result.error);\n"
                },
                {
                    "date": 1760755370397,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -16,9 +16,16 @@\n  * Validates a value using a Zod schema.\n  * @param schma The Zod schema to validate the value against.\n  * @param value The value to validate.\n  * @returns {boolean} True if the value is valid, false otherwise.\n- * \n+ * @example\n+ * ```ts\n+ * const isValid = validateValue(DefaultKeyChainValueSchema, 'myValue');\n+ * console.log(isValid); // Outputs: true\n+ * ```\n+ * @remarks\n+ * This function uses the Zod library to validate the value against the schema.\n+ * If the value is valid, it returns true; otherwise, it returns false.\n  */\n export function validateValue(schma:z.ZodType<any> = DefaultKeyChainValueSchema, value: string): boolean {\n   const result = schma.safeParse(value);\n   if (!result.success) {\n"
                },
                {
                    "date": 1760755376259,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -24,8 +24,13 @@\n  * ```\n  * @remarks\n  * This function uses the Zod library to validate the value against the schema.\n  * If the value is valid, it returns true; otherwise, it returns false.\n+ * \n+ * @see {@link DefaultKeyChainValueSchema} for the default schema.\n+ * @see {@link KeyChainKeySchema} for the key schema.\n+ * @see {@link z.ZodType} for more details on the underlying implementation.\n+ * \n  */\n export function validateValue(schma:z.ZodType<any> = DefaultKeyChainValueSchema, value: string): boolean {\n   const result = schma.safeParse(value);\n   if (!result.success) {\n"
                },
                {
                    "date": 1760755384812,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -28,9 +28,9 @@\n  * \n  * @see {@link DefaultKeyChainValueSchema} for the default schema.\n  * @see {@link KeyChainKeySchema} for the key schema.\n  * @see {@link z.ZodType} for more details on the underlying implementation.\n- * \n+ * @see {@link validateKey} for more details on the key validation.\n  */\n export function validateValue(schma:z.ZodType<any> = DefaultKeyChainValueSchema, value: string): boolean {\n   const result = schma.safeParse(value);\n   if (!result.success) {\n"
                },
                {
                    "date": 1760755392936,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,9 +1,9 @@\n \n import z from \"zod\";\n import { DefaultKeyChainValueSchema, KeyChainKeySchema } from \"../types/types.schema\";\n \n-\n+/**\n export function validateKey(key: string): boolean {\n   const result = KeyChainKeySchema.safeParse(key);\n   if (!result.success) {\n     console.error('Invalid key:', result.error);\n@@ -13,8 +13,9 @@\n }\n \n /**\n  * Validates a value using a Zod schema.\n+ * \n  * @param schma The Zod schema to validate the value against.\n  * @param value The value to validate.\n  * @returns {boolean} True if the value is valid, false otherwise.\n  * @example\n"
                },
                {
                    "date": 1760755399518,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,9 +1,29 @@\n-\n+/**\n+ * \n+ */\n import z from \"zod\";\n import { DefaultKeyChainValueSchema, KeyChainKeySchema } from \"../types/types.schema\";\n \n /**\n+ * Validates a key using a Zod schema.\n+ * \n+ * @param key The key to validate.\n+ * @returns {boolean} True if the key is valid, false otherwise.\n+ * @example\n+ * ```ts\n+ * const isValid = validateKey('myKey');\n+ * console.log(isValid); // Outputs: true\n+ * ```\n+ * @remarks\n+ * This function uses the Zod library to validate the key against the schema.\n+ * If the key is valid, it returns true; otherwise, it returns false.\n+ * \n+ * @see {@link DefaultKeyChainValueSchema} for the default schema.\n+ * @see {@link KeyChainKeySchema} for the key schema.\n+ * @see {@link z.ZodType} for more details on the underlying implementation.\n+ * @see {@link validateValue} for more details on the value validation.\n+ */\n export function validateKey(key: string): boolean {\n   const result = KeyChainKeySchema.safeParse(key);\n   if (!result.success) {\n     console.error('Invalid key:', result.error);\n"
                },
                {
                    "date": 1760755406788,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,86 @@\n+/**\n+ * @module @envguard/cli/core/keychain.validator\n+ * \n+ * @file keychain.validator.ts\n+ * @fileOverview This file defines the validateKey and validateValue functions\n+ * for validating keychain keys and values using the Zod library.\n+ * @public\n+ * \n+ * @summary\n+ * This module provides functions for validating keychain keys and values using the Zod library.\n+ * \n+ * @description This file defines the validateKey and validateValue functions\n+ * for validating keychain keys and values using the Zod library.\n+ * \n+ * @license MIT\n+ * @author [amannirala13](http://www.github.com/amannirala13)\n+ * \n+ * @remarks\n+ * The validateKey function uses the Zod library to validate the key against the schema.\n+ * If the key is valid, it returns true; otherwise, it returns false.\n+ * \n+ * @see {@link DefaultKeyChainValueSchema} for the default schema.\n+ * @see {@link KeyChainKeySchema} for the key schema.\n+ * @see {@link z.ZodType} for more details on the underlying implementation.\n+ * @see {@link validateValue} for more details on the value validation.\n+ */\n+\n+import z from \"zod\";\n+import { DefaultKeyChainValueSchema, KeyChainKeySchema } from \"../types/types.schema\";\n+\n+/**\n+ * Validates a key using a Zod schema.\n+ * \n+ * @param key The key to validate.\n+ * @returns {boolean} True if the key is valid, false otherwise.\n+ * @example\n+ * ```ts\n+ * const isValid = validateKey('myKey');\n+ * console.log(isValid); // Outputs: true\n+ * ```\n+ * @remarks\n+ * This function uses the Zod library to validate the key against the schema.\n+ * If the key is valid, it returns true; otherwise, it returns false.\n+ * \n+ * @see {@link DefaultKeyChainValueSchema} for the default schema.\n+ * @see {@link KeyChainKeySchema} for the key schema.\n+ * @see {@link z.ZodType} for more details on the underlying implementation.\n+ * @see {@link validateValue} for more details on the value validation.\n+ */\n+export function validateKey(key: string): boolean {\n+  const result = KeyChainKeySchema.safeParse(key);\n+  if (!result.success) {\n+    console.error('Invalid key:', result.error);\n+    return false;\n+  }\n+  return true;\n+}\n+\n+/**\n+ * Validates a value using a Zod schema.\n+ * \n+ * @param schma The Zod schema to validate the value against.\n+ * @param value The value to validate.\n+ * @returns {boolean} True if the value is valid, false otherwise.\n+ * @example\n+ * ```ts\n+ * const isValid = validateValue(DefaultKeyChainValueSchema, 'myValue');\n+ * console.log(isValid); // Outputs: true\n+ * ```\n+ * @remarks\n+ * This function uses the Zod library to validate the value against the schema.\n+ * If the value is valid, it returns true; otherwise, it returns false.\n+ * \n+ * @see {@link DefaultKeyChainValueSchema} for the default schema.\n+ * @see {@link KeyChainKeySchema} for the key schema.\n+ * @see {@link z.ZodType} for more details on the underlying implementation.\n+ * @see {@link validateKey} for more details on the key validation.\n+ */\n+export function validateValue(schma:z.ZodType<any> = DefaultKeyChainValueSchema, value: string): boolean {\n+  const result = schma.safeParse(value);\n+  if (!result.success) {\n+    console.error('Invalid value:', result.error);\n+    return false;\n+  }\n+  return true;\n+}\n\\ No newline at end of file\n"
                },
                {
                    "date": 1760755684175,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -83,66 +83,5 @@\n     return false;\n   }\n   return true;\n }\n-/**\n- * \n- */\n-import z from \"zod\";\n-import { DefaultKeyChainValueSchema, KeyChainKeySchema } from \"../types/types.schema\";\n \n-/**\n- * Validates a key using a Zod schema.\n- * \n- * @param key The key to validate.\n- * @returns {boolean} True if the key is valid, false otherwise.\n- * @example\n- * ```ts\n- * const isValid = validateKey('myKey');\n- * console.log(isValid); // Outputs: true\n- * ```\n- * @remarks\n- * This function uses the Zod library to validate the key against the schema.\n- * If the key is valid, it returns true; otherwise, it returns false.\n- * \n- * @see {@link DefaultKeyChainValueSchema} for the default schema.\n- * @see {@link KeyChainKeySchema} for the key schema.\n- * @see {@link z.ZodType} for more details on the underlying implementation.\n- * @see {@link validateValue} for more details on the value validation.\n- */\n-export function validateKey(key: string): boolean {\n-  const result = KeyChainKeySchema.safeParse(key);\n-  if (!result.success) {\n-    console.error('Invalid key:', result.error);\n-    return false;\n-  }\n-  return true;\n-}\n-\n-/**\n- * Validates a value using a Zod schema.\n- * \n- * @param schma The Zod schema to validate the value against.\n- * @param value The value to validate.\n- * @returns {boolean} True if the value is valid, false otherwise.\n- * @example\n- * ```ts\n- * const isValid = validateValue(DefaultKeyChainValueSchema, 'myValue');\n- * console.log(isValid); // Outputs: true\n- * ```\n- * @remarks\n- * This function uses the Zod library to validate the value against the schema.\n- * If the value is valid, it returns true; otherwise, it returns false.\n- * \n- * @see {@link DefaultKeyChainValueSchema} for the default schema.\n- * @see {@link KeyChainKeySchema} for the key schema.\n- * @see {@link z.ZodType} for more details on the underlying implementation.\n- * @see {@link validateKey} for more details on the key validation.\n- */\n-export function validateValue(schma:z.ZodType<any> = DefaultKeyChainValueSchema, value: string): boolean {\n-  const result = schma.safeParse(value);\n-  if (!result.success) {\n-    console.error('Invalid value:', result.error);\n-    return false;\n-  }\n-  return true;\n-}\n\\ No newline at end of file\n"
                },
                {
                    "date": 1760755694160,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -84,4 +84,5 @@\n   }\n   return true;\n }\n \n+export \n\\ No newline at end of file\n"
                },
                {
                    "date": 1760755699547,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -84,5 +84,5 @@\n   }\n   return true;\n }\n \n-export \n\\ No newline at end of file\n+export function \n\\ No newline at end of file\n"
                },
                {
                    "date": 1760755704884,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -84,5 +84,5 @@\n   }\n   return true;\n }\n \n-export function \n\\ No newline at end of file\n+export function validate\n\\ No newline at end of file\n"
                },
                {
                    "date": 1760755711587,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -84,5 +84,5 @@\n   }\n   return true;\n }\n \n-export function validate\n\\ No newline at end of file\n+export function validatePackageName\n\\ No newline at end of file\n"
                },
                {
                    "date": 1760755716625,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -84,5 +84,5 @@\n   }\n   return true;\n }\n \n-export function validatePackageName\n\\ No newline at end of file\n+export function validatePackageName()\n\\ No newline at end of file\n"
                },
                {
                    "date": 1760755724343,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -25,9 +25,9 @@\n  * @see {@link validateValue} for more details on the value validation.\n  */\n \n import z from \"zod\";\n-import { DefaultKeyChainValueSchema, KeyChainKeySchema } from \"../types/types.schema\";\n+import { DefaultKeyChainValueSchema, KeyChainKeySchema, PackageNameSchema } from \"../types/types.schema\";\n \n /**\n  * Validates a key using a Zod schema.\n  * \n@@ -84,5 +84,12 @@\n   }\n   return true;\n }\n \n-export function validatePackageName()\n\\ No newline at end of file\n+export function validatePackageName(packageName: string): boolean {\n+  const result = PackageNameSchema.safeParse(packageName);\n+  if (!result.success) {\n+    console.error('Invalid package name:', result.error);\n+    return false;\n+  }\n+  return true;\n+}\n\\ No newline at end of file\n"
                },
                {
                    "date": 1760755729373,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -84,8 +84,26 @@\n   }\n   return true;\n }\n \n+/**\n+ * Validates a package name using a Zod schema.\n+ * \n+ * @param packageName The package name to validate.\n+ * @returns {boolean} True if the package name is valid, false otherwise.\n+ * @example\n+ * ```ts\n+ * const isValid = validatePackageName('my-package-name');\n+ * console.log(isValid); // Outputs: true\n+ * ```\n+ * @remarks\n+ * This function uses the Zod library to validate the package name against the schema.\n+ * If the package name is valid, it returns true; otherwise, it returns false.\n+ * \n+ * @see {@link PackageNameSchema} for the package name schema.\n+ * @see {@link z.ZodType} for more details on the underlying implementation.\n+ * @see {@link validateKey} for more details on the key validation.\n+ */\n export function validatePackageName(packageName: string): boolean {\n   const result = PackageNameSchema.safeParse(packageName);\n   if (!result.success) {\n     console.error('Invalid package name:', result.error);\n"
                }
            ],
            "date": 1760754817347,
            "name": "Commit-0",
            "content": "export "
        }
    ]
}