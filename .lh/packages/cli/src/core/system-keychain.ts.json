{
    "sourceFile": "packages/cli/src/core/system-keychain.ts",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 63,
            "patches": [
                {
                    "date": 1760754653491,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1760755635159,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -126,9 +126,11 @@\n    * @see {@link get} to retrieve values from the keychain.\n    * @see {@link list} to list all keys in the keychain (not supported).\n    * @see {@link delete} to remove values from the keychain.\n    */\n-  constructor(private readonly packageName: string) {}\n+  constructor(private readonly packageName: string) {\n+    \n+  }\n \n   /**\n    * Gets a value from the keychain.\n    * @returns {Promise<string | null>} A promise that resolves to the value associated with the key, or null if not found.\n"
                },
                {
                    "date": 1760755646291,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -126,10 +126,10 @@\n    * @see {@link get} to retrieve values from the keychain.\n    * @see {@link list} to list all keys in the keychain (not supported).\n    * @see {@link delete} to remove values from the keychain.\n    */\n-  constructor(private readonly packageName: string) {\n-    \n+  constructor(packageName: string) {\n+    this.packageName = packageName;\n   }\n \n   /**\n    * Gets a value from the keychain.\n"
                },
                {
                    "date": 1760755656386,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -108,8 +108,9 @@\n  *\n  * @author amannirala13\n  */\n export class SystemKeychain implements IKeychainProvider {\n+  private packageName: string;\n   /**\n    * Creates an instance of SystemKeychain.\n    * @param packageName - The package name used as the service identifier in the keychain.\n    *\n"
                },
                {
                    "date": 1760755664891,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -108,9 +108,9 @@\n  *\n  * @author amannirala13\n  */\n export class SystemKeychain implements IKeychainProvider {\n-  private packageName: string;\n+  private packageName: T;\n   /**\n    * Creates an instance of SystemKeychain.\n    * @param packageName - The package name used as the service identifier in the keychain.\n    *\n"
                },
                {
                    "date": 1760755670082,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -27,8 +27,9 @@\n  */\n \n import { Entry } from '@napi-rs/keyring';\n import * as console from 'node:console';\n+import { TPackageName } from '../types';\n \n /**\n  * IKeychainProvider defines the interface for a keychain provider.\n  * It includes methods for getting, listing, setting, deleting, and clearing keychain entries.\n@@ -108,9 +109,9 @@\n  *\n  * @author amannirala13\n  */\n export class SystemKeychain implements IKeychainProvider {\n-  private packageName: T;\n+  private readonly packageName: TPackageName;\n   /**\n    * Creates an instance of SystemKeychain.\n    * @param packageName - The package name used as the service identifier in the keychain.\n    *\n"
                },
                {
                    "date": 1760755675253,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -129,9 +129,9 @@\n    * @see {@link list} to list all keys in the keychain (not supported).\n    * @see {@link delete} to remove values from the keychain.\n    */\n   constructor(packageName: string) {\n-    this.packageName = packageName;\n+    \n   }\n \n   /**\n    * Gets a value from the keychain.\n"
                },
                {
                    "date": 1760755737609,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -129,8 +129,9 @@\n    * @see {@link list} to list all keys in the keychain (not supported).\n    * @see {@link delete} to remove values from the keychain.\n    */\n   constructor(packageName: string) {\n+    validatePackageName(packageName);\n     \n   }\n \n   /**\n"
                },
                {
                    "date": 1760755745135,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -129,10 +129,10 @@\n    * @see {@link list} to list all keys in the keychain (not supported).\n    * @see {@link delete} to remove values from the keychain.\n    */\n   constructor(packageName: string) {\n-    validatePackageName(packageName);\n     \n+    \n   }\n \n   /**\n    * Gets a value from the keychain.\n"
                },
                {
                    "date": 1760755751167,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -129,10 +129,10 @@\n    * @see {@link list} to list all keys in the keychain (not supported).\n    * @see {@link delete} to remove values from the keychain.\n    */\n   constructor(packageName: string) {\n+    if \n     \n-    \n   }\n \n   /**\n    * Gets a value from the keychain.\n"
                },
                {
                    "date": 1760755756490,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -129,9 +129,9 @@\n    * @see {@link list} to list all keys in the keychain (not supported).\n    * @see {@link delete} to remove values from the keychain.\n    */\n   constructor(packageName: string) {\n-    if \n+    if (val)\n     \n   }\n \n   /**\n"
                },
                {
                    "date": 1760755762107,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -28,8 +28,9 @@\n \n import { Entry } from '@napi-rs/keyring';\n import * as console from 'node:console';\n import { TPackageName } from '../types';\n+import { validatePackageName } from './keychain.validator';\n \n /**\n  * IKeychainProvider defines the interface for a keychain provider.\n  * It includes methods for getting, listing, setting, deleting, and clearing keychain entries.\n@@ -129,10 +130,12 @@\n    * @see {@link list} to list all keys in the keychain (not supported).\n    * @see {@link delete} to remove values from the keychain.\n    */\n   constructor(packageName: string) {\n-    if (val)\n-    \n+    if (!validatePackageName(packageName)) {\n+      throw new Error('Invalid package name');\n+    }\n+    this.packageName = packageName;\n   }\n \n   /**\n    * Gets a value from the keychain.\n"
                },
                {
                    "date": 1760755767856,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -130,8 +130,9 @@\n    * @see {@link list} to list all keys in the keychain (not supported).\n    * @see {@link delete} to remove values from the keychain.\n    */\n   constructor(packageName: string) {\n+    // validate package name\n     if (!validatePackageName(packageName)) {\n       throw new Error('Invalid package name');\n     }\n     this.packageName = packageName;\n"
                },
                {
                    "date": 1760755780549,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -132,8 +132,9 @@\n    */\n   constructor(packageName: string) {\n     // validate package name\n     if (!validatePackageName(packageName)) {\n+      // throw error if package name is invalid\n       throw new Error('Invalid package name');\n     }\n     this.packageName = packageName;\n   }\n"
                },
                {
                    "date": 1760755789585,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -132,11 +132,12 @@\n    */\n   constructor(packageName: string) {\n     // validate package name\n     if (!validatePackageName(packageName)) {\n-      // throw error if package name is invalid\n+      // throw error if package name is invalid and \n       throw new Error('Invalid package name');\n     }\n+    // set package name\n     this.packageName = packageName;\n   }\n \n   /**\n"
                },
                {
                    "date": 1760755798242,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -132,9 +132,9 @@\n    */\n   constructor(packageName: string) {\n     // validate package name\n     if (!validatePackageName(packageName)) {\n-      // throw error if package name is invalid and \n+      // throw error if package name is invalid and delete the \n       throw new Error('Invalid package name');\n     }\n     // set package name\n     this.packageName = packageName;\n"
                },
                {
                    "date": 1760755804827,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -132,10 +132,11 @@\n    */\n   constructor(packageName: string) {\n     // validate package name\n     if (!validatePackageName(packageName)) {\n-      // throw error if package name is invalid and delete the \n+      // throw error if package name is invalid and delete the object\n       throw new Error('Invalid package name');\n+      return;\n     }\n     // set package name\n     this.packageName = packageName;\n   }\n"
                },
                {
                    "date": 1760755810199,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -134,9 +134,8 @@\n     // validate package name\n     if (!validatePackageName(packageName)) {\n       // throw error if package name is invalid and delete the object\n       throw new Error('Invalid package name');\n-      return;\n     }\n     // set package name\n     this.packageName = packageName;\n   }\n"
                },
                {
                    "date": 1760755817244,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -132,9 +132,9 @@\n    */\n   constructor(packageName: string) {\n     // validate package name\n     if (!validatePackageName(packageName)) {\n-      // throw error if package name is invalid and delete the object\n+      // throw error if package name is invalid and block \n       throw new Error('Invalid package name');\n     }\n     // set package name\n     this.packageName = packageName;\n"
                },
                {
                    "date": 1760755822752,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -132,9 +132,9 @@\n    */\n   constructor(packageName: string) {\n     // validate package name\n     if (!validatePackageName(packageName)) {\n-      // throw error if package name is invalid and block \n+      // throw error if package name is invalid and block the constructor\n       throw new Error('Invalid package name');\n     }\n     // set package name\n     this.packageName = packageName;\n"
                },
                {
                    "date": 1760755829783,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -133,8 +133,10 @@\n   constructor(packageName: string) {\n     // validate package name\n     if (!validatePackageName(packageName)) {\n       // throw error if package name is invalid and block the constructor\n+      console.error('Invalid package name:', packageName);\n+      \n       throw new Error('Invalid package name');\n     }\n     // set package name\n     this.packageName = packageName;\n"
                },
                {
                    "date": 1760755841054,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -132,11 +132,10 @@\n    */\n   constructor(packageName: string) {\n     // validate package name\n     if (!validatePackageName(packageName)) {\n-      // throw error if package name is invalid and block the constructor\n+      // throw error if package name is invalid\n       console.error('Invalid package name:', packageName);\n-      \n       throw new Error('Invalid package name');\n     }\n     // set package name\n     this.packageName = packageName;\n"
                },
                {
                    "date": 1760755859643,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -163,8 +163,9 @@\n    * @see {@link clear} to clear all entries in the keychain (not supported).\n    */\n   async get(key: string): Promise<string | null> {\n     try {\n+      \n       const entity = new Entry(this.packageName, key);\n       return entity.getPassword();\n     } catch (error) {\n       // swallow errors and return null\n"
                },
                {
                    "date": 1760755867201,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -163,10 +163,11 @@\n    * @see {@link clear} to clear all entries in the keychain (not supported).\n    */\n   async get(key: string): Promise<string | null> {\n     try {\n-      \n+      // create keychain entry\n       const entity = new Entry(this.packageName, key);\n+      // get password\n       return entity.getPassword();\n     } catch (error) {\n       // swallow errors and return null\n       console.error('Failed to get keychain entry:', error);\n"
                },
                {
                    "date": 1760755874386,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -163,14 +163,13 @@\n    * @see {@link clear} to clear all entries in the keychain (not supported).\n    */\n   async get(key: string): Promise<string | null> {\n     try {\n-      // create keychain entry\n+      // create keychain entry  \n       const entity = new Entry(this.packageName, key);\n       // get password\n       return entity.getPassword();\n     } catch (error) {\n-      // swallow errors and return null\n       console.error('Failed to get keychain entry:', error);\n       throw new Error('Failed to get keychain entry', { cause: error });\n     } finally {\n       // noop\n"
                },
                {
                    "date": 1760755879608,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -161,9 +161,9 @@\n    * @see {@link delete} to remove values from the keychain.\n    * @see {@link list} to list all keys in the keychain (not supported).\n    * @see {@link clear} to clear all entries in the keychain (not supported).\n    */\n-  async get(key: string): Promise<string | null> {\n+  async get(key: string): Promise<string> {\n     try {\n       // create keychain entry  \n       const entity = new Entry(this.packageName, key);\n       // get password\n"
                },
                {
                    "date": 1760755887342,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -161,9 +161,10 @@\n    * @see {@link delete} to remove values from the keychain.\n    * @see {@link list} to list all keys in the keychain (not supported).\n    * @see {@link clear} to clear all entries in the keychain (not supported).\n    */\n-  async get(key: string): Promise<string> {\n+  async get(key: string): Promise<string | null> {\n+    \n     try {\n       // create keychain entry  \n       const entity = new Entry(this.packageName, key);\n       // get password\n"
                },
                {
                    "date": 1760755893409,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -162,9 +162,14 @@\n    * @see {@link list} to list all keys in the keychain (not supported).\n    * @see {@link clear} to clear all entries in the keychain (not supported).\n    */\n   async get(key: string): Promise<string | null> {\n-    \n+    // validate key\n+    if (!validateKey(key)) {\n+      // throw error if key is invalid\n+      console.error('Invalid key:', key);\n+      throw new Error('Invalid key');\n+    }\n     try {\n       // create keychain entry  \n       const entity = new Entry(this.packageName, key);\n       // get password\n"
                },
                {
                    "date": 1760755907805,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -28,9 +28,9 @@\n \n import { Entry } from '@napi-rs/keyring';\n import * as console from 'node:console';\n import { TPackageName } from '../types';\n-import { validatePackageName } from './keychain.validator';\n+import { validateKey, validatePackageName } from './keychain.validator';\n \n /**\n  * IKeychainProvider defines the interface for a keychain provider.\n  * It includes methods for getting, listing, setting, deleting, and clearing keychain entries.\n@@ -174,8 +174,9 @@\n       const entity = new Entry(this.packageName, key);\n       // get password\n       return entity.getPassword();\n     } catch (error) {\n+      \n       console.error('Failed to get keychain entry:', error);\n       throw new Error('Failed to get keychain entry', { cause: error });\n     } finally {\n       // noop\n"
                },
                {
                    "date": 1760755914003,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -174,9 +174,9 @@\n       const entity = new Entry(this.packageName, key);\n       // get password\n       return entity.getPassword();\n     } catch (error) {\n-      \n+      // see \n       console.error('Failed to get keychain entry:', error);\n       throw new Error('Failed to get keychain entry', { cause: error });\n     } finally {\n       // noop\n"
                },
                {
                    "date": 1760755920208,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -174,9 +174,9 @@\n       const entity = new Entry(this.packageName, key);\n       // get password\n       return entity.getPassword();\n     } catch (error) {\n-      // see \n+      // see if the key is \n       console.error('Failed to get keychain entry:', error);\n       throw new Error('Failed to get keychain entry', { cause: error });\n     } finally {\n       // noop\n"
                },
                {
                    "date": 1760755929302,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -174,9 +174,10 @@\n       const entity = new Entry(this.packageName, key);\n       // get password\n       return entity.getPassword();\n     } catch (error) {\n-      // see if the key is \n+      // see if the key is missing, if then return null\n+      \n       console.error('Failed to get keychain entry:', error);\n       throw new Error('Failed to get keychain entry', { cause: error });\n     } finally {\n       // noop\n"
                },
                {
                    "date": 1760755965544,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -25,9 +25,9 @@\n  * @see {@link SystemKeychain} for the concrete implementation.\n  * @see {@link Entry} from NAPI-RS Keyring for more details on the underlying implementation.\n  */\n \n-import { Entry } from '@napi-rs/keyring';\n+import { Entry,  } from '@napi-rs/keyring';\n import * as console from 'node:console';\n import { TPackageName } from '../types';\n import { validateKey, validatePackageName } from './keychain.validator';\n \n@@ -175,9 +175,11 @@\n       // get password\n       return entity.getPassword();\n     } catch (error) {\n       // see if the key is missing, if then return null\n-      \n+      if (error instanceof EntryNotFoundError) {\n+        return null;\n+      }\n       console.error('Failed to get keychain entry:', error);\n       throw new Error('Failed to get keychain entry', { cause: error });\n     } finally {\n       // noop\n"
                },
                {
                    "date": 1760755982396,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -25,9 +25,9 @@\n  * @see {@link SystemKeychain} for the concrete implementation.\n  * @see {@link Entry} from NAPI-RS Keyring for more details on the underlying implementation.\n  */\n \n-import { Entry,  } from '@napi-rs/keyring';\n+import { Entry, Entr } from '@napi-rs/keyring';\n import * as console from 'node:console';\n import { TPackageName } from '../types';\n import { validateKey, validatePackageName } from './keychain.validator';\n \n"
                },
                {
                    "date": 1760755993502,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -25,9 +25,9 @@\n  * @see {@link SystemKeychain} for the concrete implementation.\n  * @see {@link Entry} from NAPI-RS Keyring for more details on the underlying implementation.\n  */\n \n-import { Entry, Entr } from '@napi-rs/keyring';\n+import { Entry, EntryNotFoundError } from '@napi-rs/keyring';\n import * as console from 'node:console';\n import { TPackageName } from '../types';\n import { validateKey, validatePackageName } from './keychain.validator';\n \n"
                },
                {
                    "date": 1760755999644,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -25,9 +25,10 @@\n  * @see {@link SystemKeychain} for the concrete implementation.\n  * @see {@link Entry} from NAPI-RS Keyring for more details on the underlying implementation.\n  */\n \n-import { Entry, EntryNotFoundError } from '@napi-rs/keyring';\n+import { Entry } from '@napi-rs/keyring';\n+import { EntryNotFoundError } from '@napi-rs/keyring/errors';\n import * as console from 'node:console';\n import { TPackageName } from '../types';\n import { validateKey, validatePackageName } from './keychain.validator';\n \n"
                },
                {
                    "date": 1760756011841,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -26,9 +26,9 @@\n  * @see {@link Entry} from NAPI-RS Keyring for more details on the underlying implementation.\n  */\n \n import { Entry } from '@napi-rs/keyring';\n-import { EntryNotFoundError } from '@napi-rs/keyring/errors';\n+import { EntryNotFoundError } from '@napi-rs/keyring';\n import * as console from 'node:console';\n import { TPackageName } from '../types';\n import { validateKey, validatePackageName } from './keychain.validator';\n \n"
                },
                {
                    "date": 1760756019949,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -26,9 +26,9 @@\n  * @see {@link Entry} from NAPI-RS Keyring for more details on the underlying implementation.\n  */\n \n import { Entry } from '@napi-rs/keyring';\n-import { EntryNotFoundError } from '@napi-rs/keyring';\n+import { EntryNotFoundError } from '@napi-rs/';\n import * as console from 'node:console';\n import { TPackageName } from '../types';\n import { validateKey, validatePackageName } from './keychain.validator';\n \n"
                },
                {
                    "date": 1760756026961,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -26,9 +26,9 @@\n  * @see {@link Entry} from NAPI-RS Keyring for more details on the underlying implementation.\n  */\n \n import { Entry } from '@napi-rs/keyring';\n-import { EntryNotFoundError } from '@napi-rs/';\n+import { EntryNotFoundError } from '@napi-rs';\n import * as console from 'node:console';\n import { TPackageName } from '../types';\n import { validateKey, validatePackageName } from './keychain.validator';\n \n"
                },
                {
                    "date": 1760756131011,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -26,9 +26,8 @@\n  * @see {@link Entry} from NAPI-RS Keyring for more details on the underlying implementation.\n  */\n \n import { Entry } from '@napi-rs/keyring';\n-import { EntryNotFoundError } from '@napi-rs';\n import * as console from 'node:console';\n import { TPackageName } from '../types';\n import { validateKey, validatePackageName } from './keychain.validator';\n \n@@ -144,9 +143,9 @@\n \n   /**\n    * Gets a value from the keychain.\n    * @returns {Promise<string | null>} A promise that resolves to the value associated with the key, or null if not found.\n-   * @throws Rethrows any error encountered while accessing the underlying keychain entry.\n+   * @throws \n    * @param key - The key to retrieve.\n    * @example\n    * ```ts\n    * const value = await keychain.get('myKey');\n@@ -170,15 +169,15 @@\n       console.error('Invalid key:', key);\n       throw new Error('Invalid key');\n     }\n     try {\n-      // create keychain entry  \n+      // create keychain entry\n       const entity = new Entry(this.packageName, key);\n       // get password\n       return entity.getPassword();\n     } catch (error) {\n       // see if the key is missing, if then return null\n-      if (error instanceof EntryNotFoundError) {\n+      if (error instanceof Error && error.message.includes('No entry found')) {\n         return null;\n       }\n       console.error('Failed to get keychain entry:', error);\n       throw new Error('Failed to get keychain entry', { cause: error });\n"
                },
                {
                    "date": 1760756136510,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -143,9 +143,9 @@\n \n   /**\n    * Gets a value from the keychain.\n    * @returns {Promise<string | null>} A promise that resolves to the value associated with the key, or null if not found.\n-   * @throws \n+   * @throws Will not \n    * @param key - The key to retrieve.\n    * @example\n    * ```ts\n    * const value = await keychain.get('myKey');\n"
                },
                {
                    "date": 1760756142087,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -143,9 +143,9 @@\n \n   /**\n    * Gets a value from the keychain.\n    * @returns {Promise<string | null>} A promise that resolves to the value associated with the key, or null if not found.\n-   * @throws Will not \n+   * @throws Will not throw an error if the key is not found. Instead, it will return null.\n    * @param key - The key to retrieve.\n    * @example\n    * ```ts\n    * const value = await keychain.get('myKey');\n"
                },
                {
                    "date": 1760756154388,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -174,12 +174,9 @@\n       const entity = new Entry(this.packageName, key);\n       // get password\n       return entity.getPassword();\n     } catch (error) {\n-      // see if the key is missing, if then return null\n-      if (error instanceof Error && error.message.includes('No entry found')) {\n-        return null;\n-      }\n+     \n       console.error('Failed to get keychain entry:', error);\n       throw new Error('Failed to get keychain entry', { cause: error });\n     } finally {\n       // noop\n"
                },
                {
                    "date": 1760756161074,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -174,11 +174,10 @@\n       const entity = new Entry(this.packageName, key);\n       // get password\n       return entity.getPassword();\n     } catch (error) {\n-     \n       console.error('Failed to get keychain entry:', error);\n-      throw new Error('Failed to get keychain entry', { cause: error });\n+      \n     } finally {\n       // noop\n     }\n   }\n"
                },
                {
                    "date": 1760756176197,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -143,9 +143,10 @@\n \n   /**\n    * Gets a value from the keychain.\n    * @returns {Promise<string | null>} A promise that resolves to the value associated with the key, or null if not found.\n-   * @throws Will not throw an error if the key is not found. Instead, it will return null.\n+   * @throws \n+   * Will not throw an error if the key is not found. Instead, it will return null.\n    * @param key - The key to retrieve.\n    * @example\n    * ```ts\n    * const value = await keychain.get('myKey');\n@@ -175,9 +176,10 @@\n       // get password\n       return entity.getPassword();\n     } catch (error) {\n       console.error('Failed to get keychain entry:', error);\n-      \n+      // swallow errors\n+      return null;\n     } finally {\n       // noop\n     }\n   }\n"
                },
                {
                    "date": 1760756183469,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -144,9 +144,10 @@\n   /**\n    * Gets a value from the keychain.\n    * @returns {Promise<string | null>} A promise that resolves to the value associated with the key, or null if not found.\n    * @throws \n-   * Will not throw an error if the key is not found. Instead, it will return null.\n+   * - Will throw an error if the key is not valid.\n+   * - Will not throw an error if the key is not found. Instead, it will return null.\n    * @param key - The key to retrieve.\n    * @example\n    * ```ts\n    * const value = await keychain.get('myKey');\n"
                },
                {
                    "date": 1760756200045,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -144,9 +144,9 @@\n   /**\n    * Gets a value from the keychain.\n    * @returns {Promise<string | null>} A promise that resolves to the value associated with the key, or null if not found.\n    * @throws \n-   * - Will throw an error if the key is not valid.\n+   * - {}Will throw an error if the key is not valid.\n    * - Will not throw an error if the key is not found. Instead, it will return null.\n    * @param key - The key to retrieve.\n    * @example\n    * ```ts\n"
                },
                {
                    "date": 1760756209233,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -144,9 +144,9 @@\n   /**\n    * Gets a value from the keychain.\n    * @returns {Promise<string | null>} A promise that resolves to the value associated with the key, or null if not found.\n    * @throws \n-   * - {}Will throw an error if the key is not valid.\n+   * - {@Error} Will throw an error if the key is not valid.\n    * - Will not throw an error if the key is not found. Instead, it will return null.\n    * @param key - The key to retrieve.\n    * @example\n    * ```ts\n"
                },
                {
                    "date": 1760756218418,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -144,10 +144,10 @@\n   /**\n    * Gets a value from the keychain.\n    * @returns {Promise<string | null>} A promise that resolves to the value associated with the key, or null if not found.\n    * @throws \n-   * - {@Error} Will throw an error if the key is not valid.\n-   * - Will not throw an error if the key is not found. Instead, it will return null.\n+   * - {@link Error} Will throw an error if the key is not valid.\n+   * - Will **not throw an error if the key is not found. Instead, it will return null.\n    * @param key - The key to retrieve.\n    * @example\n    * ```ts\n    * const value = await keychain.get('myKey');\n"
                },
                {
                    "date": 1760756236174,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -145,9 +145,9 @@\n    * Gets a value from the keychain.\n    * @returns {Promise<string | null>} A promise that resolves to the value associated with the key, or null if not found.\n    * @throws \n    * - {@link Error} Will throw an error if the key is not valid.\n-   * - Will **not throw an error if the key is not found. Instead, it will return null.\n+   * - Will **not** throw an error if the key is not found. Instead, it will return {null}.\n    * @param key - The key to retrieve.\n    * @example\n    * ```ts\n    * const value = await keychain.get('myKey');\n"
                },
                {
                    "date": 1760756288103,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -145,9 +145,9 @@\n    * Gets a value from the keychain.\n    * @returns {Promise<string | null>} A promise that resolves to the value associated with the key, or null if not found.\n    * @throws \n    * - {@link Error} Will throw an error if the key is not valid.\n-   * - Will **not** throw an error if the key is not found. Instead, it will return {null}.\n+   * - Will **not** throw an error if the key is not found. Instead, it will return {@link null}.\n    * @param key - The key to retrieve.\n    * @example\n    * ```ts\n    * const value = await keychain.get('myKey');\n@@ -230,8 +230,9 @@\n    * @see {@link list} to list all keys in the keychain (not supported).\n    * @see {@link clear} to clear all entries in the keychain (not supported).\n    */\n   async delete(key: string): Promise<void> {\n+    \n     try {\n       const entity = new Entry(this.packageName, key);\n       entity.deletePassword();\n     } catch (error) {\n"
                },
                {
                    "date": 1760756306910,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -213,9 +213,10 @@\n   /**\n    * Deletes a value from the keychain.\n    *\n    * @returns {Promise<void>} A promise that resolves when the value is deleted.\n-   * @throws Rethrows any error encountered while deleting the underlying keychain entry.\n+   * @throws \n+   *Rethrows any error encountered while deleting the underlying keychain entry.\n    * @param key - The key to delete.\n    * @example\n    * ```ts\n    * await keychain.delete('myKey');\n@@ -230,9 +231,14 @@\n    * @see {@link list} to list all keys in the keychain (not supported).\n    * @see {@link clear} to clear all entries in the keychain (not supported).\n    */\n   async delete(key: string): Promise<void> {\n-    \n+    // validate key\n+    if (!validateKey(key)) {\n+      // throw error if key is invalid\n+      console.error('Invalid key:', key);\n+      throw new Error('Invalid key');\n+    }\n     try {\n       const entity = new Entry(this.packageName, key);\n       entity.deletePassword();\n     } catch (error) {\n"
                },
                {
                    "date": 1760756319249,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -214,9 +214,12 @@\n    * Deletes a value from the keychain.\n    *\n    * @returns {Promise<void>} A promise that resolves when the value is deleted.\n    * @throws \n-   *Rethrows any error encountered while deleting the underlying keychain entry.\n+   * - {@link Error} Will throw an error if the key is not valid.\n+   * - {@link Error} Will throw an error if the key is not found.\n+   * \n+   * - {@link Error} Rethrows any error encountered while deleting the underlying keychain entry.\n    * @param key - The key to delete.\n    * @example\n    * ```ts\n    * await keychain.delete('myKey');\n"
                },
                {
                    "date": 1760756331494,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -215,10 +215,8 @@\n    *\n    * @returns {Promise<void>} A promise that resolves when the value is deleted.\n    * @throws \n    * - {@link Error} Will throw an error if the key is not valid.\n-   * - {@link Error} Will throw an error if the key is not found.\n-   * \n    * - {@link Error} Rethrows any error encountered while deleting the underlying keychain entry.\n    * @param key - The key to delete.\n    * @example\n    * ```ts\n"
                },
                {
                    "date": 1760756352073,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -273,8 +273,9 @@\n    * @see {@link list} to list all keys in the keychain (not supported).\n    * @see {@link clear} to clear all entries in the keychain (not supported).\n    */\n   async set(key: string, value: string): Promise<void> {\n+    \n     try {\n       const entity = new Entry(this.packageName, key);\n       entity.setPassword(value);\n     } catch (error) {\n"
                },
                {
                    "date": 1760756365434,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -28,9 +28,9 @@\n \n import { Entry } from '@napi-rs/keyring';\n import * as console from 'node:console';\n import { TPackageName } from '../types';\n-import { validateKey, validatePackageName } from './keychain.validator';\n+import { validateKey, validatePackageName, validateValue } from './keychain.validator';\n \n /**\n  * IKeychainProvider defines the interface for a keychain provider.\n  * It includes methods for getting, listing, setting, deleting, and clearing keychain entries.\n@@ -273,9 +273,20 @@\n    * @see {@link list} to list all keys in the keychain (not supported).\n    * @see {@link clear} to clear all entries in the keychain (not supported).\n    */\n   async set(key: string, value: string): Promise<void> {\n-    \n+    // validate key\n+    if (!validateKey(key)) {\n+      // throw error if key is invalid\n+      console.error('Invalid key:', key);\n+      throw new Error('Invalid key');\n+    }\n+    // validate value\n+    if (!validateValue(DefaultKeyChainValueSchema, value)) {\n+      // throw error if value is invalid\n+      console.error('Invalid value:', value);\n+      throw new Error('Invalid value');\n+    }\n     try {\n       const entity = new Entry(this.packageName, key);\n       entity.setPassword(value);\n     } catch (error) {\n"
                },
                {
                    "date": 1760756377899,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -272,9 +272,9 @@\n    * @see {@link delete} to remove values from the keychain.\n    * @see {@link list} to list all keys in the keychain (not supported).\n    * @see {@link clear} to clear all entries in the keychain (not supported).\n    */\n-  async set(key: string, value: string): Promise<void> {\n+  async set(key: T, value: string): Promise<void> {\n     // validate key\n     if (!validateKey(key)) {\n       // throw error if key is invalid\n       console.error('Invalid key:', key);\n"
                },
                {
                    "date": 1760756383679,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -272,9 +272,9 @@\n    * @see {@link delete} to remove values from the keychain.\n    * @see {@link list} to list all keys in the keychain (not supported).\n    * @see {@link clear} to clear all entries in the keychain (not supported).\n    */\n-  async set(key: T, value: string): Promise<void> {\n+  async set(key: TKeyChainKey, value: TKeyChainValue): Promise<void> {\n     // validate key\n     if (!validateKey(key)) {\n       // throw error if key is invalid\n       console.error('Invalid key:', key);\n"
                },
                {
                    "date": 1760756392130,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -27,9 +27,9 @@\n  */\n \n import { Entry } from '@napi-rs/keyring';\n import * as console from 'node:console';\n-import { TPackageName } from '../types';\n+import { TKeyChainKey, TPackageName } from '../types';\n import { validateKey, validatePackageName, validateValue } from './keychain.validator';\n \n /**\n  * IKeychainProvider defines the interface for a keychain provider.\n"
                },
                {
                    "date": 1760756417980,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -27,10 +27,11 @@\n  */\n \n import { Entry } from '@napi-rs/keyring';\n import * as console from 'node:console';\n-import { TKeyChainKey, TPackageName } from '../types';\n+import { TKeyChainKey, TKeyChainValue, TPackageName } from '../types';\n import { validateKey, validatePackageName, validateValue } from './keychain.validator';\n+import { DefaultKeyChainValueSchema } from '../types/types.schema';\n \n /**\n  * IKeychainProvider defines the interface for a keychain provider.\n  * It includes methods for getting, listing, setting, deleting, and clearing keychain entries.\n"
                },
                {
                    "date": 1760756432051,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -232,9 +232,9 @@\n    * @see {@link get} to retrieve values from the keychain.\n    * @see {@link list} to list all keys in the keychain (not supported).\n    * @see {@link clear} to clear all entries in the keychain (not supported).\n    */\n-  async delete(key: string): Promise<void> {\n+  async delete(key: TKeyChainKey): Promise<void> {\n     // validate key\n     if (!validateKey(key)) {\n       // throw error if key is invalid\n       console.error('Invalid key:', key);\n"
                },
                {
                    "date": 1760756439347,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -164,9 +164,9 @@\n    * @see {@link delete} to remove values from the keychain.\n    * @see {@link list} to list all keys in the keychain (not supported).\n    * @see {@link clear} to clear all entries in the keychain (not supported).\n    */\n-  async get(key: string): Promise<string | null> {\n+  async get(key: TKeyChainKey): Promise<string | null> {\n     // validate key\n     if (!validateKey(key)) {\n       // throw error if key is invalid\n       console.error('Invalid key:', key);\n"
                },
                {
                    "date": 1760756451358,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -257,9 +257,11 @@\n    *\n    * @param key - The key to set.\n    * @param value - The value to set.\n    * @returns {Promise<void>} A promise that resolves when the value is set.\n-   * @throws Rethrows any error encountered while storing the value in the underlying keychain entry.\n+   * @throws \n+   * - {@link Error} Will throw an error if the key is not valid.\n+   * - {@link Error} Rethrows any error encountered while storing the value in the underlying keychain entry.\n    * @example\n    * ```ts\n    * await keychain.set('myKey', 'myValue');\n    * ```\n"
                },
                {
                    "date": 1760756466767,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -259,8 +259,9 @@\n    * @param value - The value to set.\n    * @returns {Promise<void>} A promise that resolves when the value is set.\n    * @throws \n    * - {@link Error} Will throw an error if the key is not valid.\n+   * - {@link Error} Will throw an error if the value is not valid.\n    * - {@link Error} Rethrows any error encountered while storing the value in the underlying keychain entry.\n    * @example\n    * ```ts\n    * await keychain.set('myKey', 'myValue');\n"
                }
            ],
            "date": 1760754653491,
            "name": "Commit-0",
            "content": "/**\n * @module @envguard/cli/core/keychain\n *\n * @file keychain.ts\n * @fileOverview This file defines the IKeychainProvider interface and the SystemKeychain class\n * for secure storage and retrieval of sensitive information using the system's native keychain services.\n * @public\n *\n * @summary\n * This module provides an interface and implementation for interacting with the system keychain.\n *\n * @description This file defines the IKeychainProvider interface and the SystemKeychain class,\n * which provides a secure way to store and retrieve sensitive information such as tokens and passwords\n * using the system's native keychain services via the NAPI-RS Keyring library.\n *\n * @license MIT\n * @author [amannirala13](http://www.github.com/amannirala13)\n *\n * @remarks\n * The IKeychainProvider interface defines the contract for keychain operations,\n * while the SystemKeychain class implements this interface using the NAPI-RS Keyring library.\n * This allows for secure storage and retrieval of sensitive information in a platform-agnostic manner.\n *\n * @see {@link IKeychainProvider} for the interface definition.\n * @see {@link SystemKeychain} for the concrete implementation.\n * @see {@link Entry} from NAPI-RS Keyring for more details on the underlying implementation.\n */\n\nimport { Entry } from '@napi-rs/keyring';\nimport * as console from 'node:console';\n\n/**\n * IKeychainProvider defines the interface for a keychain provider.\n * It includes methods for getting, listing, setting, deleting, and clearing keychain entries.\n *\n * @interface IKeychainProvider\n * @example\n * ```ts\n * const keychain: IKeychainProvider = new SystemKeychain('my-package-name');\n * await keychain.set('myKey', 'myValue');\n * const value = await keychain.get('myKey');\n * console.log(value); // Outputs: 'myValue'\n * await keychain.delete('myKey');\n * ```\n * @remarks\n * This interface provides a contract for keychain operations, allowing different implementations\n * to be used interchangeably. It is particularly useful for abstracting away platform-specific\n * keychain details and providing a consistent API for secure storage of sensitive information.\n *\n * @see {@link SystemKeychain} for a concrete implementation of this interface.\n * @see {@link Entry} from NAPI-RS Keyring for more details on the underlying implementation.\n * @see {@link set} to store values in the keychain.\n * @see {@link get} to retrieve values from the keychain.\n * @see {@link list} to list all keys in the keychain.\n * @see {@link delete} to remove values from the keychain.\n * @see {@link clear} to clear all entries in the keychain.\n *\n * @author amannirala13\n */\nexport interface IKeychainProvider {\n  get(key: string): Promise<string | null>;\n  list(): Promise<string[]>;\n  set(key: string, value: string): Promise<void>;\n  delete(key: string): Promise<void>;\n  clear(): Promise<void>;\n}\n\n/**\n * SystemKeychain provides a secure way to store and retrieve sensitive information\n * such as tokens and passwords using the system's native keychain services.\n * It leverages the NAPI-RS Keyring library to interact with the underlying keychain.\n *\n * @implements {IKeychainProvider}\n * @class SystemKeychain\n * @classDesc\n * SystemKeychain provides methods to set, get, delete, list, and clear keychain entries.\n * It uses the package name as the service identifier to namespace the entries.\n * This ensures that entries from different applications do not conflict with each other.\n *\n * @param packageName - The package name used as the service identifier in the keychain.\n *\n * @throws Propagates errors from the underlying keychain operations so callers can handle failures.\n *\n * @example\n * ```ts\n * const keychain = new SystemKeychain('my-package-name');\n * await keychain.set('myKey', 'myValue');\n * const value = await keychain.get('myKey');\n * console.log(value); // Outputs: 'myValue'\n * await keychain.delete('myKey');\n * ```\n *\n * @remarks\n * The SystemKeychain class is designed to provide a simple and consistent interface for keychain operations\n * across different platforms. It abstracts away the complexities of dealing with platform-specific\n * keychain APIs, allowing developers to focus on their application logic.\n *\n * Note that some operations, such as listing all keys or clearing the keychain, are not supported\n * by the underlying NAPI-RS Keyring library and are implemented as no-ops or return empty results.\n *\n * @see {@link IKeychainProvider} for the interface definition.\n * @see {@link Entry} from NAPI-RS Keyring for more details on the underlying implementation.\n * @see {@link set} to store values in the keychain.\n * @see {@link get} to retrieve values from the keychain.\n * @see {@link list} to list all keys in the keychain (not supported).\n * @see {@link delete} to remove values from the keychain.\n * @see {@link clear} to clear all entries in the keychain (not supported).\n *\n * @author amannirala13\n */\nexport class SystemKeychain implements IKeychainProvider {\n  /**\n   * Creates an instance of SystemKeychain.\n   * @param packageName - The package name used as the service identifier in the keychain.\n   *\n   * @example\n   * ```ts\n   * const keychain = new SystemKeychain('my-package-name');\n   * ```\n   * @remarks\n   * The package name is used to namespace the keychain entries, ensuring that they do not conflict\n   * with entries from other applications. This is particularly important when multiple applications\n   * may be using the same keychain on the system.\n   *\n   * @see {@link set} to store values in the keychain.\n   * @see {@link get} to retrieve values from the keychain.\n   * @see {@link list} to list all keys in the keychain (not supported).\n   * @see {@link delete} to remove values from the keychain.\n   */\n  constructor(private readonly packageName: string) {}\n\n  /**\n   * Gets a value from the keychain.\n   * @returns {Promise<string | null>} A promise that resolves to the value associated with the key, or null if not found.\n   * @throws Rethrows any error encountered while accessing the underlying keychain entry.\n   * @param key - The key to retrieve.\n   * @example\n   * ```ts\n   * const value = await keychain.get('myKey');\n   * console.log(value);\n   * ```\n   *\n   * @remarks\n   * This method uses the NAPI-RS Keyring library to retrieve the value securely from the system keychain.\n   * If an error occurs during the operation, it is logged and the error is rethrown so callers can decide how to handle it.\n   * Use this method to retrieve sensitive information such as tokens or passwords.\n   *\n   * @see {@link set} to store values in the keychain.\n   * @see {@link delete} to remove values from the keychain.\n   * @see {@link list} to list all keys in the keychain (not supported).\n   * @see {@link clear} to clear all entries in the keychain (not supported).\n   */\n  async get(key: string): Promise<string | null> {\n    try {\n      const entity = new Entry(this.packageName, key);\n      return entity.getPassword();\n    } catch (error) {\n      // swallow errors and return null\n      console.error('Failed to get keychain entry:', error);\n      throw new Error('Failed to get keychain entry', { cause: error });\n    } finally {\n      // noop\n    }\n  }\n\n  /**\n   * Clears all entries from the keychain.\n   *\n   * @warning NAPI-RS Keyring does not support clearing all entries. This method is a noop.\n   * @returns {Promise<void>} A promise that resolves when the operation is complete.\n   * @throws Will not throw; this is a noop.\n   * @example\n   * ```ts\n   * await keychain.clear();\n   * ```\n   * @remarks\n   * This method is included to fulfill the IKeychainProvider interface but does not provide actual\n   * functionality due to limitations in the underlying library.\n   *\n   * @see {@link set} to store values in the keychain.\n   * @see {@link get} to retrieve values from the keychain.\n   * @see {@link list} to list all keys in the keychain (not supported).\n   * @see {@link delete} to remove values from the keychain.\n   */\n  async clear(): Promise<void> {\n    // NAPI-RS Keyring does not support clearing all entries, so this is a noop.\n    console.warn('SystemKeychain.clear() is not supported and is a noop.');\n    return;\n  }\n\n  /**\n   * Deletes a value from the keychain.\n   *\n   * @returns {Promise<void>} A promise that resolves when the value is deleted.\n   * @throws Rethrows any error encountered while deleting the underlying keychain entry.\n   * @param key - The key to delete.\n   * @example\n   * ```ts\n   * await keychain.delete('myKey');\n   * ```\n   * @remarks\n   * This method uses the NAPI-RS Keyring library to delete the value securely from the system keychain.\n   * If an error occurs during the operation, it is logged and the error is rethrown so callers can decide how to handle it.\n   * Use this method to remove sensitive information such as tokens or passwords.\n   *\n   * @see {@link set} to store values in the keychain.\n   * @see {@link get} to retrieve values from the keychain.\n   * @see {@link list} to list all keys in the keychain (not supported).\n   * @see {@link clear} to clear all entries in the keychain (not supported).\n   */\n  async delete(key: string): Promise<void> {\n    try {\n      const entity = new Entry(this.packageName, key);\n      entity.deletePassword();\n    } catch (error) {\n      // swallow errors\n      console.error('Failed to delete keychain entry:', error);\n      throw new Error('Failed to delete keychain entry', { cause: error });\n    } finally {\n      // noop\n    }\n  }\n\n  /**\n   * Sets a value in the keychain.\n   *\n   * @param key - The key to set.\n   * @param value - The value to set.\n   * @returns {Promise<void>} A promise that resolves when the value is set.\n   * @throws Rethrows any error encountered while storing the value in the underlying keychain entry.\n   * @example\n   * ```ts\n   * await keychain.set('myKey', 'myValue');\n   * ```\n   *\n   * @remarks\n   * This method uses the NAPI-RS Keyring library to store the value securely in the system keychain.\n   * If an error occurs during the operation, it is logged and the error is rethrown so callers can decide how to handle it.\n   * Use this method to store sensitive information such as tokens or passwords.\n   *\n   * @see {@link get} to retrieve values from the keychain.\n   * @see {@link delete} to remove values from the keychain.\n   * @see {@link list} to list all keys in the keychain (not supported).\n   * @see {@link clear} to clear all entries in the keychain (not supported).\n   */\n  async set(key: string, value: string): Promise<void> {\n    try {\n      const entity = new Entry(this.packageName, key);\n      entity.setPassword(value);\n    } catch (error) {\n      // swallow errors\n      console.error('Failed to set keychain entry:', error);\n      throw new Error('Failed to set keychain entry', { cause: error });\n    } finally {\n      // noop\n    }\n  }\n\n  /**\n   * Lists all keys stored in the keychain.\n   *\n   * @warning NAPI-RS Keyring does not support listing entries. This method returns an empty array.\n   * @returns {Promise<string[]>} An empty array.\n   * @throws  Will not throw; this is a noop.\n   * @example\n   * ```ts\n   * const keys = await keychain.list();\n   * console.log(keys);\n   * ```\n   * @remarks\n   * This method is included to fulfill the IKeychainProvider interface but does not provide actual\n   * functionality due to limitations in the underlying library.\n   *\n   * @see {@link get} to retrieve values from the keychain.\n   * @see {@link set} to store values in the keychain.\n   * @see {@link delete} to remove values from the keychain.\n   * @see {@link clear} to clear all entries in the keychain (not supported).\n   */\n  async list(): Promise<string[]> {\n    // NAPI-RS Keyring does not support listing entries, so return an empty array.\n    console.warn(`SystemKeychain list() is not supported and is a noop.`);\n    return Promise.resolve([]);\n  }\n}\n"
        }
    ]
}