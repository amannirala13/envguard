{
    "sourceFile": "packages/cli/src/types/types.schema.ts",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 13,
            "patches": [
                {
                    "date": 1760755517648,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1760755525656,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -71,5 +71,5 @@\n     message: 'Value contains invalid control characters',\n   })\n   .describe('System keychain stored value');\n \n-  \n\\ No newline at end of file\n+export \n\\ No newline at end of file\n"
                },
                {
                    "date": 1760755531257,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -71,5 +71,5 @@\n     message: 'Value contains invalid control characters',\n   })\n   .describe('System keychain stored value');\n \n-export \n\\ No newline at end of file\n+export const \n\\ No newline at end of file\n"
                },
                {
                    "date": 1760755547378,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -71,5 +71,5 @@\n     message: 'Value contains invalid control characters',\n   })\n   .describe('System keychain stored value');\n \n-export const \n\\ No newline at end of file\n+export const PackageNameSchema = z.string().min(1).max(255).regex(/^[a-zA-Z0-9-_]+$/);\n\\ No newline at end of file\n"
                },
                {
                    "date": 1760755553043,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -71,5 +71,6 @@\n     message: 'Value contains invalid control characters',\n   })\n   .describe('System keychain stored value');\n \n-export const PackageNameSchema = z.string().min(1).max(255).regex(/^[a-zA-Z0-9-_]+$/);\n\\ No newline at end of file\n+export const PackageNameSchema = z.string\n+().min(1).max(255).regex(/^[a-zA-Z0-9-_]+$/);\n\\ No newline at end of file\n"
                },
                {
                    "date": 1760755558876,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -71,6 +71,8 @@\n     message: 'Value contains invalid control characters',\n   })\n   .describe('System keychain stored value');\n \n-export const PackageNameSchema = z.string\n-().min(1).max(255).regex(/^[a-zA-Z0-9-_]+$/);\n\\ No newline at end of file\n+export const PackageNameSchema = z.string()\n+.min(1)\n+.max(255)\n+.regex(/^[a-zA-Z0-9-_]+$/);\n\\ No newline at end of file\n"
                },
                {
                    "date": 1760755564282,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -72,7 +72,8 @@\n   })\n   .describe('System keychain stored value');\n \n export const PackageNameSchema = z.string()\n-.min(1)\n+.min(1, )\n .max(255)\n\\ No newline at end of file\n-.regex(/^[a-zA-Z0-9-_]+$/);\n+.regex(/^[a-zA-Z0-9-_]+$/)\n+.describe('System keychain package name');\n\\ No newline at end of file\n"
                },
                {
                    "date": 1760755569916,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -72,8 +72,8 @@\n   })\n   .describe('System keychain stored value');\n \n export const PackageNameSchema = z.string()\n-.min(1, )\n-.max(255)\n-.regex(/^[a-zA-Z0-9-_]+$/)\n+.min(1, { message: 'Package name cannot be empty' })\n+.max(255, { message: 'Package name is too long' })\n+.regex(/^[a-zA-Z0-9-_]+$/, { message: 'Package name contains invalid characters' })\n .describe('System keychain package name');\n\\ No newline at end of file\n"
                },
                {
                    "date": 1760755575220,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -71,8 +71,9 @@\n     message: 'Value contains invalid control characters',\n   })\n   .describe('System keychain stored value');\n \n+\n export const PackageNameSchema = z.string()\n .min(1, { message: 'Package name cannot be empty' })\n .max(255, { message: 'Package name is too long' })\n .regex(/^[a-zA-Z0-9-_]+$/, { message: 'Package name contains invalid characters' })\n"
                },
                {
                    "date": 1760755582627,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -71,9 +71,25 @@\n     message: 'Value contains invalid control characters',\n   })\n   .describe('System keychain stored value');\n \n-\n+/**\n+ * Schema for validating system keychain package names.\n+ * Ensures the package name is a non-empty string with allowed characters and length limits.\n+ * - Allowed characters: alphanumeric, hyphens, underscores\n+ * - Minimum length: 1 character\n+ * - Maximum length: 255 characters\n+ * @remarks\n+ * This schema is used to validate package names used in the system keychain to ensure they conform to expected formats.\n+ * @example\n+ * ```ts\n+ * import { PackageNameSchema } from './types.schema';\n+ *\n+ * const validPackageName = \"my_package_name\";\n+ * const parsedPackageName = PackageNameSchema.parse(validPackageName); // succeeds\n+ * ```\n+ * @public\n+ */\n export const PackageNameSchema = z.string()\n .min(1, { message: 'Package name cannot be empty' })\n .max(255, { message: 'Package name is too long' })\n .regex(/^[a-zA-Z0-9-_]+$/, { message: 'Package name contains invalid characters' })\n"
                },
                {
                    "date": 1760756655629,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -88,9 +88,11 @@\n  * const parsedPackageName = PackageNameSchema.parse(validPackageName); // succeeds\n  * ```\n  * @public\n  */\n-export const PackageNameSchema = z.string()\n-.min(1, { message: 'Package name cannot be empty' })\n-.max(255, { message: 'Package name is too long' })\n-.regex(/^[a-zA-Z0-9-_]+$/, { message: 'Package name contains invalid characters' })\n-.describe('System keychain package name');\n\\ No newline at end of file\n+export const PackageNameSchema = z\n+  .string()\n+  .min(1, { message: 'Package name cannot be empty' })\n+  .max(255, { message: 'Package name is too long' })\n+  .regex(/^[a-zA-Z0-9-_.@/]+$/, {\n+    message: 'Package name contains invalid characters',\n+  });\n\\ No newline at end of file\n"
                },
                {
                    "date": 1760756666218,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -71,28 +71,13 @@\n     message: 'Value contains invalid control characters',\n   })\n   .describe('System keychain stored value');\n \n-/**\n- * Schema for validating system keychain package names.\n- * Ensures the package name is a non-empty string with allowed characters and length limits.\n- * - Allowed characters: alphanumeric, hyphens, underscores\n- * - Minimum length: 1 character\n- * - Maximum length: 255 characters\n- * @remarks\n- * This schema is used to validate package names used in the system keychain to ensure they conform to expected formats.\n- * @example\n- * ```ts\n- * import { PackageNameSchema } from './types.schema';\n- *\n- * const validPackageName = \"my_package_name\";\n- * const parsedPackageName = PackageNameSchema.parse(validPackageName); // succeeds\n- * ```\n- * @public\n- */\n+\n export const PackageNameSchema = z\n   .string()\n   .min(1, { message: 'Package name cannot be empty' })\n   .max(255, { message: 'Package name is too long' })\n   .regex(/^[a-zA-Z0-9-_.@/]+$/, {\n     message: 'Package name contains invalid characters',\n\\ No newline at end of file\n-  });\n+  })\n+  .describe('System keychain package name');\n\\ No newline at end of file\n"
                },
                {
                    "date": 1760756673688,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -71,9 +71,25 @@\n     message: 'Value contains invalid control characters',\n   })\n   .describe('System keychain stored value');\n \n-\n+/**\n+ * Schema for validating system keychain package names.\n+ * Ensures the package name is a non-empty string with allowed characters and length limits.\n+ * - Allowed characters: alphanumeric, hyphens, underscores, periods, at symbols, and forward slashes\n+ * - Minimum length: 1 character\n+ * - Maximum length: 255 characters\n+ * @remarks\n+ * This schema is used to validate package names used in the system keychain to ensure they conform to expected formats.\n+ * @example\n+ * ```ts\n+ * import { PackageNameSchema } from './types.schema';\n+ *\n+ * const validPackageName = \"my_package_name\";\n+ * const parsedPackageName = PackageNameSchema.parse(validPackageName); // succeeds\n+ * ```\n+ * @public\n+ */\n export const PackageNameSchema = z\n   .string()\n   .min(1, { message: 'Package name cannot be empty' })\n   .max(255, { message: 'Package name is too long' })\n"
                },
                {
                    "date": 1760757539996,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -69,8 +69,11 @@\n   .min(0)\n   .regex(/^[^\\x00-\\x1F]*$/, {\n     message: 'Value contains invalid control characters',\n   })\n+  .refine((value) => value === '' || value.trim().length > 0, {\n+    message: 'Value cannot be whitespace only',\n+  })\n   .describe('System keychain stored value');\n \n /**\n  * Schema for validating system keychain package names.\n"
                }
            ],
            "date": 1760755517648,
            "name": "Commit-0",
            "content": "/**\n * Zod schemas for validating system keychain keys and values.\n *\n * @module @envguard/cli/types/schema\n *\n * @file types/schema.ts\n * @fileOverview Zod schemas for validating system keychain keys and values.\n * @module KeychainSchemas\n * @public\n *\n * @summary\n * This module contains Zod schemas for validating keys and values used in the system keychain.\n * It ensures that keys and values conform to specified formats and constraints.\n *\n * @author [amannirala13](http://www.github.com/amannirala13)\n * @license MIT\n *\n * @remarks\n * This module provides Zod schemas for validating keys and values in the system keychain.\n * It includes constraints on allowed characters, lengths, and formats to ensure data integrity.\n */\n\nimport { z } from 'zod';\n\n/**\n * Schema for validating system keychain keys.\n * Ensures the key is a non-empty string with allowed characters and length limits.\n * - Allowed characters: alphanumeric, hyphens, underscores\n * - Minimum length: 1 character\n * - Maximum length: 255 characters\n * @remarks\n * This schema is used to validate keys used in the system keychain to ensure they conform to expected formats.\n * @example\n * ```ts\n * import { KeyChainKeySchema } from './types.schema';\n *\n * const validKey = \"my_key-123\";\n * const parsedKey = KeyChainKeySchema.parse(validKey); // succeeds\n * ```\n * @public\n */\nexport const KeyChainKeySchema = z\n  .string()\n  .min(1, { message: 'Key cannot be empty' })\n  .max(255, { message: 'Key is too long' })\n  .regex(/^[a-zA-Z0-9-_]+$/, { message: 'Key contains invalid characters' })\n  .describe('System keychain value identifier');\n\n/**\n * Schema for validating system keychain values.\n * Ensures the value does not contain control characters and is within length limits.\n * - Must not contain control characters (ASCII 0-31)\n * - Minimum length: 0 characters\n * - No maximum length enforced here, but practical limits may apply based on the keychain implementation.\n * @remarks\n * This schema is used to validate values stored in the system keychain to ensure they are safe and conform to expected formats.\n * @example\n * ```ts\n * import { DefaultKeyChainValueSchema } from './types.schema';\n *\n * const validValue = \"my_secure_value\";\n * const parsedValue = DefaultKeyChainValueSchema.parse(validValue); // succeeds\n * ```\n * @see {@link KeyChainKeySchema} for the corresponding key schema.\n * @public\n */\nexport const DefaultKeyChainValueSchema = z\n  .string()\n  .min(0)\n  .regex(/^[^\\x00-\\x1F]*$/, {\n    message: 'Value contains invalid control characters',\n  })\n  .describe('System keychain stored value');\n\n  "
        }
    ]
}