{
    "sourceFile": "packages/cli/src/cli.ts",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 5,
            "patches": [
                {
                    "date": 1760728724185,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1760728766511,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -14,9 +14,9 @@\n   .option('-v, --verbose', 'Enable verbose logging')\n   .hook('preAction', (thisCommand) => {\n     const options = thisCommand.opts();\n     if (options.verbose) {\n-      console.log(\n+      console.info(\n         chalk.dim(\n           `[EnvGuard v${version}] Running command: ${thisCommand.name()}`\n         )\n       );\n@@ -27,22 +27,22 @@\n program\n   .command('init')\n   .description('Initialize EnvGuard in the current directory')\n   .action(() => {\n-    console.log(chalk.blue('🔒 Initializing EnvGuard...'));\n-    console.log(chalk.yellow('⚠️  This command is not yet implemented'));\n-    console.log(\n+    console.info(chalk.blue('🔒 Initializing EnvGuard...'));\n+    console.warn(chalk.yellow('⚠️  This command is not yet implemented'));\n+    console.info(\n       chalk.dim('See the implementation guide for development progress')\n     );\n   });\n \n program\n   .command('set <key> <value>')\n   .description('Store a secret in the OS keychain')\n   .action((key: string, _value: string) => {\n-    console.log(chalk.blue(`🔐 Setting secret: ${key}`));\n-    console.log(chalk.yellow('⚠️  This command is not yet implemented'));\n-    console.log(\n+    console.info(chalk.blue(`🔐 Setting secret: ${key}`));\n+    console.warn(chalk.yellow('⚠️  This command is not yet implemented'));\n+    console.info(\n       chalk.dim('Secret storage will use OS keychain when implemented')\n     );\n   });\n \n@@ -50,41 +50,41 @@\n   .command('get <key>')\n   .description('Retrieve a secret from the OS keychain')\n   .option('-j, --json', 'Output as JSON')\n   .action((key: string, options: { json?: boolean }) => {\n-    console.log(chalk.blue(`🔍 Getting secret: ${key}`));\n+    console.info(chalk.blue(`🔍 Getting secret: ${key}`));\n     if (options.json) {\n-      console.log(chalk.dim('Will output as JSON when implemented'));\n+      console.info(chalk.dim('Will output as JSON when implemented'));\n     }\n-    console.log(chalk.yellow('⚠️  This command is not yet implemented'));\n+    console.warn(chalk.yellow('⚠️  This command is not yet implemented'));\n   });\n \n program\n   .command('list')\n   .description('List all stored secrets (keys only)')\n   .action(() => {\n-    console.log(chalk.blue('📋 Listing stored secrets...'));\n-    console.log(chalk.yellow('⚠️  This command is not yet implemented'));\n+    console.info(chalk.blue('📋 Listing stored secrets...'));\n+    console.warn(chalk.yellow('⚠️  This command is not yet implemented'));\n   });\n \n program\n   .command('status')\n   .description('Show current EnvGuard status and configuration')\n   .action(() => {\n-    console.log(chalk.blue('📊 EnvGuard Status'));\n-    console.log(chalk.green(`✅ Version: ${version}`));\n-    console.log(chalk.green(`✅ Node.js: ${process.version}`));\n-    console.log(\n+    console.info(chalk.blue('📊 EnvGuard Status'));\n+    console.info(chalk.green(`✅ Version: ${version}`));\n+    console.info(chalk.green(`✅ Node.js: ${process.version}`));\n+    console.info(\n       chalk.green(`✅ Platform: ${process.platform} ${process.arch}`)\n     );\n-    console.log(chalk.yellow('⚠️  Full functionality coming soon'));\n+    console.warn(chalk.yellow('⚠️  Full functionality coming soon'));\n \n     // Show development status\n-    console.log(chalk.dim('\\n📋 Implementation Progress:'));\n-    console.log(chalk.dim('  🚧 Keychain integration (in progress)'));\n-    console.log(chalk.dim('  ⏳ CLI commands'));\n-    console.log(chalk.dim('  ⏳ Config validation'));\n-    console.log(chalk.dim('  ⏳ Runtime runners'));\n+    console.info(chalk.dim('\\n📋 Implementation Progress:'));\n+    console.info(chalk.dim('  🚧 Keychain integration (in progress)'));\n+    console.info(chalk.dim('  ⏳ CLI commands'));\n+    console.info(chalk.dim('  ⏳ Config validation'));\n+    console.info(chalk.dim('  ⏳ Runtime runners'));\n   });\n \n // Add help examples\n program.addHelpText(\n"
                },
                {
                    "date": 1760728776949,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,6 +1,5 @@\n #!/usr/bin/env node\n-/* eslint-disable no-console */\n \n import chalk from 'chalk';\n import { program } from 'commander';\n \n@@ -14,9 +13,9 @@\n   .option('-v, --verbose', 'Enable verbose logging')\n   .hook('preAction', (thisCommand) => {\n     const options = thisCommand.opts();\n     if (options.verbose) {\n-      console.info(\n+      console.log(\n         chalk.dim(\n           `[EnvGuard v${version}] Running command: ${thisCommand.name()}`\n         )\n       );\n@@ -27,22 +26,22 @@\n program\n   .command('init')\n   .description('Initialize EnvGuard in the current directory')\n   .action(() => {\n-    console.info(chalk.blue('🔒 Initializing EnvGuard...'));\n-    console.warn(chalk.yellow('⚠️  This command is not yet implemented'));\n-    console.info(\n+    console.log(chalk.blue('🔒 Initializing EnvGuard...'));\n+    console.log(chalk.yellow('⚠️  This command is not yet implemented'));\n+    console.log(\n       chalk.dim('See the implementation guide for development progress')\n     );\n   });\n \n program\n   .command('set <key> <value>')\n   .description('Store a secret in the OS keychain')\n   .action((key: string, _value: string) => {\n-    console.info(chalk.blue(`🔐 Setting secret: ${key}`));\n-    console.warn(chalk.yellow('⚠️  This command is not yet implemented'));\n-    console.info(\n+    console.log(chalk.blue(`🔐 Setting secret: ${key}`));\n+    console.log(chalk.yellow('⚠️  This command is not yet implemented'));\n+    console.log(\n       chalk.dim('Secret storage will use OS keychain when implemented')\n     );\n   });\n \n@@ -50,41 +49,41 @@\n   .command('get <key>')\n   .description('Retrieve a secret from the OS keychain')\n   .option('-j, --json', 'Output as JSON')\n   .action((key: string, options: { json?: boolean }) => {\n-    console.info(chalk.blue(`🔍 Getting secret: ${key}`));\n+    console.log(chalk.blue(`🔍 Getting secret: ${key}`));\n     if (options.json) {\n-      console.info(chalk.dim('Will output as JSON when implemented'));\n+      console.log(chalk.dim('Will output as JSON when implemented'));\n     }\n-    console.warn(chalk.yellow('⚠️  This command is not yet implemented'));\n+    console.log(chalk.yellow('⚠️  This command is not yet implemented'));\n   });\n \n program\n   .command('list')\n   .description('List all stored secrets (keys only)')\n   .action(() => {\n-    console.info(chalk.blue('📋 Listing stored secrets...'));\n-    console.warn(chalk.yellow('⚠️  This command is not yet implemented'));\n+    console.log(chalk.blue('📋 Listing stored secrets...'));\n+    console.log(chalk.yellow('⚠️  This command is not yet implemented'));\n   });\n \n program\n   .command('status')\n   .description('Show current EnvGuard status and configuration')\n   .action(() => {\n-    console.info(chalk.blue('📊 EnvGuard Status'));\n-    console.info(chalk.green(`✅ Version: ${version}`));\n-    console.info(chalk.green(`✅ Node.js: ${process.version}`));\n-    console.info(\n+    console.log(chalk.blue('📊 EnvGuard Status'));\n+    console.log(chalk.green(`✅ Version: ${version}`));\n+    console.log(chalk.green(`✅ Node.js: ${process.version}`));\n+    console.log(\n       chalk.green(`✅ Platform: ${process.platform} ${process.arch}`)\n     );\n-    console.warn(chalk.yellow('⚠️  Full functionality coming soon'));\n+    console.log(chalk.yellow('⚠️  Full functionality coming soon'));\n \n     // Show development status\n-    console.info(chalk.dim('\\n📋 Implementation Progress:'));\n-    console.info(chalk.dim('  🚧 Keychain integration (in progress)'));\n-    console.info(chalk.dim('  ⏳ CLI commands'));\n-    console.info(chalk.dim('  ⏳ Config validation'));\n-    console.info(chalk.dim('  ⏳ Runtime runners'));\n+    console.log(chalk.dim('\\n📋 Implementation Progress:'));\n+    console.log(chalk.dim('  🚧 Keychain integration (in progress)'));\n+    console.log(chalk.dim('  ⏳ CLI commands'));\n+    console.log(chalk.dim('  ⏳ Config validation'));\n+    console.log(chalk.dim('  ⏳ Runtime runners'));\n   });\n \n // Add help examples\n program.addHelpText(\n"
                },
                {
                    "date": 1760728872750,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -13,9 +13,9 @@\n   .option('-v, --verbose', 'Enable verbose logging')\n   .hook('preAction', (thisCommand) => {\n     const options = thisCommand.opts();\n     if (options.verbose) {\n-      console.log(\n+      console.info(\n         chalk.dim(\n           `[EnvGuard v${version}] Running command: ${thisCommand.name()}`\n         )\n       );\n@@ -26,22 +26,22 @@\n program\n   .command('init')\n   .description('Initialize EnvGuard in the current directory')\n   .action(() => {\n-    console.log(chalk.blue('🔒 Initializing EnvGuard...'));\n-    console.log(chalk.yellow('⚠️  This command is not yet implemented'));\n-    console.log(\n+    console.info(chalk.blue('🔒 Initializing EnvGuard...'));\n+    console.warn(chalk.yellow('⚠️  This command is not yet implemented'));\n+    console.info(\n       chalk.dim('See the implementation guide for development progress')\n     );\n   });\n \n program\n   .command('set <key> <value>')\n   .description('Store a secret in the OS keychain')\n   .action((key: string, _value: string) => {\n-    console.log(chalk.blue(`🔐 Setting secret: ${key}`));\n-    console.log(chalk.yellow('⚠️  This command is not yet implemented'));\n-    console.log(\n+    console.info(chalk.blue(`🔐 Setting secret: ${key}`));\n+    console.warn(chalk.yellow('⚠️  This command is not yet implemented'));\n+    console.info(\n       chalk.dim('Secret storage will use OS keychain when implemented')\n     );\n   });\n \n@@ -49,41 +49,41 @@\n   .command('get <key>')\n   .description('Retrieve a secret from the OS keychain')\n   .option('-j, --json', 'Output as JSON')\n   .action((key: string, options: { json?: boolean }) => {\n-    console.log(chalk.blue(`🔍 Getting secret: ${key}`));\n+    console.info(chalk.blue(`🔍 Getting secret: ${key}`));\n     if (options.json) {\n-      console.log(chalk.dim('Will output as JSON when implemented'));\n+      console.info(chalk.dim('Will output as JSON when implemented'));\n     }\n-    console.log(chalk.yellow('⚠️  This command is not yet implemented'));\n+    console.warn(chalk.yellow('⚠️  This command is not yet implemented'));\n   });\n \n program\n   .command('list')\n   .description('List all stored secrets (keys only)')\n   .action(() => {\n-    console.log(chalk.blue('📋 Listing stored secrets...'));\n-    console.log(chalk.yellow('⚠️  This command is not yet implemented'));\n+    console.info(chalk.blue('📋 Listing stored secrets...'));\n+    console.warn(chalk.yellow('⚠️  This command is not yet implemented'));\n   });\n \n program\n   .command('status')\n   .description('Show current EnvGuard status and configuration')\n   .action(() => {\n-    console.log(chalk.blue('📊 EnvGuard Status'));\n-    console.log(chalk.green(`✅ Version: ${version}`));\n-    console.log(chalk.green(`✅ Node.js: ${process.version}`));\n-    console.log(\n+    console.info(chalk.blue('📊 EnvGuard Status'));\n+    console.info(chalk.green(`✅ Version: ${version}`));\n+    console.info(chalk.green(`✅ Node.js: ${process.version}`));\n+    console.info(\n       chalk.green(`✅ Platform: ${process.platform} ${process.arch}`)\n     );\n-    console.log(chalk.yellow('⚠️  Full functionality coming soon'));\n+    console.warn(chalk.yellow('⚠️  Full functionality coming soon'));\n \n     // Show development status\n-    console.log(chalk.dim('\\n📋 Implementation Progress:'));\n-    console.log(chalk.dim('  🚧 Keychain integration (in progress)'));\n-    console.log(chalk.dim('  ⏳ CLI commands'));\n-    console.log(chalk.dim('  ⏳ Config validation'));\n-    console.log(chalk.dim('  ⏳ Runtime runners'));\n+    console.info(chalk.dim('\\n📋 Implementation Progress:'));\n+    console.info(chalk.dim('  🚧 Keychain integration (in progress)'));\n+    console.info(chalk.dim('  ⏳ CLI commands'));\n+    console.info(chalk.dim('  ⏳ Config validation'));\n+    console.info(chalk.dim('  ⏳ Runtime runners'));\n   });\n \n // Add help examples\n program.addHelpText(\n"
                },
                {
                    "date": 1760729028919,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -11,9 +11,9 @@\n   .description('Local-first secret management for developers')\n   .version(version)\n   .option('-v, --verbose', 'Enable verbose logging')\n   .hook('preAction', (thisCommand) => {\n-    const options = thisCommand.opts();\n+    const options:   = thisCommand.opts();\n     if (options.verbose) {\n       console.info(\n         chalk.dim(\n           `[EnvGuard v${version}] Running command: ${thisCommand.name()}`\n"
                },
                {
                    "date": 1760729035002,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -11,9 +11,9 @@\n   .description('Local-first secret management for developers')\n   .version(version)\n   .option('-v, --verbose', 'Enable verbose logging')\n   .hook('preAction', (thisCommand) => {\n-    const options:  = thisCommand.opts();\n+    const options: Op = thisCommand.opts();\n     if (options.verbose) {\n       console.info(\n         chalk.dim(\n           `[EnvGuard v${version}] Running command: ${thisCommand.name()}`\n"
                }
            ],
            "date": 1760728724185,
            "name": "Commit-0",
            "content": "#!/usr/bin/env node\n/* eslint-disable no-console */\n\nimport chalk from 'chalk';\nimport { program } from 'commander';\n\nimport { version } from './index.js';\n\n// Set up the main program\nprogram\n  .name('envguard')\n  .description('Local-first secret management for developers')\n  .version(version)\n  .option('-v, --verbose', 'Enable verbose logging')\n  .hook('preAction', (thisCommand) => {\n    const options = thisCommand.opts();\n    if (options.verbose) {\n      console.log(\n        chalk.dim(\n          `[EnvGuard v${version}] Running command: ${thisCommand.name()}`\n        )\n      );\n    }\n  });\n\n// Placeholder commands that will be implemented\nprogram\n  .command('init')\n  .description('Initialize EnvGuard in the current directory')\n  .action(() => {\n    console.log(chalk.blue('🔒 Initializing EnvGuard...'));\n    console.log(chalk.yellow('⚠️  This command is not yet implemented'));\n    console.log(\n      chalk.dim('See the implementation guide for development progress')\n    );\n  });\n\nprogram\n  .command('set <key> <value>')\n  .description('Store a secret in the OS keychain')\n  .action((key: string, _value: string) => {\n    console.log(chalk.blue(`🔐 Setting secret: ${key}`));\n    console.log(chalk.yellow('⚠️  This command is not yet implemented'));\n    console.log(\n      chalk.dim('Secret storage will use OS keychain when implemented')\n    );\n  });\n\nprogram\n  .command('get <key>')\n  .description('Retrieve a secret from the OS keychain')\n  .option('-j, --json', 'Output as JSON')\n  .action((key: string, options: { json?: boolean }) => {\n    console.log(chalk.blue(`🔍 Getting secret: ${key}`));\n    if (options.json) {\n      console.log(chalk.dim('Will output as JSON when implemented'));\n    }\n    console.log(chalk.yellow('⚠️  This command is not yet implemented'));\n  });\n\nprogram\n  .command('list')\n  .description('List all stored secrets (keys only)')\n  .action(() => {\n    console.log(chalk.blue('📋 Listing stored secrets...'));\n    console.log(chalk.yellow('⚠️  This command is not yet implemented'));\n  });\n\nprogram\n  .command('status')\n  .description('Show current EnvGuard status and configuration')\n  .action(() => {\n    console.log(chalk.blue('📊 EnvGuard Status'));\n    console.log(chalk.green(`✅ Version: ${version}`));\n    console.log(chalk.green(`✅ Node.js: ${process.version}`));\n    console.log(\n      chalk.green(`✅ Platform: ${process.platform} ${process.arch}`)\n    );\n    console.log(chalk.yellow('⚠️  Full functionality coming soon'));\n\n    // Show development status\n    console.log(chalk.dim('\\n📋 Implementation Progress:'));\n    console.log(chalk.dim('  🚧 Keychain integration (in progress)'));\n    console.log(chalk.dim('  ⏳ CLI commands'));\n    console.log(chalk.dim('  ⏳ Config validation'));\n    console.log(chalk.dim('  ⏳ Runtime runners'));\n  });\n\n// Add help examples\nprogram.addHelpText(\n  'after',\n  `\nExamples:\n  $ envguard status              Show current status\n  $ envguard init                Initialize in current directory\n  $ envguard set API_KEY abc123  Store a secret (when implemented)\n  $ envguard get API_KEY         Retrieve a secret (when implemented)\n  $ envguard list                List all secrets (when implemented)\n\nDevelopment:\n  This is a development build. See .plan/implementation-guidebook.md\n  for the full implementation roadmap and current progress.\n`\n);\n\n// Parse CLI arguments\nprogram.parse(process.argv);\n\n// Show help if no arguments provided\nif (process.argv.slice(2).length === 0) {\n  program.outputHelp();\n}\n"
        }
    ]
}