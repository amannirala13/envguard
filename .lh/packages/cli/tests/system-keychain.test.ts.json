{
    "sourceFile": "packages/cli/tests/system-keychain.test.ts",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1760745719086,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1760745719086,
            "name": "Commit-0",
            "content": "import { afterAll, beforeAll, describe, expect, it } from 'vitest';\nimport { SystemKeychain } from '../src';\n\ndescribe('SystemKeychain', () => {\n  let keychain: SystemKeychain;\n  const packageName = 'com.amannirala.test-repo';\n\n  // Define the structure for key-value pair tests\n  interface kvPairTest {\n    key: string;\n    value: string;\n    result: boolean;\n  }\n\n  // Define key-value pairs for testing\n  const kvPairs: kvPairTest[] = [\n    { key: 'username', value: 'testuser', result: true },\n    { key: 'password', value: 'testpass', result: true },\n    { key: 'token', value: 'abcd1234', result: true },\n    { key: 'invalidKey', value: '', result: false },\n    { key: '', value: 'novalue', result: false },\n  ];\n\n  // Initialize the SystemKeychain before tests\n  beforeAll(() => {\n    keychain = new SystemKeychain(packageName);\n  });\n\n  // Clean up all keys after tests\n  afterAll(async () => {\n    for (const pair of kvPairs) {\n      if (pair.result) {\n        await keychain.delete(pair.key);\n      }\n    }\n  });\n\n  describe('Initialization', () => {\n    it('should create an instance of SystemKeychain', () => {\n      expect(keychain).toBeInstanceOf(SystemKeychain);\n    });\n  });\n\n  describe('Basic Keychain CRUD operations', () => {\n    it('should set, get, and delete a key-value pair', async () => {\n      const testKey = 'testKey';\n      const testValue = 'testValue';\n\n      // Set the key-value pair\n      await keychain.set(testKey, testValue);\n\n      // Get the value for the key\n      const retrievedValue = await keychain.get(testKey);\n      expect(retrievedValue).toBe(testValue);\n\n      // Delete the key-value pair\n      await keychain.delete(testKey);\n\n      // Try to get the deleted key\n      const deletedValue = await keychain.get(testKey);\n      expect(deletedValue).toBeNull();\n    });\n  });\n\n  // Test setting and getting key-value pairs\n  describe('Check key-value pair test cases', () => {\n    for (const pair of kvPairs) {\n      it(`should ${pair.result ? 'successfully' : 'unsuccessfully'} set and get key: \"${pair.key}\"`, async () => {\n        let setError = null;\n        try {\n          await keychain.set(pair.key, pair.value);\n        } catch (error) {\n          setError = error;\n        }\n\n        if (pair.result) {\n          expect(setError).toBeNull();\n          const retrievedValue = await keychain.get(pair.key);\n          expect(retrievedValue).toBe(pair.value);\n        } else {\n          expect(setError).not.toBeNull();\n        }\n      });\n    }\n  });\n});\n"
        }
    ]
}