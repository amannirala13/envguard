{
    "sourceFile": ".eslintrc.cjs",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 38,
            "patches": [
                {
                    "date": 1760729834411,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1760729839907,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,5 +1,5 @@\n-/** @type {import('eslint').Linter.Config} */odule.exports = {\n+module.exports = {\n   root: true,\n   env: {\n     node: true,\n     es2022: true,\n"
                },
                {
                    "date": 1760729877833,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -276,5 +276,5 @@\n     'coverage',\n     '*.d.ts',\n     '*.min.js',\n   ],\n-};\n\\ No newline at end of file\n+};\n"
                },
                {
                    "date": 1760730375805,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,5 +1,5 @@\n-module.exports = {\n+expot {\n   root: true,\n   env: {\n     node: true,\n     es2022: true,\n"
                },
                {
                    "date": 1760730382772,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,5 +1,5 @@\n-expot {\n+export default {\n   root: true,\n   env: {\n     node: true,\n     es2022: true,\n"
                },
                {
                    "date": 1760730434069,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,5 +1,6 @@\n export default {\n+module.exports = {\n   root: true,\n   env: {\n     node: true,\n     es2022: true,\n"
                },
                {
                    "date": 1760730440034,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,5 +1,4 @@\n-export default {\n module.exports = {\n   root: true,\n   env: {\n     node: true,\n"
                },
                {
                    "date": 1760730491584,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -15,8 +15,9 @@\n     'airbnb-base',\n     'airbnb-typescript/base',\n     'plugin:@typescript-eslint/strict-type-checked',\n     'plugin:@typescript-eslint/stylistic-type-checked',\n+    'plugin:@stylistic/ts/recommended-extends',\n     'plugin:import/recommended',\n     'plugin:import/typescript',\n     'plugin:promise/recommended',\n     'plugin:security/recommended-legacy',\n@@ -25,8 +26,9 @@\n     'prettier',\n   ],\n   plugins: [\n     '@typescript-eslint',\n+    '@stylistic/ts',\n     'import',\n     'promise',\n     'security',\n     'sonarjs',\n@@ -210,8 +212,10 @@\n     eqeqeq: ['error', 'always'],\n     curly: ['error', 'all'],\n     'brace-style': 'off',\n     '@typescript-eslint/brace-style': ['error', '1tbs'],\n+    curly: 'off', // Disabled to allow @stylistic/ts/curly\n+    '@stylistic/ts/curly': ['error', 'all'],\n \n     // Complexity limits\n     complexity: ['error', 10],\n     'max-depth': ['error', 4],\n"
                },
                {
                    "date": 1760730504903,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -14,9 +14,8 @@\n   extends: [\n     'airbnb-base',\n     'airbnb-typescript/base',\n     'plugin:@typescript-eslint/strict-type-checked',\n-    'plugin:@typescript-eslint/stylistic-type-checked',\n     'plugin:@stylistic/ts/recommended-extends',\n     'plugin:import/recommended',\n     'plugin:import/typescript',\n     'plugin:promise/recommended',\n@@ -209,11 +208,8 @@\n         ],\n       },\n     ],\n     eqeqeq: ['error', 'always'],\n-    curly: ['error', 'all'],\n-    'brace-style': 'off',\n-    '@typescript-eslint/brace-style': ['error', '1tbs'],\n     curly: 'off', // Disabled to allow @stylistic/ts/curly\n     '@stylistic/ts/curly': ['error', 'all'],\n \n     // Complexity limits\n"
                },
                {
                    "date": 1760730628606,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -15,8 +15,9 @@\n     'airbnb-base',\n     'airbnb-typescript/base',\n     'plugin:@typescript-eslint/strict-type-checked',\n     'plugin:@stylistic/ts/recommended-extends',\n+    'plugin:@stylistic/recommended-extends',\n     'plugin:import/recommended',\n     'plugin:import/typescript',\n     'plugin:promise/recommended',\n     'plugin:security/recommended-legacy',\n@@ -26,8 +27,9 @@\n   ],\n   plugins: [\n     '@typescript-eslint',\n     '@stylistic/ts',\n+    '@stylistic',\n     'import',\n     'promise',\n     'security',\n     'sonarjs',\n@@ -210,8 +212,9 @@\n     ],\n     eqeqeq: ['error', 'always'],\n     curly: 'off', // Disabled to allow @stylistic/ts/curly\n     '@stylistic/ts/curly': ['error', 'all'],\n+    '@stylistic/curly': ['error', 'all'],\n \n     // Complexity limits\n     complexity: ['error', 10],\n     'max-depth': ['error', 4],\n"
                },
                {
                    "date": 1760730725179,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -14,9 +14,8 @@\n   extends: [\n     'airbnb-base',\n     'airbnb-typescript/base',\n     'plugin:@typescript-eslint/strict-type-checked',\n-    'plugin:@stylistic/ts/recommended-extends',\n     'plugin:@stylistic/recommended-extends',\n     'plugin:import/recommended',\n     'plugin:import/typescript',\n     'plugin:promise/recommended',\n@@ -26,9 +25,8 @@\n     'prettier',\n   ],\n   plugins: [\n     '@typescript-eslint',\n-    '@stylistic/ts',\n     '@stylistic',\n     'import',\n     'promise',\n     'security',\n@@ -211,9 +209,8 @@\n       },\n     ],\n     eqeqeq: ['error', 'always'],\n     curly: 'off', // Disabled to allow @stylistic/ts/curly\n-    '@stylistic/ts/curly': ['error', 'all'],\n     '@stylistic/curly': ['error', 'all'],\n \n     // Complexity limits\n     complexity: ['error', 10],\n"
                },
                {
                    "date": 1760730854052,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -48,8 +48,9 @@\n       },\n     ],\n     '@typescript-eslint/explicit-module-boundary-types': 'error',\n     '@typescript-eslint/no-explicit-any': 'error',\n+    '@typescript-eslint/only-throw-error': 'error',\n     '@typescript-eslint/no-unused-vars': [\n       'error',\n       {\n         argsIgnorePattern: '^_',\n@@ -73,8 +74,18 @@\n     '@typescript-eslint/no-floating-promises': 'error',\n     '@typescript-eslint/no-misused-promises': 'error',\n     '@typescript-eslint/await-thenable': 'error',\n     '@typescript-eslint/promise-function-async': 'error',\n+    'brace-style': 'off',\n+    '@stylistic/ts/brace-style': ['error', '1tbs'],\n+    'lines-between-class-members': 'off',\n+    '@stylistic/ts/lines-between-class-members': [\n+      'error',\n+      'always',\n+      {\n+        exceptAfterSingleLine: true,\n+      },\n+    ],\n     '@typescript-eslint/naming-convention': [\n       'error',\n       {\n         selector: 'default',\n"
                },
                {
                    "date": 1760730938415,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -15,8 +15,9 @@\n     'airbnb-base',\n     'airbnb-typescript/base',\n     'plugin:@typescript-eslint/strict-type-checked',\n     'plugin:@stylistic/recommended-extends',\n+    'plugin:@stylistic/all-extends',\n     'plugin:import/recommended',\n     'plugin:import/typescript',\n     'plugin:promise/recommended',\n     'plugin:security/recommended-legacy',\n"
                },
                {
                    "date": 1760730951575,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -14,9 +14,8 @@\n   extends: [\n     'airbnb-base',\n     'airbnb-typescript/base',\n     'plugin:@typescript-eslint/strict-type-checked',\n-    'plugin:@stylistic/recommended-extends',\n     'plugin:@stylistic/all-extends',\n     'plugin:import/recommended',\n     'plugin:import/typescript',\n     'plugin:promise/recommended',\n"
                },
                {
                    "date": 1760730989750,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -15,8 +15,9 @@\n     'airbnb-base',\n     'airbnb-typescript/base',\n     'plugin:@typescript-eslint/strict-type-checked',\n     'plugin:@stylistic/all-extends',\n+    'plugin:@stylistic/all-legacy',\n     'plugin:import/recommended',\n     'plugin:import/typescript',\n     'plugin:promise/recommended',\n     'plugin:security/recommended-legacy',\n"
                },
                {
                    "date": 1760730999176,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -15,9 +15,8 @@\n     'airbnb-base',\n     'airbnb-typescript/base',\n     'plugin:@typescript-eslint/strict-type-checked',\n     'plugin:@stylistic/all-extends',\n-    'plugin:@stylistic/all-legacy',\n     'plugin:import/recommended',\n     'plugin:import/typescript',\n     'plugin:promise/recommended',\n     'plugin:security/recommended-legacy',\n"
                },
                {
                    "date": 1760731011450,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -14,9 +14,9 @@\n   extends: [\n     'airbnb-base',\n     'airbnb-typescript/base',\n     'plugin:@typescript-eslint/strict-type-checked',\n-    'plugin:@stylistic/all-extends',\n+    'plugin:@stylistic/all-legacy',\n     'plugin:import/recommended',\n     'plugin:import/typescript',\n     'plugin:promise/recommended',\n     'plugin:security/recommended-legacy',\n"
                },
                {
                    "date": 1760731051106,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -15,8 +15,9 @@\n     'airbnb-base',\n     'airbnb-typescript/base',\n     'plugin:@typescript-eslint/strict-type-checked',\n     'plugin:@stylistic/all-legacy',\n+    'plugin:@stylistic/recommended-legacy',\n     'plugin:import/recommended',\n     'plugin:import/typescript',\n     'plugin:promise/recommended',\n     'plugin:security/recommended-legacy',\n@@ -76,10 +77,12 @@\n     '@typescript-eslint/await-thenable': 'error',\n     '@typescript-eslint/promise-function-async': 'error',\n     'brace-style': 'off',\n     '@stylistic/ts/brace-style': ['error', '1tbs'],\n+    '@stylistic/brace-style': ['error', '1tbs'],\n     'lines-between-class-members': 'off',\n     '@stylistic/ts/lines-between-class-members': [\n+    '@stylistic/lines-between-class-members': [\n       'error',\n       'always',\n       {\n         exceptAfterSingleLine: true,\n"
                },
                {
                    "date": 1760731056294,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -14,9 +14,8 @@\n   extends: [\n     'airbnb-base',\n     'airbnb-typescript/base',\n     'plugin:@typescript-eslint/strict-type-checked',\n-    'plugin:@stylistic/all-legacy',\n     'plugin:@stylistic/recommended-legacy',\n     'plugin:import/recommended',\n     'plugin:import/typescript',\n     'plugin:promise/recommended',\n"
                },
                {
                    "date": 1760731104324,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -26,8 +26,11 @@\n   ],\n   plugins: [\n     '@typescript-eslint',\n     '@stylistic',\n+    {\n+      '@stylistic': require('@stylistic/eslint-plugin'),\n+    },\n     'import',\n     'promise',\n     'security',\n     'sonarjs',\n@@ -75,12 +78,10 @@\n     '@typescript-eslint/no-misused-promises': 'error',\n     '@typescript-eslint/await-thenable': 'error',\n     '@typescript-eslint/promise-function-async': 'error',\n     'brace-style': 'off',\n-    '@stylistic/ts/brace-style': ['error', '1tbs'],\n     '@stylistic/brace-style': ['error', '1tbs'],\n     'lines-between-class-members': 'off',\n-    '@stylistic/ts/lines-between-class-members': [\n     '@stylistic/lines-between-class-members': [\n       'error',\n       'always',\n       {\n"
                },
                {
                    "date": 1760731637870,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -25,9 +25,8 @@\n     'prettier',\n   ],\n   plugins: [\n     '@typescript-eslint',\n-    '@stylistic',\n     {\n       '@stylistic': require('@stylistic/eslint-plugin'),\n     },\n     'import',\n"
                },
                {
                    "date": 1760731692954,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -28,8 +28,9 @@\n     '@typescript-eslint',\n     {\n       '@stylistic': require('@stylistic/eslint-plugin'),\n     },\n+    '@stylistic/eslint-plugin',\n     'import',\n     'promise',\n     'security',\n     'sonarjs',\n"
                },
                {
                    "date": 1760731866962,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -14,9 +14,8 @@\n   extends: [\n     'airbnb-base',\n     'airbnb-typescript/base',\n     'plugin:@typescript-eslint/strict-type-checked',\n-    'plugin:@stylistic/recommended-legacy',\n     'plugin:import/recommended',\n     'plugin:import/typescript',\n     'plugin:promise/recommended',\n     'plugin:security/recommended-legacy',\n@@ -25,12 +24,9 @@\n     'prettier',\n   ],\n   plugins: [\n     '@typescript-eslint',\n-    {\n-      '@stylistic': require('@stylistic/eslint-plugin'),\n-    },\n-    '@stylistic/eslint-plugin',\n+    '@stylistic',\n     'import',\n     'promise',\n     'security',\n     'sonarjs',\n@@ -78,11 +74,11 @@\n     '@typescript-eslint/no-misused-promises': 'error',\n     '@typescript-eslint/await-thenable': 'error',\n     '@typescript-eslint/promise-function-async': 'error',\n     'brace-style': 'off',\n-    '@stylistic/brace-style': ['error', '1tbs'],\n+    '@stylistic/ts/brace-style': ['error', '1tbs'],\n     'lines-between-class-members': 'off',\n-    '@stylistic/lines-between-class-members': [\n+    '@stylistic/ts/lines-between-class-members': [\n       'error',\n       'always',\n       {\n         exceptAfterSingleLine: true,\n"
                },
                {
                    "date": 1760732418550,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -14,8 +14,9 @@\n   extends: [\n     'airbnb-base',\n     'airbnb-typescript/base',\n     'plugin:@typescript-eslint/strict-type-checked',\n+    'plugin:@typescript-eslint/stylistic-type-checked',\n     'plugin:import/recommended',\n     'plugin:import/typescript',\n     'plugin:promise/recommended',\n     'plugin:security/recommended-legacy',\n@@ -25,8 +26,9 @@\n   ],\n   plugins: [\n     '@typescript-eslint',\n     '@stylistic',\n+    '@stylistic/ts',\n     'import',\n     'promise',\n     'security',\n     'sonarjs',\n@@ -218,10 +220,9 @@\n         ],\n       },\n     ],\n     eqeqeq: ['error', 'always'],\n-    curly: 'off', // Disabled to allow @stylistic/ts/curly\n-    '@stylistic/curly': ['error', 'all'],\n+    curly: ['error', 'all'],\n \n     // Complexity limits\n     complexity: ['error', 10],\n     'max-depth': ['error', 4],\n"
                },
                {
                    "date": 1760732620196,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,4 +1,19 @@\n+const tsPlugin = require('@typescript-eslint/eslint-plugin');\n+const stylisticPlugin = require('@stylistic/eslint-plugin');\n+\n+if (!tsPlugin.rules['lines-between-class-members'] && stylisticPlugin?.rules?.['ts/lines-between-class-members']) {\n+  tsPlugin.rules['lines-between-class-members'] = stylisticPlugin.rules['ts/lines-between-class-members'];\n+}\n+\n+if (!tsPlugin.rules['brace-style'] && stylisticPlugin?.rules?.['ts/brace-style']) {\n+  tsPlugin.rules['brace-style'] = stylisticPlugin.rules['ts/brace-style'];\n+}\n+\n+if (!tsPlugin.rules['no-throw-literal'] && tsPlugin?.rules?.['only-throw-error']) {\n+  tsPlugin.rules['no-throw-literal'] = tsPlugin.rules['only-throw-error'];\n+}\n+\n module.exports = {\n   root: true,\n   env: {\n     node: true,\n"
                },
                {
                    "date": 1760732974264,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,15 +1,11 @@\n const tsPlugin = require('@typescript-eslint/eslint-plugin');\n-const stylisticPlugin = require('@stylistic/eslint-plugin');\n+const coreLinesBetweenClassMembersRule = require('eslint/lib/rules/lines-between-class-members');\n \n-if (!tsPlugin.rules['lines-between-class-members'] && stylisticPlugin?.rules?.['ts/lines-between-class-members']) {\n-  tsPlugin.rules['lines-between-class-members'] = stylisticPlugin.rules['ts/lines-between-class-members'];\n+if (!tsPlugin.rules['lines-between-class-members']) {\n+  tsPlugin.rules['lines-between-class-members'] = coreLinesBetweenClassMembersRule;\n }\n \n-if (!tsPlugin.rules['brace-style'] && stylisticPlugin?.rules?.['ts/brace-style']) {\n-  tsPlugin.rules['brace-style'] = stylisticPlugin.rules['ts/brace-style'];\n-}\n-\n if (!tsPlugin.rules['no-throw-literal'] && tsPlugin?.rules?.['only-throw-error']) {\n   tsPlugin.rules['no-throw-literal'] = tsPlugin.rules['only-throw-error'];\n }\n \n@@ -41,9 +37,8 @@\n   ],\n   plugins: [\n     '@typescript-eslint',\n     '@stylistic',\n-    '@stylistic/ts',\n     'import',\n     'promise',\n     'security',\n     'sonarjs',\n@@ -91,11 +86,11 @@\n     '@typescript-eslint/no-misused-promises': 'error',\n     '@typescript-eslint/await-thenable': 'error',\n     '@typescript-eslint/promise-function-async': 'error',\n     'brace-style': 'off',\n-    '@stylistic/ts/brace-style': ['error', '1tbs'],\n+    '@stylistic/brace-style': ['error', '1tbs'],\n     'lines-between-class-members': 'off',\n-    '@stylistic/ts/lines-between-class-members': [\n+    '@typescript-eslint/lines-between-class-members': [\n       'error',\n       'always',\n       {\n         exceptAfterSingleLine: true,\n"
                },
                {
                    "date": 1760733077561,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,11 +1,6 @@\n const tsPlugin = require('@typescript-eslint/eslint-plugin');\n-const coreLinesBetweenClassMembersRule = require('eslint/lib/rules/lines-between-class-members');\n \n-if (!tsPlugin.rules['lines-between-class-members']) {\n-  tsPlugin.rules['lines-between-class-members'] = coreLinesBetweenClassMembersRule;\n-}\n-\n if (!tsPlugin.rules['no-throw-literal'] && tsPlugin?.rules?.['only-throw-error']) {\n   tsPlugin.rules['no-throw-literal'] = tsPlugin.rules['only-throw-error'];\n }\n \n@@ -88,9 +83,9 @@\n     '@typescript-eslint/promise-function-async': 'error',\n     'brace-style': 'off',\n     '@stylistic/brace-style': ['error', '1tbs'],\n     'lines-between-class-members': 'off',\n-    '@typescript-eslint/lines-between-class-members': [\n+    '@stylistic/lines-between-class-members': [\n       'error',\n       'always',\n       {\n         exceptAfterSingleLine: true,\n"
                },
                {
                    "date": 1760733215205,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,6 +1,15 @@\n const tsPlugin = require('@typescript-eslint/eslint-plugin');\n+const stylisticPlugin = require('@stylistic/eslint-plugin');\n \n+if (!tsPlugin.rules['brace-style'] && stylisticPlugin?.rules?.['ts/brace-style']) {\n+  tsPlugin.rules['brace-style'] = stylisticPlugin.rules['ts/brace-style'];\n+}\n+\n+if (!tsPlugin.rules['lines-between-class-members'] && stylisticPlugin?.rules?.['ts/lines-between-class-members']) {\n+  tsPlugin.rules['lines-between-class-members'] = stylisticPlugin.rules['ts/lines-between-class-members'];\n+}\n+\n if (!tsPlugin.rules['no-throw-literal'] && tsPlugin?.rules?.['only-throw-error']) {\n   tsPlugin.rules['no-throw-literal'] = tsPlugin.rules['only-throw-error'];\n }\n \n@@ -83,9 +92,9 @@\n     '@typescript-eslint/promise-function-async': 'error',\n     'brace-style': 'off',\n     '@stylistic/brace-style': ['error', '1tbs'],\n     'lines-between-class-members': 'off',\n-    '@stylistic/lines-between-class-members': [\n+    '@typescript-eslint/lines-between-class-members': [\n       'error',\n       'always',\n       {\n         exceptAfterSingleLine: true,\n"
                },
                {
                    "date": 1760733506659,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,13 +1,18 @@\n const tsPlugin = require('@typescript-eslint/eslint-plugin');\n const stylisticPlugin = require('@stylistic/eslint-plugin');\n \n-if (!tsPlugin.rules['brace-style'] && stylisticPlugin?.rules?.['ts/brace-style']) {\n-  tsPlugin.rules['brace-style'] = stylisticPlugin.rules['ts/brace-style'];\n+const stylisticBraceStyleRule =\n+  stylisticPlugin?.rules?.['ts/brace-style'] ?? stylisticPlugin?.rules?.['brace-style'];\n+if (!tsPlugin.rules['brace-style'] && stylisticBraceStyleRule) {\n+  tsPlugin.rules['brace-style'] = stylisticBraceStyleRule;\n }\n \n-if (!tsPlugin.rules['lines-between-class-members'] && stylisticPlugin?.rules?.['ts/lines-between-class-members']) {\n-  tsPlugin.rules['lines-between-class-members'] = stylisticPlugin.rules['ts/lines-between-class-members'];\n+const stylisticLinesBetweenClassMembersRule =\n+  stylisticPlugin?.rules?.['ts/lines-between-class-members'] ??\n+  stylisticPlugin?.rules?.['lines-between-class-members'];\n+if (!tsPlugin.rules['lines-between-class-members'] && stylisticLinesBetweenClassMembersRule) {\n+  tsPlugin.rules['lines-between-class-members'] = stylisticLinesBetweenClassMembersRule;\n }\n \n if (!tsPlugin.rules['no-throw-literal'] && tsPlugin?.rules?.['only-throw-error']) {\n   tsPlugin.rules['no-throw-literal'] = tsPlugin.rules['only-throw-error'];\n"
                },
                {
                    "date": 1760733686578,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,36 +1,24 @@\n-const tsPlugin = require('@typescript-eslint/eslint-plugin');\n-const stylisticPlugin = require('@stylistic/eslint-plugin');\n+/* eslint-disable @typescript-eslint/consistent-type-imports */\n+const path = require('node:path');\n \n-const stylisticBraceStyleRule =\n-  stylisticPlugin?.rules?.['ts/brace-style'] ?? stylisticPlugin?.rules?.['brace-style'];\n-if (!tsPlugin.rules['brace-style'] && stylisticBraceStyleRule) {\n-  tsPlugin.rules['brace-style'] = stylisticBraceStyleRule;\n-}\n-\n-const stylisticLinesBetweenClassMembersRule =\n-  stylisticPlugin?.rules?.['ts/lines-between-class-members'] ??\n-  stylisticPlugin?.rules?.['lines-between-class-members'];\n-if (!tsPlugin.rules['lines-between-class-members'] && stylisticLinesBetweenClassMembersRule) {\n-  tsPlugin.rules['lines-between-class-members'] = stylisticLinesBetweenClassMembersRule;\n-}\n-\n-if (!tsPlugin.rules['no-throw-literal'] && tsPlugin?.rules?.['only-throw-error']) {\n-  tsPlugin.rules['no-throw-literal'] = tsPlugin.rules['only-throw-error'];\n-}\n-\n+/** @type {import('eslint').Linter.Config} */\n module.exports = {\n   root: true,\n-  env: {\n-    node: true,\n-    es2022: true,\n-  },\n+  env: { node: true, es2022: true },\n   parser: '@typescript-eslint/parser',\n   parserOptions: {\n     ecmaVersion: 2022,\n     sourceType: 'module',\n-    project: ['./tsconfig.json', './packages/*/tsconfig.json'],\n+    // Prefer project references; limit the number of programs built.\n+    project: [\n+      './tsconfig.json',\n+      './packages/*/tsconfig.json',\n+    ],\n     tsconfigRootDir: __dirname,\n+\n+    // Speeds up type-aware rules significantly on multi-project repos\n+    projectService: true,\n   },\n   extends: [\n     'airbnb-base',\n     'airbnb-typescript/base',\n@@ -38,241 +26,140 @@\n     'plugin:@typescript-eslint/stylistic-type-checked',\n     'plugin:import/recommended',\n     'plugin:import/typescript',\n     'plugin:promise/recommended',\n+    // Consider dropping security-legacy if too noisy\n     'plugin:security/recommended-legacy',\n     'plugin:sonarjs/recommended',\n     'plugin:unicorn/recommended',\n+    // Put Prettier last to turn off conflicting style rules\n     'prettier',\n   ],\n   plugins: [\n     '@typescript-eslint',\n-    '@stylistic',\n+    // keep @stylistic installed only if you use rules explicitly;\n+    // avoid mixing style rules with Prettier\n     'import',\n     'promise',\n     'security',\n     'sonarjs',\n     'unicorn',\n     'prettier',\n   ],\n   rules: {\n-    // Prettier integration\n+    // Let Prettier own formatting; this is the single formatting gate.\n     'prettier/prettier': 'error',\n \n-    // TypeScript specific\n-    '@typescript-eslint/explicit-function-return-type': [\n-      'error',\n-      {\n-        allowExpressions: true,\n-        allowTypedFunctionExpressions: true,\n-        allowHigherOrderFunctions: true,\n-      },\n-    ],\n-    '@typescript-eslint/explicit-module-boundary-types': 'error',\n+    // ---- TypeScript ----\n+    '@typescript-eslint/explicit-function-return-type': ['error', {\n+      allowExpressions: true,\n+      allowTypedFunctionExpressions: true,\n+      allowHigherOrderFunctions: true,\n+    }],\n+    // Consider turning this to 'warn' or 'off' if it creates friction\n+    '@typescript-eslint/explicit-module-boundary-types': 'warn',\n     '@typescript-eslint/no-explicit-any': 'error',\n     '@typescript-eslint/only-throw-error': 'error',\n-    '@typescript-eslint/no-unused-vars': [\n-      'error',\n-      {\n-        argsIgnorePattern: '^_',\n-        varsIgnorePattern: '^_',\n-        caughtErrorsIgnorePattern: '^_',\n-      },\n-    ],\n-    '@typescript-eslint/consistent-type-imports': [\n-      'error',\n-      {\n-        prefer: 'type-imports',\n-        fixStyle: 'separate-type-imports',\n-      },\n-    ],\n-    '@typescript-eslint/consistent-type-exports': [\n-      'error',\n-      {\n-        fixMixedExportsWithInlineTypeSpecifier: true,\n-      },\n-    ],\n-    '@typescript-eslint/no-floating-promises': 'error',\n-    '@typescript-eslint/no-misused-promises': 'error',\n+    '@typescript-eslint/no-unused-vars': ['error', {\n+      argsIgnorePattern: '^_',\n+      varsIgnorePattern: '^_',\n+      caughtErrorsIgnorePattern: '^_',\n+    }],\n+    '@typescript-eslint/consistent-type-imports': ['error', {\n+      prefer: 'type-imports',\n+      fixStyle: 'separate-type-imports',\n+    }],\n+    '@typescript-eslint/consistent-type-exports': ['error', {\n+      fixMixedExportsWithInlineTypeSpecifier: true,\n+    }],\n+    '@typescript-eslint/no-floating-promises': ['error', { ignoreVoid: true, ignoreIIFE: true }],\n+    '@typescript-eslint/no-misused-promises': ['error', { checksVoidReturn: { attributes: false } }],\n     '@typescript-eslint/await-thenable': 'error',\n-    '@typescript-eslint/promise-function-async': 'error',\n+    '@typescript-eslint/promise-function-async': ['error', { allowAny: true }],\n+\n+    // Don’t mix stylistic rule impls; turn off core, don’t remap\n     'brace-style': 'off',\n-    '@stylistic/brace-style': ['error', '1tbs'],\n+    // If you truly want brace style beyond Prettier, enable *one* rule source:\n+    // '@stylistic/brace-style': ['error', '1tbs'],\n+\n     'lines-between-class-members': 'off',\n-    '@typescript-eslint/lines-between-class-members': [\n-      'error',\n-      'always',\n-      {\n-        exceptAfterSingleLine: true,\n-      },\n+    '@typescript-eslint/lines-between-class-members': ['error', 'always', {\n+      exceptAfterSingleLine: true,\n+    }],\n+\n+    '@typescript-eslint/naming-convention': ['error',\n+      { selector: 'default', format: ['camelCase'], leadingUnderscore: 'allow', trailingUnderscore: 'forbid' },\n+      { selector: 'variable', format: ['camelCase', 'UPPER_CASE', 'PascalCase'], leadingUnderscore: 'allow' },\n+      { selector: 'typeLike', format: ['PascalCase'] },\n+      { selector: 'enumMember', format: ['PascalCase', 'UPPER_CASE'] },\n+      { selector: 'import', format: ['camelCase', 'PascalCase'] },\n     ],\n-    '@typescript-eslint/naming-convention': [\n-      'error',\n-      {\n-        selector: 'default',\n-        format: ['camelCase'],\n-        leadingUnderscore: 'allow',\n-        trailingUnderscore: 'forbid',\n-      },\n-      {\n-        selector: 'variable',\n-        format: ['camelCase', 'UPPER_CASE', 'PascalCase'],\n-        leadingUnderscore: 'allow',\n-      },\n-      {\n-        selector: 'typeLike',\n-        format: ['PascalCase'],\n-      },\n-      {\n-        selector: 'enumMember',\n-        format: ['PascalCase', 'UPPER_CASE'],\n-      },\n-      {\n-        selector: 'import',\n-        format: ['camelCase', 'PascalCase'],\n-      },\n-    ],\n \n-    // Import organization\n-    'import/order': [\n-      'error',\n-      {\n-        groups: [\n-          'builtin',\n-          'external',\n-          'internal',\n-          'parent',\n-          'sibling',\n-          'index',\n-          'object',\n-          'type',\n-        ],\n-        'newlines-between': 'always',\n-        alphabetize: {\n-          order: 'asc',\n-          caseInsensitive: true,\n-        },\n-      },\n-    ],\n+    // ---- Imports ----\n+    'import/order': ['error', {\n+      groups: ['builtin', 'external', 'internal', 'parent', 'sibling', 'index', 'object', 'type'],\n+      'newlines-between': 'always',\n+      alphabetize: { order: 'asc', caseInsensitive: true },\n+    }],\n     'import/no-duplicates': 'error',\n-    'import/no-extraneous-dependencies': [\n-      'error',\n-      {\n-        devDependencies: [\n-          '**/*.test.ts',\n-          '**/*.spec.ts',\n-          '**/__tests__/**',\n-          '**/vitest.config.ts',\n-          '**/scripts/**',\n-        ],\n-      },\n-    ],\n+    'import/no-extraneous-dependencies': ['error', {\n+      devDependencies: [\n+        '**/*.{test,spec}.ts',\n+        '**/__tests__/**',\n+        '**/vitest.config.{ts,js,cjs,mjs}',\n+        '**/jest.config.{ts,js,cjs,mjs}',\n+        '**/scripts/**',\n+        '**/*.config.{ts,js,cjs,mjs}',\n+      ],\n+    }],\n     'import/prefer-default-export': 'off',\n     'import/no-default-export': 'error',\n+    'import/extensions': ['error', 'ignorePackages', { ts: 'never', tsx: 'never', js: 'never', mjs: 'never', cjs: 'never' }],\n \n-    // Unicorn overrides\n-    'unicorn/prevent-abbreviations': [\n-      'error',\n-      {\n-        allowList: {\n-          args: true,\n-          env: true,\n-          params: true,\n-          props: true,\n-          Props: true,\n-          ref: true,\n-          Ref: true,\n-        },\n-      },\n-    ],\n-    'unicorn/filename-case': [\n-      'error',\n-      {\n-        cases: {\n-          kebabCase: true,\n-          pascalCase: true,\n-        },\n-      },\n-    ],\n+    // ---- Unicorn ----\n+    'unicorn/prevent-abbreviations': ['error', {\n+      allowList: { args: true, env: true, params: true, props: true, Props: true, ref: true, Ref: true },\n+    }],\n+    'unicorn/filename-case': ['error', { cases: { kebabCase: true, pascalCase: true } }],\n     'unicorn/no-null': 'off',\n     'unicorn/prefer-module': 'off',\n     'unicorn/prefer-top-level-await': 'off',\n \n-    // Security\n+    // ---- Security / Sonar ----\n     'security/detect-object-injection': 'off',\n     'security/detect-non-literal-fs-filename': 'off',\n-\n-    // SonarJS\n     'sonarjs/cognitive-complexity': ['error', 15],\n     'sonarjs/no-duplicate-string': ['error', { threshold: 5 }],\n \n-    // General code quality\n-    'no-console': [\n-      'warn',\n-      {\n-        allow: ['warn', 'error', 'info', 'debug'],\n-      },\n-    ],\n+    // ---- General quality ----\n+    'no-console': ['warn', { allow: ['warn', 'error', 'info', 'debug'] }],\n     'no-debugger': 'error',\n     'no-alert': 'error',\n     'no-var': 'error',\n     'prefer-const': 'error',\n     'prefer-arrow-callback': 'error',\n     'prefer-template': 'error',\n-    'prefer-destructuring': [\n-      'error',\n-      {\n-        array: false,\n-        object: true,\n-      },\n-    ],\n+    'prefer-destructuring': ['error', { array: false, object: true }],\n     'no-nested-ternary': 'error',\n     'no-unneeded-ternary': 'error',\n-    'no-param-reassign': [\n-      'error',\n-      {\n-        props: true,\n-        ignorePropertyModificationsFor: [\n-          'acc',\n-          'accumulator',\n-          'draft',\n-          'state',\n-        ],\n-      },\n-    ],\n+    'no-param-reassign': ['error', {\n+      props: true,\n+      ignorePropertyModificationsFor: ['acc', 'accumulator', 'draft', 'state'],\n+    }],\n     eqeqeq: ['error', 'always'],\n     curly: ['error', 'all'],\n \n-    // Complexity limits\n+    // ---- Complexity / size ----\n     complexity: ['error', 10],\n     'max-depth': ['error', 4],\n-    'max-lines': [\n-      'error',\n-      {\n-        max: 400,\n-        skipBlankLines: true,\n-        skipComments: true,\n-      },\n-    ],\n-    'max-lines-per-function': [\n-      'error',\n-      {\n-        max: 80,\n-        skipBlankLines: true,\n-        skipComments: true,\n-      },\n-    ],\n+    'max-lines': ['error', { max: 400, skipBlankLines: true, skipComments: true }],\n+    'max-lines-per-function': ['error', { max: 80, skipBlankLines: true, skipComments: true }],\n     'max-params': ['error', 4],\n \n-    // Comments\n-    'spaced-comment': [\n-      'error',\n-      'always',\n-      {\n-        markers: ['/'],\n-      },\n-    ],\n+    // ---- Comments ----\n+    'spaced-comment': ['error', 'always', { markers: ['/'] }],\n   },\n+\n   settings: {\n     'import/resolver': {\n       typescript: {\n         alwaysTryTypes: true,\n@@ -280,31 +167,34 @@\n       },\n       node: true,\n     },\n   },\n+\n   overrides: [\n+    // Tests\n     {\n-      files: ['*.test.ts', '*.spec.ts', '**/__tests__/**/*.ts'],\n+      files: ['**/*.{test,spec}.ts', '**/__tests__/**/*.ts'],\n+      env: { 'vitest-globals/env': true }, // or { jest: true } for Jest\n+      plugins: ['vitest'],                 // or ['jest']\n+      extends: ['plugin:vitest/recommended'],\n       rules: {\n         '@typescript-eslint/no-explicit-any': 'off',\n         '@typescript-eslint/no-unsafe-assignment': 'off',\n         '@typescript-eslint/no-unsafe-member-access': 'off',\n         'sonarjs/no-duplicate-string': 'off',\n         'max-lines-per-function': 'off',\n       },\n     },\n+    // Tooling configs\n     {\n-      files: ['*.config.ts', '*.config.js', '*.config.cjs'],\n-      rules: {\n-        'import/no-default-export': 'off',\n-      },\n+      files: ['*.config.{ts,js,cjs,mjs}'],\n+      rules: { 'import/no-default-export': 'off' },\n     },\n   ],\n+\n   ignorePatterns: [\n-    'dist',\n-    'build',\n-    'node_modules',\n-    'coverage',\n-    '*.d.ts',\n-    '*.min.js',\n+    'dist', 'build', 'node_modules', 'coverage',\n+    '*.d.ts', '*.min.js',\n+    '**/*.gen.ts', '**/*.generated.ts', '**/__generated__/**',\n+    '.turbo', '.next', '.vite', '.cache',\n   ],\n };\n"
                },
                {
                    "date": 1760733939394,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,200 +1,203 @@\n-/* eslint-disable @typescript-eslint/consistent-type-imports */\n-const path = require('node:path');\n+// eslint.config.js\n+import path from 'node:path';\n \n-/** @type {import('eslint').Linter.Config} */\n-module.exports = {\n-  root: true,\n-  env: { node: true, es2022: true },\n-  parser: '@typescript-eslint/parser',\n-  parserOptions: {\n-    ecmaVersion: 2022,\n-    sourceType: 'module',\n-    // Prefer project references; limit the number of programs built.\n-    project: [\n-      './tsconfig.json',\n-      './packages/*/tsconfig.json',\n-    ],\n-    tsconfigRootDir: __dirname,\n+// Plugins\n+import tseslint from '@typescript-eslint/eslint-plugin';\n+import tsparser from '@typescript-eslint/parser';\n+import stylistic from '@stylistic/eslint-plugin';\n+import importPlugin from 'eslint-plugin-import';\n+import promise from 'eslint-plugin-promise';\n+import security from 'eslint-plugin-security';\n+import sonarjs from 'eslint-plugin-sonarjs';\n+import unicorn from 'eslint-plugin-unicorn';\n+import vitest from 'eslint-plugin-vitest';\n+import prettier from 'eslint-plugin-prettier';\n \n-    // Speeds up type-aware rules significantly on multi-project repos\n-    projectService: true,\n-  },\n-  extends: [\n-    'airbnb-base',\n-    'airbnb-typescript/base',\n-    'plugin:@typescript-eslint/strict-type-checked',\n-    'plugin:@typescript-eslint/stylistic-type-checked',\n-    'plugin:import/recommended',\n-    'plugin:import/typescript',\n-    'plugin:promise/recommended',\n-    // Consider dropping security-legacy if too noisy\n-    'plugin:security/recommended-legacy',\n-    'plugin:sonarjs/recommended',\n-    'plugin:unicorn/recommended',\n-    // Put Prettier last to turn off conflicting style rules\n-    'prettier',\n-  ],\n-  plugins: [\n-    '@typescript-eslint',\n-    // keep @stylistic installed only if you use rules explicitly;\n-    // avoid mixing style rules with Prettier\n-    'import',\n-    'promise',\n-    'security',\n-    'sonarjs',\n-    'unicorn',\n-    'prettier',\n-  ],\n-  rules: {\n-    // Let Prettier own formatting; this is the single formatting gate.\n-    'prettier/prettier': 'error',\n+// Configs\n+import airbnbBase from 'eslint-config-airbnb-base';\n+import airbnbTsBase from 'eslint-config-airbnb-typescript/base';\n+import prettierConfig from 'eslint-config-prettier';\n \n-    // ---- TypeScript ----\n-    '@typescript-eslint/explicit-function-return-type': ['error', {\n-      allowExpressions: true,\n-      allowTypedFunctionExpressions: true,\n-      allowHigherOrderFunctions: true,\n-    }],\n-    // Consider turning this to 'warn' or 'off' if it creates friction\n-    '@typescript-eslint/explicit-module-boundary-types': 'warn',\n-    '@typescript-eslint/no-explicit-any': 'error',\n-    '@typescript-eslint/only-throw-error': 'error',\n-    '@typescript-eslint/no-unused-vars': ['error', {\n-      argsIgnorePattern: '^_',\n-      varsIgnorePattern: '^_',\n-      caughtErrorsIgnorePattern: '^_',\n-    }],\n-    '@typescript-eslint/consistent-type-imports': ['error', {\n-      prefer: 'type-imports',\n-      fixStyle: 'separate-type-imports',\n-    }],\n-    '@typescript-eslint/consistent-type-exports': ['error', {\n-      fixMixedExportsWithInlineTypeSpecifier: true,\n-    }],\n-    '@typescript-eslint/no-floating-promises': ['error', { ignoreVoid: true, ignoreIIFE: true }],\n-    '@typescript-eslint/no-misused-promises': ['error', { checksVoidReturn: { attributes: false } }],\n-    '@typescript-eslint/await-thenable': 'error',\n-    '@typescript-eslint/promise-function-async': ['error', { allowAny: true }],\n+// Utility to merge configs\n+const merge = (...configs) => configs.flat();\n \n-    // Don’t mix stylistic rule impls; turn off core, don’t remap\n-    'brace-style': 'off',\n-    // If you truly want brace style beyond Prettier, enable *one* rule source:\n-    // '@stylistic/brace-style': ['error', '1tbs'],\n+export default [\n+  {\n+    ignores: [\n+      'dist',\n+      'build',\n+      'node_modules',\n+      'coverage',\n+      '*.d.ts',\n+      '*.min.js',\n+      '**/*.gen.ts',\n+      '**/*.generated.ts',\n+      '**/__generated__/**',\n+      '.turbo',\n+      '.next',\n+      '.vite',\n+      '.cache',\n+    ],\n+  },\n+  {\n+    files: ['**/*.{ts,tsx,js,jsx}'],\n+    languageOptions: {\n+      parser: tsparser,\n+      parserOptions: {\n+        ecmaVersion: 2022,\n+        sourceType: 'module',\n+        project: ['./tsconfig.json', './packages/*/tsconfig.json'],\n+        tsconfigRootDir: path.resolve(),\n+        projectService: true,\n+      },\n+      globals: {\n+        NodeJS: true,\n+      },\n+    },\n+    plugins: {\n+      '@typescript-eslint': tseslint,\n+      '@stylistic': stylistic,\n+      import: importPlugin,\n+      promise,\n+      security,\n+      sonarjs,\n+      unicorn,\n+      vitest,\n+      prettier,\n+    },\n+    rules: {\n+      // Prettier\n+      'prettier/prettier': 'error',\n \n-    'lines-between-class-members': 'off',\n-    '@typescript-eslint/lines-between-class-members': ['error', 'always', {\n-      exceptAfterSingleLine: true,\n-    }],\n+      // TS\n+      '@typescript-eslint/explicit-function-return-type': ['error', {\n+        allowExpressions: true,\n+        allowTypedFunctionExpressions: true,\n+        allowHigherOrderFunctions: true,\n+      }],\n+      '@typescript-eslint/explicit-module-boundary-types': 'warn',\n+      '@typescript-eslint/no-explicit-any': 'error',\n+      '@typescript-eslint/only-throw-error': 'error',\n+      '@typescript-eslint/no-unused-vars': ['error', {\n+        argsIgnorePattern: '^_',\n+        varsIgnorePattern: '^_',\n+        caughtErrorsIgnorePattern: '^_',\n+      }],\n+      '@typescript-eslint/consistent-type-imports': ['error', {\n+        prefer: 'type-imports',\n+        fixStyle: 'separate-type-imports',\n+      }],\n+      '@typescript-eslint/consistent-type-exports': ['error', {\n+        fixMixedExportsWithInlineTypeSpecifier: true,\n+      }],\n+      '@typescript-eslint/no-floating-promises': ['error', { ignoreVoid: true, ignoreIIFE: true }],\n+      '@typescript-eslint/no-misused-promises': ['error', { checksVoidReturn: { attributes: false } }],\n+      '@typescript-eslint/await-thenable': 'error',\n+      '@typescript-eslint/promise-function-async': 'error',\n \n-    '@typescript-eslint/naming-convention': ['error',\n-      { selector: 'default', format: ['camelCase'], leadingUnderscore: 'allow', trailingUnderscore: 'forbid' },\n-      { selector: 'variable', format: ['camelCase', 'UPPER_CASE', 'PascalCase'], leadingUnderscore: 'allow' },\n-      { selector: 'typeLike', format: ['PascalCase'] },\n-      { selector: 'enumMember', format: ['PascalCase', 'UPPER_CASE'] },\n-      { selector: 'import', format: ['camelCase', 'PascalCase'] },\n-    ],\n+      // Style (brace style left to Prettier)\n+      'brace-style': 'off',\n+      'lines-between-class-members': 'off',\n+      '@typescript-eslint/lines-between-class-members': ['error', 'always', {\n+        exceptAfterSingleLine: true,\n+      }],\n \n-    // ---- Imports ----\n-    'import/order': ['error', {\n-      groups: ['builtin', 'external', 'internal', 'parent', 'sibling', 'index', 'object', 'type'],\n-      'newlines-between': 'always',\n-      alphabetize: { order: 'asc', caseInsensitive: true },\n-    }],\n-    'import/no-duplicates': 'error',\n-    'import/no-extraneous-dependencies': ['error', {\n-      devDependencies: [\n-        '**/*.{test,spec}.ts',\n-        '**/__tests__/**',\n-        '**/vitest.config.{ts,js,cjs,mjs}',\n-        '**/jest.config.{ts,js,cjs,mjs}',\n-        '**/scripts/**',\n-        '**/*.config.{ts,js,cjs,mjs}',\n+      // Naming\n+      '@typescript-eslint/naming-convention': ['error',\n+        { selector: 'default', format: ['camelCase'], leadingUnderscore: 'allow', trailingUnderscore: 'forbid' },\n+        { selector: 'variable', format: ['camelCase', 'UPPER_CASE', 'PascalCase'], leadingUnderscore: 'allow' },\n+        { selector: 'typeLike', format: ['PascalCase'] },\n+        { selector: 'enumMember', format: ['PascalCase', 'UPPER_CASE'] },\n+        { selector: 'import', format: ['camelCase', 'PascalCase'] },\n       ],\n-    }],\n-    'import/prefer-default-export': 'off',\n-    'import/no-default-export': 'error',\n-    'import/extensions': ['error', 'ignorePackages', { ts: 'never', tsx: 'never', js: 'never', mjs: 'never', cjs: 'never' }],\n \n-    // ---- Unicorn ----\n-    'unicorn/prevent-abbreviations': ['error', {\n-      allowList: { args: true, env: true, params: true, props: true, Props: true, ref: true, Ref: true },\n-    }],\n-    'unicorn/filename-case': ['error', { cases: { kebabCase: true, pascalCase: true } }],\n-    'unicorn/no-null': 'off',\n-    'unicorn/prefer-module': 'off',\n-    'unicorn/prefer-top-level-await': 'off',\n+      // Imports\n+      'import/order': ['error', {\n+        groups: ['builtin', 'external', 'internal', 'parent', 'sibling', 'index', 'object', 'type'],\n+        'newlines-between': 'always',\n+        alphabetize: { order: 'asc', caseInsensitive: true },\n+      }],\n+      'import/no-duplicates': 'error',\n+      'import/no-extraneous-dependencies': ['error', {\n+        devDependencies: [\n+          '**/*.{test,spec}.ts',\n+          '**/__tests__/**',\n+          '**/vitest.config.{ts,js,cjs,mjs}',\n+          '**/jest.config.{ts,js,cjs,mjs}',\n+          '**/scripts/**',\n+          '**/*.config.{ts,js,cjs,mjs}',\n+        ],\n+      }],\n+      'import/prefer-default-export': 'off',\n+      'import/no-default-export': 'error',\n+      'import/extensions': ['error', 'ignorePackages', {\n+        ts: 'never', tsx: 'never', js: 'never', mjs: 'never', cjs: 'never',\n+      }],\n \n-    // ---- Security / Sonar ----\n-    'security/detect-object-injection': 'off',\n-    'security/detect-non-literal-fs-filename': 'off',\n-    'sonarjs/cognitive-complexity': ['error', 15],\n-    'sonarjs/no-duplicate-string': ['error', { threshold: 5 }],\n+      // Unicorn\n+      'unicorn/prevent-abbreviations': ['error', {\n+        allowList: { args: true, env: true, params: true, props: true, Props: true, ref: true, Ref: true },\n+      }],\n+      'unicorn/filename-case': ['error', { cases: { kebabCase: true, pascalCase: true } }],\n+      'unicorn/no-null': 'off',\n+      'unicorn/prefer-module': 'off',\n+      'unicorn/prefer-top-level-await': 'off',\n \n-    // ---- General quality ----\n-    'no-console': ['warn', { allow: ['warn', 'error', 'info', 'debug'] }],\n-    'no-debugger': 'error',\n-    'no-alert': 'error',\n-    'no-var': 'error',\n-    'prefer-const': 'error',\n-    'prefer-arrow-callback': 'error',\n-    'prefer-template': 'error',\n-    'prefer-destructuring': ['error', { array: false, object: true }],\n-    'no-nested-ternary': 'error',\n-    'no-unneeded-ternary': 'error',\n-    'no-param-reassign': ['error', {\n-      props: true,\n-      ignorePropertyModificationsFor: ['acc', 'accumulator', 'draft', 'state'],\n-    }],\n-    eqeqeq: ['error', 'always'],\n-    curly: ['error', 'all'],\n+      // Security\n+      'security/detect-object-injection': 'off',\n+      'security/detect-non-literal-fs-filename': 'off',\n \n-    // ---- Complexity / size ----\n-    complexity: ['error', 10],\n-    'max-depth': ['error', 4],\n-    'max-lines': ['error', { max: 400, skipBlankLines: true, skipComments: true }],\n-    'max-lines-per-function': ['error', { max: 80, skipBlankLines: true, skipComments: true }],\n-    'max-params': ['error', 4],\n+      // Sonar\n+      'sonarjs/cognitive-complexity': ['error', 15],\n+      'sonarjs/no-duplicate-string': ['error', { threshold: 5 }],\n \n-    // ---- Comments ----\n-    'spaced-comment': ['error', 'always', { markers: ['/'] }],\n-  },\n+      // Quality\n+      'no-console': ['warn', { allow: ['warn', 'error', 'info', 'debug'] }],\n+      'no-debugger': 'error',\n+      'no-alert': 'error',\n+      'no-var': 'error',\n+      'prefer-const': 'error',\n+      'prefer-arrow-callback': 'error',\n+      'prefer-template': 'error',\n+      'prefer-destructuring': ['error', { array: false, object: true }],\n+      'no-nested-ternary': 'error',\n+      'no-unneeded-ternary': 'error',\n+      'no-param-reassign': ['error', {\n+        props: true,\n+        ignorePropertyModificationsFor: ['acc', 'accumulator', 'draft', 'state'],\n+      }],\n+      eqeqeq: ['error', 'always'],\n+      curly: ['error', 'all'],\n \n-  settings: {\n-    'import/resolver': {\n-      typescript: {\n-        alwaysTryTypes: true,\n-        project: ['./tsconfig.json', './packages/*/tsconfig.json'],\n-      },\n-      node: true,\n+      // Complexity\n+      complexity: ['error', 10],\n+      'max-depth': ['error', 4],\n+      'max-lines': ['error', { max: 400, skipBlankLines: true, skipComments: true }],\n+      'max-lines-per-function': ['error', { max: 80, skipBlankLines: true, skipComments: true }],\n+      'max-params': ['error', 4],\n+\n+      // Comments\n+      'spaced-comment': ['error', 'always', { markers: ['/'] }],\n     },\n   },\n-\n-  overrides: [\n-    // Tests\n-    {\n-      files: ['**/*.{test,spec}.ts', '**/__tests__/**/*.ts'],\n-      env: { 'vitest-globals/env': true }, // or { jest: true } for Jest\n-      plugins: ['vitest'],                 // or ['jest']\n-      extends: ['plugin:vitest/recommended'],\n-      rules: {\n-        '@typescript-eslint/no-explicit-any': 'off',\n-        '@typescript-eslint/no-unsafe-assignment': 'off',\n-        '@typescript-eslint/no-unsafe-member-access': 'off',\n-        'sonarjs/no-duplicate-string': 'off',\n-        'max-lines-per-function': 'off',\n-      },\n+  // Vitest-specific override\n+  {\n+    files: ['**/*.{test,spec}.ts', '**/__tests__/**/*.ts'],\n+    languageOptions: {\n+      env: { 'vitest/globals': true },\n     },\n-    // Tooling configs\n-    {\n-      files: ['*.config.{ts,js,cjs,mjs}'],\n-      rules: { 'import/no-default-export': 'off' },\n+    plugins: { vitest },\n+    rules: {\n+      '@typescript-eslint/no-explicit-any': 'off',\n+      '@typescript-eslint/no-unsafe-assignment': 'off',\n+      '@typescript-eslint/no-unsafe-member-access': 'off',\n+      'sonarjs/no-duplicate-string': 'off',\n+      'max-lines-per-function': 'off',\n     },\n-  ],\n-\n-  ignorePatterns: [\n-    'dist', 'build', 'node_modules', 'coverage',\n-    '*.d.ts', '*.min.js',\n-    '**/*.gen.ts', '**/*.generated.ts', '**/__generated__/**',\n-    '.turbo', '.next', '.vite', '.cache',\n-  ],\n-};\n+  },\n+  // Config files override\n+  {\n+    files: ['*.config.{ts,js,cjs,mjs}'],\n+    rules: { 'import/no-default-export': 'off' },\n+  },\n+];\n"
                },
                {
                    "date": 1760738165558,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,203 +1,290 @@\n-// eslint.config.js\n-import path from 'node:path';\n-\n-// Plugins\n-import tseslint from '@typescript-eslint/eslint-plugin';\n-import tsparser from '@typescript-eslint/parser';\n-import stylistic from '@stylistic/eslint-plugin';\n-import importPlugin from 'eslint-plugin-import';\n-import promise from 'eslint-plugin-promise';\n-import security from 'eslint-plugin-security';\n-import sonarjs from 'eslint-plugin-sonarjs';\n-import unicorn from 'eslint-plugin-unicorn';\n-import vitest from 'eslint-plugin-vitest';\n-import prettier from 'eslint-plugin-prettier';\n-\n-// Configs\n-import airbnbBase from 'eslint-config-airbnb-base';\n-import airbnbTsBase from 'eslint-config-airbnb-typescript/base';\n-import prettierConfig from 'eslint-config-prettier';\n-\n-// Utility to merge configs\n-const merge = (...configs) => configs.flat();\n-\n-export default [\n-  {\n-    ignores: [\n-      'dist',\n-      'build',\n-      'node_modules',\n-      'coverage',\n-      '*.d.ts',\n-      '*.min.js',\n-      '**/*.gen.ts',\n-      '**/*.generated.ts',\n-      '**/__generated__/**',\n-      '.turbo',\n-      '.next',\n-      '.vite',\n-      '.cache',\n-    ],\n+module.exports = {\n+  root: true,\n+  env: {\n+    node: true,\n+    es2022: true,\n   },\n-  {\n-    files: ['**/*.{ts,tsx,js,jsx}'],\n-    languageOptions: {\n-      parser: tsparser,\n-      parserOptions: {\n-        ecmaVersion: 2022,\n-        sourceType: 'module',\n-        project: ['./tsconfig.json', './packages/*/tsconfig.json'],\n-        tsconfigRootDir: path.resolve(),\n-        projectService: true,\n-      },\n-      globals: {\n-        NodeJS: true,\n-      },\n-    },\n-    plugins: {\n-      '@typescript-eslint': tseslint,\n-      '@stylistic': stylistic,\n-      import: importPlugin,\n-      promise,\n-      security,\n-      sonarjs,\n-      unicorn,\n-      vitest,\n-      prettier,\n-    },\n-    rules: {\n-      // Prettier\n-      'prettier/prettier': 'error',\n+  parser: '@typescript-eslint/parser',\n+  parserOptions: {\n+    ecmaVersion: 2022,\n+    sourceType: 'module',\n+    project: ['./tsconfig.json', './packages/*/tsconfig.json'],\n+    tsconfigRootDir: __dirname,\n+  },\n+  extends: [\n+    'airbnb-base',\n+    'airbnb-typescript/base',\n+    'plugin:@typescript-eslint/strict-type-checked',\n+    'plugin:@stylistic/recommended-legacy',\n+    'plugin:import/recommended',\n+    'plugin:import/typescript',\n+    'plugin:promise/recommended',\n+    'plugin:security/recommended-legacy',\n+    'plugin:sonarjs/recommended',\n+    'plugin:unicorn/recommended',\n+    'prettier',\n+  ],\n+  plugins: [\n+    '@stylistic/eslint-plugin',\n+    'import',\n+    'promise',\n+    'security',\n+    'sonarjs',\n+    'unicorn',\n+    'prettier',\n+  ],\n+  rules: {\n+    // Prettier integration\n+    'prettier/prettier': 'error',\n \n-      // TS\n-      '@typescript-eslint/explicit-function-return-type': ['error', {\n+    // TypeScript specific\n+    '@typescript-eslint/explicit-function-return-type': [\n+      'error',\n+      {\n         allowExpressions: true,\n         allowTypedFunctionExpressions: true,\n         allowHigherOrderFunctions: true,\n-      }],\n-      '@typescript-eslint/explicit-module-boundary-types': 'warn',\n-      '@typescript-eslint/no-explicit-any': 'error',\n-      '@typescript-eslint/only-throw-error': 'error',\n-      '@typescript-eslint/no-unused-vars': ['error', {\n+      },\n+    ],\n+    '@typescript-eslint/explicit-module-boundary-types': 'error',\n+    '@typescript-eslint/no-explicit-any': 'error',\n+    '@typescript-eslint/only-throw-error': 'error',\n+    '@typescript-eslint/no-unused-vars': [\n+      'error',\n+      {\n         argsIgnorePattern: '^_',\n         varsIgnorePattern: '^_',\n         caughtErrorsIgnorePattern: '^_',\n-      }],\n-      '@typescript-eslint/consistent-type-imports': ['error', {\n+      },\n+    ],\n+    '@typescript-eslint/consistent-type-imports': [\n+      'error',\n+      {\n         prefer: 'type-imports',\n         fixStyle: 'separate-type-imports',\n-      }],\n-      '@typescript-eslint/consistent-type-exports': ['error', {\n+      },\n+    ],\n+    '@typescript-eslint/consistent-type-exports': [\n+      'error',\n+      {\n         fixMixedExportsWithInlineTypeSpecifier: true,\n-      }],\n-      '@typescript-eslint/no-floating-promises': ['error', { ignoreVoid: true, ignoreIIFE: true }],\n-      '@typescript-eslint/no-misused-promises': ['error', { checksVoidReturn: { attributes: false } }],\n-      '@typescript-eslint/await-thenable': 'error',\n-      '@typescript-eslint/promise-function-async': 'error',\n-\n-      // Style (brace style left to Prettier)\n-      'brace-style': 'off',\n-      'lines-between-class-members': 'off',\n-      '@typescript-eslint/lines-between-class-members': ['error', 'always', {\n+      },\n+    ],\n+    '@typescript-eslint/no-floating-promises': 'error',\n+    '@typescript-eslint/no-misused-promises': 'error',\n+    '@typescript-eslint/await-thenable': 'error',\n+    '@typescript-eslint/promise-function-async': 'error',\n+    'brace-style': 'off',\n+    '@stylistic/brace-style': ['error', '1tbs'],\n+    'lines-between-class-members': 'off',\n+    '@stylistic/lines-between-class-members': [\n+      'error',\n+      'always',\n+      {\n         exceptAfterSingleLine: true,\n-      }],\n+      },\n+    ],\n+    '@typescript-eslint/naming-convention': [\n+      'error',\n+      {\n+        selector: 'default',\n+        format: ['camelCase'],\n+        leadingUnderscore: 'allow',\n+        trailingUnderscore: 'forbid',\n+      },\n+      {\n+        selector: 'variable',\n+        format: ['camelCase', 'UPPER_CASE', 'PascalCase'],\n+        leadingUnderscore: 'allow',\n+      },\n+      {\n+        selector: 'typeLike',\n+        format: ['PascalCase'],\n+      },\n+      {\n+        selector: 'enumMember',\n+        format: ['PascalCase', 'UPPER_CASE'],\n+      },\n+      {\n+        selector: 'import',\n+        format: ['camelCase', 'PascalCase'],\n+      },\n+    ],\n \n-      // Naming\n-      '@typescript-eslint/naming-convention': ['error',\n-        { selector: 'default', format: ['camelCase'], leadingUnderscore: 'allow', trailingUnderscore: 'forbid' },\n-        { selector: 'variable', format: ['camelCase', 'UPPER_CASE', 'PascalCase'], leadingUnderscore: 'allow' },\n-        { selector: 'typeLike', format: ['PascalCase'] },\n-        { selector: 'enumMember', format: ['PascalCase', 'UPPER_CASE'] },\n-        { selector: 'import', format: ['camelCase', 'PascalCase'] },\n-      ],\n-\n-      // Imports\n-      'import/order': ['error', {\n-        groups: ['builtin', 'external', 'internal', 'parent', 'sibling', 'index', 'object', 'type'],\n+    // Import organization\n+    'import/order': [\n+      'error',\n+      {\n+        groups: [\n+          'builtin',\n+          'external',\n+          'internal',\n+          'parent',\n+          'sibling',\n+          'index',\n+          'object',\n+          'type',\n+        ],\n         'newlines-between': 'always',\n-        alphabetize: { order: 'asc', caseInsensitive: true },\n-      }],\n-      'import/no-duplicates': 'error',\n-      'import/no-extraneous-dependencies': ['error', {\n+        alphabetize: {\n+          order: 'asc',\n+          caseInsensitive: true,\n+        },\n+      },\n+    ],\n+    'import/no-duplicates': 'error',\n+    'import/no-extraneous-dependencies': [\n+      'error',\n+      {\n         devDependencies: [\n-          '**/*.{test,spec}.ts',\n+          '**/*.test.ts',\n+          '**/*.spec.ts',\n           '**/__tests__/**',\n-          '**/vitest.config.{ts,js,cjs,mjs}',\n-          '**/jest.config.{ts,js,cjs,mjs}',\n+          '**/vitest.config.ts',\n           '**/scripts/**',\n-          '**/*.config.{ts,js,cjs,mjs}',\n         ],\n-      }],\n-      'import/prefer-default-export': 'off',\n-      'import/no-default-export': 'error',\n-      'import/extensions': ['error', 'ignorePackages', {\n-        ts: 'never', tsx: 'never', js: 'never', mjs: 'never', cjs: 'never',\n-      }],\n+      },\n+    ],\n+    'import/prefer-default-export': 'off',\n+    'import/no-default-export': 'error',\n \n-      // Unicorn\n-      'unicorn/prevent-abbreviations': ['error', {\n-        allowList: { args: true, env: true, params: true, props: true, Props: true, ref: true, Ref: true },\n-      }],\n-      'unicorn/filename-case': ['error', { cases: { kebabCase: true, pascalCase: true } }],\n-      'unicorn/no-null': 'off',\n-      'unicorn/prefer-module': 'off',\n-      'unicorn/prefer-top-level-await': 'off',\n+    // Unicorn overrides\n+    'unicorn/prevent-abbreviations': [\n+      'error',\n+      {\n+        allowList: {\n+          args: true,\n+          env: true,\n+          params: true,\n+          props: true,\n+          Props: true,\n+          ref: true,\n+          Ref: true,\n+        },\n+      },\n+    ],\n+    'unicorn/filename-case': [\n+      'error',\n+      {\n+        cases: {\n+          kebabCase: true,\n+          pascalCase: true,\n+        },\n+      },\n+    ],\n+    'unicorn/no-null': 'off',\n+    'unicorn/prefer-module': 'off',\n+    'unicorn/prefer-top-level-await': 'off',\n \n-      // Security\n-      'security/detect-object-injection': 'off',\n-      'security/detect-non-literal-fs-filename': 'off',\n+    // Security\n+    'security/detect-object-injection': 'off',\n+    'security/detect-non-literal-fs-filename': 'off',\n \n-      // Sonar\n-      'sonarjs/cognitive-complexity': ['error', 15],\n-      'sonarjs/no-duplicate-string': ['error', { threshold: 5 }],\n+    // SonarJS\n+    'sonarjs/cognitive-complexity': ['error', 15],\n+    'sonarjs/no-duplicate-string': ['error', { threshold: 5 }],\n \n-      // Quality\n-      'no-console': ['warn', { allow: ['warn', 'error', 'info', 'debug'] }],\n-      'no-debugger': 'error',\n-      'no-alert': 'error',\n-      'no-var': 'error',\n-      'prefer-const': 'error',\n-      'prefer-arrow-callback': 'error',\n-      'prefer-template': 'error',\n-      'prefer-destructuring': ['error', { array: false, object: true }],\n-      'no-nested-ternary': 'error',\n-      'no-unneeded-ternary': 'error',\n-      'no-param-reassign': ['error', {\n+    // General code quality\n+    'no-console': [\n+      'warn',\n+      {\n+        allow: ['warn', 'error', 'info', 'debug'],\n+      },\n+    ],\n+    'no-debugger': 'error',\n+    'no-alert': 'error',\n+    'no-var': 'error',\n+    'prefer-const': 'error',\n+    'prefer-arrow-callback': 'error',\n+    'prefer-template': 'error',\n+    'prefer-destructuring': [\n+      'error',\n+      {\n+        array: false,\n+        object: true,\n+      },\n+    ],\n+    'no-nested-ternary': 'error',\n+    'no-unneeded-ternary': 'error',\n+    'no-param-reassign': [\n+      'error',\n+      {\n         props: true,\n-        ignorePropertyModificationsFor: ['acc', 'accumulator', 'draft', 'state'],\n-      }],\n-      eqeqeq: ['error', 'always'],\n-      curly: ['error', 'all'],\n+        ignorePropertyModificationsFor: [\n+          'acc',\n+          'accumulator',\n+          'draft',\n+          'state',\n+        ],\n+      },\n+    ],\n+    eqeqeq: ['error', 'always'],\n+    curly: 'off', // Disabled to allow @stylistic/ts/curly\n+    '@stylistic/curly': ['error', 'all'],\n \n-      // Complexity\n-      complexity: ['error', 10],\n-      'max-depth': ['error', 4],\n-      'max-lines': ['error', { max: 400, skipBlankLines: true, skipComments: true }],\n-      'max-lines-per-function': ['error', { max: 80, skipBlankLines: true, skipComments: true }],\n-      'max-params': ['error', 4],\n+    // Complexity limits\n+    complexity: ['error', 10],\n+    'max-depth': ['error', 4],\n+    'max-lines': [\n+      'error',\n+      {\n+        max: 400,\n+        skipBlankLines: true,\n+        skipComments: true,\n+      },\n+    ],\n+    'max-lines-per-function': [\n+      'error',\n+      {\n+        max: 80,\n+        skipBlankLines: true,\n+        skipComments: true,\n+      },\n+    ],\n+    'max-params': ['error', 4],\n \n-      // Comments\n-      'spaced-comment': ['error', 'always', { markers: ['/'] }],\n+    // Comments\n+    'spaced-comment': [\n+      'error',\n+      'always',\n+      {\n+        markers: ['/'],\n+      },\n+    ],\n+  },\n+  settings: {\n+    'import/resolver': {\n+      typescript: {\n+        alwaysTryTypes: true,\n+        project: ['./tsconfig.json', './packages/*/tsconfig.json'],\n+      },\n+      node: true,\n     },\n   },\n-  // Vitest-specific override\n-  {\n-    files: ['**/*.{test,spec}.ts', '**/__tests__/**/*.ts'],\n-    languageOptions: {\n-      env: { 'vitest/globals': true },\n+  overrides: [\n+    {\n+      files: ['*.test.ts', '*.spec.ts', '**/__tests__/**/*.ts'],\n+      rules: {\n+        '@typescript-eslint/no-explicit-any': 'off',\n+        '@typescript-eslint/no-unsafe-assignment': 'off',\n+        '@typescript-eslint/no-unsafe-member-access': 'off',\n+        'sonarjs/no-duplicate-string': 'off',\n+        'max-lines-per-function': 'off',\n+      },\n     },\n-    plugins: { vitest },\n-    rules: {\n-      '@typescript-eslint/no-explicit-any': 'off',\n-      '@typescript-eslint/no-unsafe-assignment': 'off',\n-      '@typescript-eslint/no-unsafe-member-access': 'off',\n-      'sonarjs/no-duplicate-string': 'off',\n-      'max-lines-per-function': 'off',\n+    {\n+      files: ['*.config.ts', '*.config.js', '*.config.cjs'],\n+      rules: {\n+        'import/no-default-export': 'off',\n+      },\n     },\n-  },\n-  // Config files override\n-  {\n-    files: ['*.config.{ts,js,cjs,mjs}'],\n-    rules: { 'import/no-default-export': 'off' },\n-  },\n-];\n+  ],\n+  ignorePatterns: [\n+    'dist',\n+    'build',\n+    'node_modules',\n+    'coverage',\n+    '*.d.ts',\n+    '*.min.js',\n+  ],\n+};\n"
                },
                {
                    "date": 1760738393522,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -24,8 +24,9 @@\n     'plugin:unicorn/recommended',\n     'prettier',\n   ],\n   plugins: [\n+    // '@typescript-eslint' is already included by 'airbnb-typescript'\n     '@stylistic/eslint-plugin',\n     'import',\n     'promise',\n     'security',\n"
                },
                {
                    "date": 1760738426343,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,291 +0,0 @@\n-module.exports = {\n-  root: true,\n-  env: {\n-    node: true,\n-    es2022: true,\n-  },\n-  parser: '@typescript-eslint/parser',\n-  parserOptions: {\n-    ecmaVersion: 2022,\n-    sourceType: 'module',\n-    project: ['./tsconfig.json', './packages/*/tsconfig.json'],\n-    tsconfigRootDir: __dirname,\n-  },\n-  extends: [\n-    'airbnb-base',\n-    'airbnb-typescript/base',\n-    'plugin:@typescript-eslint/strict-type-checked',\n-    'plugin:@stylistic/recommended-legacy',\n-    'plugin:import/recommended',\n-    'plugin:import/typescript',\n-    'plugin:promise/recommended',\n-    'plugin:security/recommended-legacy',\n-    'plugin:sonarjs/recommended',\n-    'plugin:unicorn/recommended',\n-    'prettier',\n-  ],\n-  plugins: [\n-    // '@typescript-eslint' is already included by 'airbnb-typescript'\n-    '@stylistic/eslint-plugin',\n-    'import',\n-    'promise',\n-    'security',\n-    'sonarjs',\n-    'unicorn',\n-    'prettier',\n-  ],\n-  rules: {\n-    // Prettier integration\n-    'prettier/prettier': 'error',\n-\n-    // TypeScript specific\n-    '@typescript-eslint/explicit-function-return-type': [\n-      'error',\n-      {\n-        allowExpressions: true,\n-        allowTypedFunctionExpressions: true,\n-        allowHigherOrderFunctions: true,\n-      },\n-    ],\n-    '@typescript-eslint/explicit-module-boundary-types': 'error',\n-    '@typescript-eslint/no-explicit-any': 'error',\n-    '@typescript-eslint/only-throw-error': 'error',\n-    '@typescript-eslint/no-unused-vars': [\n-      'error',\n-      {\n-        argsIgnorePattern: '^_',\n-        varsIgnorePattern: '^_',\n-        caughtErrorsIgnorePattern: '^_',\n-      },\n-    ],\n-    '@typescript-eslint/consistent-type-imports': [\n-      'error',\n-      {\n-        prefer: 'type-imports',\n-        fixStyle: 'separate-type-imports',\n-      },\n-    ],\n-    '@typescript-eslint/consistent-type-exports': [\n-      'error',\n-      {\n-        fixMixedExportsWithInlineTypeSpecifier: true,\n-      },\n-    ],\n-    '@typescript-eslint/no-floating-promises': 'error',\n-    '@typescript-eslint/no-misused-promises': 'error',\n-    '@typescript-eslint/await-thenable': 'error',\n-    '@typescript-eslint/promise-function-async': 'error',\n-    'brace-style': 'off',\n-    '@stylistic/brace-style': ['error', '1tbs'],\n-    'lines-between-class-members': 'off',\n-    '@stylistic/lines-between-class-members': [\n-      'error',\n-      'always',\n-      {\n-        exceptAfterSingleLine: true,\n-      },\n-    ],\n-    '@typescript-eslint/naming-convention': [\n-      'error',\n-      {\n-        selector: 'default',\n-        format: ['camelCase'],\n-        leadingUnderscore: 'allow',\n-        trailingUnderscore: 'forbid',\n-      },\n-      {\n-        selector: 'variable',\n-        format: ['camelCase', 'UPPER_CASE', 'PascalCase'],\n-        leadingUnderscore: 'allow',\n-      },\n-      {\n-        selector: 'typeLike',\n-        format: ['PascalCase'],\n-      },\n-      {\n-        selector: 'enumMember',\n-        format: ['PascalCase', 'UPPER_CASE'],\n-      },\n-      {\n-        selector: 'import',\n-        format: ['camelCase', 'PascalCase'],\n-      },\n-    ],\n-\n-    // Import organization\n-    'import/order': [\n-      'error',\n-      {\n-        groups: [\n-          'builtin',\n-          'external',\n-          'internal',\n-          'parent',\n-          'sibling',\n-          'index',\n-          'object',\n-          'type',\n-        ],\n-        'newlines-between': 'always',\n-        alphabetize: {\n-          order: 'asc',\n-          caseInsensitive: true,\n-        },\n-      },\n-    ],\n-    'import/no-duplicates': 'error',\n-    'import/no-extraneous-dependencies': [\n-      'error',\n-      {\n-        devDependencies: [\n-          '**/*.test.ts',\n-          '**/*.spec.ts',\n-          '**/__tests__/**',\n-          '**/vitest.config.ts',\n-          '**/scripts/**',\n-        ],\n-      },\n-    ],\n-    'import/prefer-default-export': 'off',\n-    'import/no-default-export': 'error',\n-\n-    // Unicorn overrides\n-    'unicorn/prevent-abbreviations': [\n-      'error',\n-      {\n-        allowList: {\n-          args: true,\n-          env: true,\n-          params: true,\n-          props: true,\n-          Props: true,\n-          ref: true,\n-          Ref: true,\n-        },\n-      },\n-    ],\n-    'unicorn/filename-case': [\n-      'error',\n-      {\n-        cases: {\n-          kebabCase: true,\n-          pascalCase: true,\n-        },\n-      },\n-    ],\n-    'unicorn/no-null': 'off',\n-    'unicorn/prefer-module': 'off',\n-    'unicorn/prefer-top-level-await': 'off',\n-\n-    // Security\n-    'security/detect-object-injection': 'off',\n-    'security/detect-non-literal-fs-filename': 'off',\n-\n-    // SonarJS\n-    'sonarjs/cognitive-complexity': ['error', 15],\n-    'sonarjs/no-duplicate-string': ['error', { threshold: 5 }],\n-\n-    // General code quality\n-    'no-console': [\n-      'warn',\n-      {\n-        allow: ['warn', 'error', 'info', 'debug'],\n-      },\n-    ],\n-    'no-debugger': 'error',\n-    'no-alert': 'error',\n-    'no-var': 'error',\n-    'prefer-const': 'error',\n-    'prefer-arrow-callback': 'error',\n-    'prefer-template': 'error',\n-    'prefer-destructuring': [\n-      'error',\n-      {\n-        array: false,\n-        object: true,\n-      },\n-    ],\n-    'no-nested-ternary': 'error',\n-    'no-unneeded-ternary': 'error',\n-    'no-param-reassign': [\n-      'error',\n-      {\n-        props: true,\n-        ignorePropertyModificationsFor: [\n-          'acc',\n-          'accumulator',\n-          'draft',\n-          'state',\n-        ],\n-      },\n-    ],\n-    eqeqeq: ['error', 'always'],\n-    curly: 'off', // Disabled to allow @stylistic/ts/curly\n-    '@stylistic/curly': ['error', 'all'],\n-\n-    // Complexity limits\n-    complexity: ['error', 10],\n-    'max-depth': ['error', 4],\n-    'max-lines': [\n-      'error',\n-      {\n-        max: 400,\n-        skipBlankLines: true,\n-        skipComments: true,\n-      },\n-    ],\n-    'max-lines-per-function': [\n-      'error',\n-      {\n-        max: 80,\n-        skipBlankLines: true,\n-        skipComments: true,\n-      },\n-    ],\n-    'max-params': ['error', 4],\n-\n-    // Comments\n-    'spaced-comment': [\n-      'error',\n-      'always',\n-      {\n-        markers: ['/'],\n-      },\n-    ],\n-  },\n-  settings: {\n-    'import/resolver': {\n-      typescript: {\n-        alwaysTryTypes: true,\n-        project: ['./tsconfig.json', './packages/*/tsconfig.json'],\n-      },\n-      node: true,\n-    },\n-  },\n-  overrides: [\n-    {\n-      files: ['*.test.ts', '*.spec.ts', '**/__tests__/**/*.ts'],\n-      rules: {\n-        '@typescript-eslint/no-explicit-any': 'off',\n-        '@typescript-eslint/no-unsafe-assignment': 'off',\n-        '@typescript-eslint/no-unsafe-member-access': 'off',\n-        'sonarjs/no-duplicate-string': 'off',\n-        'max-lines-per-function': 'off',\n-      },\n-    },\n-    {\n-      files: ['*.config.ts', '*.config.js', '*.config.cjs'],\n-      rules: {\n-        'import/no-default-export': 'off',\n-      },\n-    },\n-  ],\n-  ignorePatterns: [\n-    'dist',\n-    'build',\n-    'node_modules',\n-    'coverage',\n-    '*.d.ts',\n-    '*.min.js',\n-  ],\n-};\n\\ No newline at end of file\n"
                },
                {
                    "date": 1760738435580,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,1 +1,290 @@\n+module.exports = {\n+  root: true,\n+  env: {\n+    node: true,\n+    es2022: true,\n+  },\n+  parser: '@typescript-eslint/parser',\n+  parserOptions: {\n+    ecmaVersion: 2022,\n+    sourceType: 'module',\n+    project: ['./tsconfig.json', './packages/*/tsconfig.json'],\n+    tsconfigRootDir: __dirname,\n+  },\n+  extends: [\n+    'airbnb-base',\n+    'airbnb-typescript/base',\n+    'plugin:@typescript-eslint/strict-type-checked',\n+    'plugin:@stylistic/recommended-legacy',\n+    'plugin:import/recommended',\n+    'plugin:import/typescript',\n+    'plugin:promise/recommended',\n+    'plugin:security/recommended-legacy',\n+    'plugin:sonarjs/recommended',\n+    'plugin:unicorn/recommended',\n+    'prettier',\n+  ],\n+  plugins: [\n+    '@stylistic/eslint-plugin',\n+    'import',\n+    'promise',\n+    'security',\n+    'sonarjs',\n+    'unicorn',\n+    'prettier',\n+  ],\n+  rules: {\n+    // Prettier integration\n+    'prettier/prettier': 'error',\n \n+    // TypeScript specific\n+    '@typescript-eslint/explicit-function-return-type': [\n+      'error',\n+      {\n+        allowExpressions: true,\n+        allowTypedFunctionExpressions: true,\n+        allowHigherOrderFunctions: true,\n+      },\n+    ],\n+    '@typescript-eslint/explicit-module-boundary-types': 'error',\n+    '@typescript-eslint/no-explicit-any': 'error',\n+    '@typescript-eslint/only-throw-error': 'error',\n+    '@typescript-eslint/no-unused-vars': [\n+      'error',\n+      {\n+        argsIgnorePattern: '^_',\n+        varsIgnorePattern: '^_',\n+        caughtErrorsIgnorePattern: '^_',\n+      },\n+    ],\n+    '@typescript-eslint/consistent-type-imports': [\n+      'error',\n+      {\n+        prefer: 'type-imports',\n+        fixStyle: 'separate-type-imports',\n+      },\n+    ],\n+    '@typescript-eslint/consistent-type-exports': [\n+      'error',\n+      {\n+        fixMixedExportsWithInlineTypeSpecifier: true,\n+      },\n+    ],\n+    '@typescript-eslint/no-floating-promises': 'error',\n+    '@typescript-eslint/no-misused-promises': 'error',\n+    '@typescript-eslint/await-thenable': 'error',\n+    '@typescript-eslint/promise-function-async': 'error',\n+    'brace-style': 'off',\n+    '@stylistic/brace-style': ['error', '1tbs'],\n+    'lines-between-class-members': 'off',\n+    '@stylistic/lines-between-class-members': [\n+      'error',\n+      'always',\n+      {\n+        exceptAfterSingleLine: true,\n+      },\n+    ],\n+    '@typescript-eslint/naming-convention': [\n+      'error',\n+      {\n+        selector: 'default',\n+        format: ['camelCase'],\n+        leadingUnderscore: 'allow',\n+        trailingUnderscore: 'forbid',\n+      },\n+      {\n+        selector: 'variable',\n+        format: ['camelCase', 'UPPER_CASE', 'PascalCase'],\n+        leadingUnderscore: 'allow',\n+      },\n+      {\n+        selector: 'typeLike',\n+        format: ['PascalCase'],\n+      },\n+      {\n+        selector: 'enumMember',\n+        format: ['PascalCase', 'UPPER_CASE'],\n+      },\n+      {\n+        selector: 'import',\n+        format: ['camelCase', 'PascalCase'],\n+      },\n+    ],\n+\n+    // Import organization\n+    'import/order': [\n+      'error',\n+      {\n+        groups: [\n+          'builtin',\n+          'external',\n+          'internal',\n+          'parent',\n+          'sibling',\n+          'index',\n+          'object',\n+          'type',\n+        ],\n+        'newlines-between': 'always',\n+        alphabetize: {\n+          order: 'asc',\n+          caseInsensitive: true,\n+        },\n+      },\n+    ],\n+    'import/no-duplicates': 'error',\n+    'import/no-extraneous-dependencies': [\n+      'error',\n+      {\n+        devDependencies: [\n+          '**/*.test.ts',\n+          '**/*.spec.ts',\n+          '**/__tests__/**',\n+          '**/vitest.config.ts',\n+          '**/scripts/**',\n+        ],\n+      },\n+    ],\n+    'import/prefer-default-export': 'off',\n+    'import/no-default-export': 'error',\n+\n+    // Unicorn overrides\n+    'unicorn/prevent-abbreviations': [\n+      'error',\n+      {\n+        allowList: {\n+          args: true,\n+          env: true,\n+          params: true,\n+          props: true,\n+          Props: true,\n+          ref: true,\n+          Ref: true,\n+        },\n+      },\n+    ],\n+    'unicorn/filename-case': [\n+      'error',\n+      {\n+        cases: {\n+          kebabCase: true,\n+          pascalCase: true,\n+        },\n+      },\n+    ],\n+    'unicorn/no-null': 'off',\n+    'unicorn/prefer-module': 'off',\n+    'unicorn/prefer-top-level-await': 'off',\n+\n+    // Security\n+    'security/detect-object-injection': 'off',\n+    'security/detect-non-literal-fs-filename': 'off',\n+\n+    // SonarJS\n+    'sonarjs/cognitive-complexity': ['error', 15],\n+    'sonarjs/no-duplicate-string': ['error', { threshold: 5 }],\n+\n+    // General code quality\n+    'no-console': [\n+      'warn',\n+      {\n+        allow: ['warn', 'error', 'info', 'debug'],\n+      },\n+    ],\n+    'no-debugger': 'error',\n+    'no-alert': 'error',\n+    'no-var': 'error',\n+    'prefer-const': 'error',\n+    'prefer-arrow-callback': 'error',\n+    'prefer-template': 'error',\n+    'prefer-destructuring': [\n+      'error',\n+      {\n+        array: false,\n+        object: true,\n+      },\n+    ],\n+    'no-nested-ternary': 'error',\n+    'no-unneeded-ternary': 'error',\n+    'no-param-reassign': [\n+      'error',\n+      {\n+        props: true,\n+        ignorePropertyModificationsFor: [\n+          'acc',\n+          'accumulator',\n+          'draft',\n+          'state',\n+        ],\n+      },\n+    ],\n+    eqeqeq: ['error', 'always'],\n+    curly: 'off', // Disabled to allow @stylistic/ts/curly\n+    '@stylistic/curly': ['error', 'all'],\n+\n+    // Complexity limits\n+    complexity: ['error', 10],\n+    'max-depth': ['error', 4],\n+    'max-lines': [\n+      'error',\n+      {\n+        max: 400,\n+        skipBlankLines: true,\n+        skipComments: true,\n+      },\n+    ],\n+    'max-lines-per-function': [\n+      'error',\n+      {\n+        max: 80,\n+        skipBlankLines: true,\n+        skipComments: true,\n+      },\n+    ],\n+    'max-params': ['error', 4],\n+\n+    // Comments\n+    'spaced-comment': [\n+      'error',\n+      'always',\n+      {\n+        markers: ['/'],\n+      },\n+    ],\n+  },\n+  settings: {\n+    'import/resolver': {\n+      typescript: {\n+        alwaysTryTypes: true,\n+        project: ['./tsconfig.json', './packages/*/tsconfig.json'],\n+      },\n+      node: true,\n+    },\n+  },\n+  overrides: [\n+    {\n+      files: ['*.test.ts', '*.spec.ts', '**/__tests__/**/*.ts'],\n+      rules: {\n+        '@typescript-eslint/no-explicit-any': 'off',\n+        '@typescript-eslint/no-unsafe-assignment': 'off',\n+        '@typescript-eslint/no-unsafe-member-access': 'off',\n+        'sonarjs/no-duplicate-string': 'off',\n+        'max-lines-per-function': 'off',\n+      },\n+    },\n+    {\n+      files: ['*.config.ts', '*.config.js', '*.config.cjs'],\n+      rules: {\n+        'import/no-default-export': 'off',\n+      },\n+    },\n+  ],\n+  ignorePatterns: [\n+    'dist',\n+    'build',\n+    'node_modules',\n+    'coverage',\n+    '*.d.ts',\n+    '*.min.js',\n+  ],\n+};\n"
                },
                {
                    "date": 1760738470268,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -24,9 +24,9 @@\n     'plugin:unicorn/recommended',\n     'prettier',\n   ],\n   plugins: [\n-    '@stylistic/eslint-plugin',\n+    '@typescript-eslint',\n     'import',\n     'promise',\n     'security',\n     'sonarjs',\n"
                },
                {
                    "date": 1760738501908,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,5 +1,5 @@\n-module.exports = {\n+omodule.exports = {\n   root: true,\n   env: {\n     node: true,\n     es2022: true,\n"
                },
                {
                    "date": 1760738518067,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,5 +1,5 @@\n-omodule.exports = {\n+module.exports = {\n   root: true,\n   env: {\n     node: true,\n     es2022: true,\n@@ -24,9 +24,9 @@\n     'plugin:unicorn/recommended',\n     'prettier',\n   ],\n   plugins: [\n-    '@typescript-eslint',\n+    // '@typescript-eslint' is already included by 'airbnb-typescript'\n     'import',\n     'promise',\n     'security',\n     'sonarjs',\n"
                },
                {
                    "date": 1760738661092,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -8,9 +8,9 @@\n   parserOptions: {\n     ecmaVersion: 2022,\n     sourceType: 'module',\n     project: ['./tsconfig.json', './packages/*/tsconfig.json'],\n-    tsconfigRootDir: __dirname,\n+    tsconfigRootDir: process.cwd(),\n   },\n   extends: [\n     'airbnb-base',\n     'airbnb-typescript/base',\n"
                }
            ],
            "date": 1760729834411,
            "name": "Commit-0",
            "content": "/** @type {import('eslint').Linter.Config} */odule.exports = {\n  root: true,\n  env: {\n    node: true,\n    es2022: true,\n  },\n  parser: '@typescript-eslint/parser',\n  parserOptions: {\n    ecmaVersion: 2022,\n    sourceType: 'module',\n    project: ['./tsconfig.json', './packages/*/tsconfig.json'],\n    tsconfigRootDir: __dirname,\n  },\n  extends: [\n    'airbnb-base',\n    'airbnb-typescript/base',\n    'plugin:@typescript-eslint/strict-type-checked',\n    'plugin:@typescript-eslint/stylistic-type-checked',\n    'plugin:import/recommended',\n    'plugin:import/typescript',\n    'plugin:promise/recommended',\n    'plugin:security/recommended-legacy',\n    'plugin:sonarjs/recommended',\n    'plugin:unicorn/recommended',\n    'prettier',\n  ],\n  plugins: [\n    '@typescript-eslint',\n    'import',\n    'promise',\n    'security',\n    'sonarjs',\n    'unicorn',\n    'prettier',\n  ],\n  rules: {\n    // Prettier integration\n    'prettier/prettier': 'error',\n\n    // TypeScript specific\n    '@typescript-eslint/explicit-function-return-type': [\n      'error',\n      {\n        allowExpressions: true,\n        allowTypedFunctionExpressions: true,\n        allowHigherOrderFunctions: true,\n      },\n    ],\n    '@typescript-eslint/explicit-module-boundary-types': 'error',\n    '@typescript-eslint/no-explicit-any': 'error',\n    '@typescript-eslint/no-unused-vars': [\n      'error',\n      {\n        argsIgnorePattern: '^_',\n        varsIgnorePattern: '^_',\n        caughtErrorsIgnorePattern: '^_',\n      },\n    ],\n    '@typescript-eslint/consistent-type-imports': [\n      'error',\n      {\n        prefer: 'type-imports',\n        fixStyle: 'separate-type-imports',\n      },\n    ],\n    '@typescript-eslint/consistent-type-exports': [\n      'error',\n      {\n        fixMixedExportsWithInlineTypeSpecifier: true,\n      },\n    ],\n    '@typescript-eslint/no-floating-promises': 'error',\n    '@typescript-eslint/no-misused-promises': 'error',\n    '@typescript-eslint/await-thenable': 'error',\n    '@typescript-eslint/promise-function-async': 'error',\n    '@typescript-eslint/naming-convention': [\n      'error',\n      {\n        selector: 'default',\n        format: ['camelCase'],\n        leadingUnderscore: 'allow',\n        trailingUnderscore: 'forbid',\n      },\n      {\n        selector: 'variable',\n        format: ['camelCase', 'UPPER_CASE', 'PascalCase'],\n        leadingUnderscore: 'allow',\n      },\n      {\n        selector: 'typeLike',\n        format: ['PascalCase'],\n      },\n      {\n        selector: 'enumMember',\n        format: ['PascalCase', 'UPPER_CASE'],\n      },\n      {\n        selector: 'import',\n        format: ['camelCase', 'PascalCase'],\n      },\n    ],\n\n    // Import organization\n    'import/order': [\n      'error',\n      {\n        groups: [\n          'builtin',\n          'external',\n          'internal',\n          'parent',\n          'sibling',\n          'index',\n          'object',\n          'type',\n        ],\n        'newlines-between': 'always',\n        alphabetize: {\n          order: 'asc',\n          caseInsensitive: true,\n        },\n      },\n    ],\n    'import/no-duplicates': 'error',\n    'import/no-extraneous-dependencies': [\n      'error',\n      {\n        devDependencies: [\n          '**/*.test.ts',\n          '**/*.spec.ts',\n          '**/__tests__/**',\n          '**/vitest.config.ts',\n          '**/scripts/**',\n        ],\n      },\n    ],\n    'import/prefer-default-export': 'off',\n    'import/no-default-export': 'error',\n\n    // Unicorn overrides\n    'unicorn/prevent-abbreviations': [\n      'error',\n      {\n        allowList: {\n          args: true,\n          env: true,\n          params: true,\n          props: true,\n          Props: true,\n          ref: true,\n          Ref: true,\n        },\n      },\n    ],\n    'unicorn/filename-case': [\n      'error',\n      {\n        cases: {\n          kebabCase: true,\n          pascalCase: true,\n        },\n      },\n    ],\n    'unicorn/no-null': 'off',\n    'unicorn/prefer-module': 'off',\n    'unicorn/prefer-top-level-await': 'off',\n\n    // Security\n    'security/detect-object-injection': 'off',\n    'security/detect-non-literal-fs-filename': 'off',\n\n    // SonarJS\n    'sonarjs/cognitive-complexity': ['error', 15],\n    'sonarjs/no-duplicate-string': ['error', { threshold: 5 }],\n\n    // General code quality\n    'no-console': [\n      'warn',\n      {\n        allow: ['warn', 'error', 'info', 'debug'],\n      },\n    ],\n    'no-debugger': 'error',\n    'no-alert': 'error',\n    'no-var': 'error',\n    'prefer-const': 'error',\n    'prefer-arrow-callback': 'error',\n    'prefer-template': 'error',\n    'prefer-destructuring': [\n      'error',\n      {\n        array: false,\n        object: true,\n      },\n    ],\n    'no-nested-ternary': 'error',\n    'no-unneeded-ternary': 'error',\n    'no-param-reassign': [\n      'error',\n      {\n        props: true,\n        ignorePropertyModificationsFor: [\n          'acc',\n          'accumulator',\n          'draft',\n          'state',\n        ],\n      },\n    ],\n    eqeqeq: ['error', 'always'],\n    curly: ['error', 'all'],\n    'brace-style': 'off',\n    '@typescript-eslint/brace-style': ['error', '1tbs'],\n\n    // Complexity limits\n    complexity: ['error', 10],\n    'max-depth': ['error', 4],\n    'max-lines': [\n      'error',\n      {\n        max: 400,\n        skipBlankLines: true,\n        skipComments: true,\n      },\n    ],\n    'max-lines-per-function': [\n      'error',\n      {\n        max: 80,\n        skipBlankLines: true,\n        skipComments: true,\n      },\n    ],\n    'max-params': ['error', 4],\n\n    // Comments\n    'spaced-comment': [\n      'error',\n      'always',\n      {\n        markers: ['/'],\n      },\n    ],\n  },\n  settings: {\n    'import/resolver': {\n      typescript: {\n        alwaysTryTypes: true,\n        project: ['./tsconfig.json', './packages/*/tsconfig.json'],\n      },\n      node: true,\n    },\n  },\n  overrides: [\n    {\n      files: ['*.test.ts', '*.spec.ts', '**/__tests__/**/*.ts'],\n      rules: {\n        '@typescript-eslint/no-explicit-any': 'off',\n        '@typescript-eslint/no-unsafe-assignment': 'off',\n        '@typescript-eslint/no-unsafe-member-access': 'off',\n        'sonarjs/no-duplicate-string': 'off',\n        'max-lines-per-function': 'off',\n      },\n    },\n    {\n      files: ['*.config.ts', '*.config.js', '*.config.cjs'],\n      rules: {\n        'import/no-default-export': 'off',\n      },\n    },\n  ],\n  ignorePatterns: [\n    'dist',\n    'build',\n    'node_modules',\n    'coverage',\n    '*.d.ts',\n    '*.min.js',\n  ],\n};"
        }
    ]
}