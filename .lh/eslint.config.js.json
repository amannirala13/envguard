{
    "sourceFile": "eslint.config.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1760734267831,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1760734267831,
            "name": "Commit-0",
            "content": "// eslint.config.js\nimport path from 'node:path';\n\n// Plugins\nimport tseslint from '@typescript-eslint/eslint-plugin';\nimport tsparser from '@typescript-eslint/parser';\nimport stylistic from '@stylistic/eslint-plugin';\nimport importPlugin from 'eslint-plugin-import';\nimport promise from 'eslint-plugin-promise';\nimport security from 'eslint-plugin-security';\nimport sonarjs from 'eslint-plugin-sonarjs';\nimport unicorn from 'eslint-plugin-unicorn';\nimport vitest from 'eslint-plugin-vitest';\nimport prettier from 'eslint-plugin-prettier';\n\n// Configs\nimport airbnbBase from 'eslint-config-airbnb-base';\nimport airbnbTsBase from 'eslint-config-airbnb-typescript/base';\nimport prettierConfig from 'eslint-config-prettier';\n\n// Utility to merge configs\nconst merge = (...configs) => configs.flat();\n\nexport default [\n  {\n    ignores: [\n      'dist',\n      'build',\n      'node_modules',\n      'coverage',\n      '*.d.ts',\n      '*.min.js',\n      '**/*.gen.ts',\n      '**/*.generated.ts',\n      '**/__generated__/**',\n      '.turbo',\n      '.next',\n      '.vite',\n      '.cache',\n    ],\n  },\n  {\n    files: ['**/*.{ts,tsx,js,jsx}'],\n    languageOptions: {\n      parser: tsparser,\n      parserOptions: {\n        ecmaVersion: 2022,\n        sourceType: 'module',\n        project: ['./tsconfig.json', './packages/*/tsconfig.json'],\n        tsconfigRootDir: path.resolve(),\n        projectService: true,\n      },\n      globals: {\n        NodeJS: true,\n      },\n    },\n    plugins: {\n      '@typescript-eslint': tseslint,\n      '@stylistic': stylistic,\n      import: importPlugin,\n      promise,\n      security,\n      sonarjs,\n      unicorn,\n      vitest,\n      prettier,\n    },\n    rules: {\n      // Prettier\n      'prettier/prettier': 'error',\n\n      // TS\n      '@typescript-eslint/explicit-function-return-type': ['error', {\n        allowExpressions: true,\n        allowTypedFunctionExpressions: true,\n        allowHigherOrderFunctions: true,\n      }],\n      '@typescript-eslint/explicit-module-boundary-types': 'warn',\n      '@typescript-eslint/no-explicit-any': 'error',\n      '@typescript-eslint/only-throw-error': 'error',\n      '@typescript-eslint/no-unused-vars': ['error', {\n        argsIgnorePattern: '^_',\n        varsIgnorePattern: '^_',\n        caughtErrorsIgnorePattern: '^_',\n      }],\n      '@typescript-eslint/consistent-type-imports': ['error', {\n        prefer: 'type-imports',\n        fixStyle: 'separate-type-imports',\n      }],\n      '@typescript-eslint/consistent-type-exports': ['error', {\n        fixMixedExportsWithInlineTypeSpecifier: true,\n      }],\n      '@typescript-eslint/no-floating-promises': ['error', { ignoreVoid: true, ignoreIIFE: true }],\n      '@typescript-eslint/no-misused-promises': ['error', { checksVoidReturn: { attributes: false } }],\n      '@typescript-eslint/await-thenable': 'error',\n      '@typescript-eslint/promise-function-async': 'error',\n\n      // Style (brace style left to Prettier)\n      'brace-style': 'off',\n      'lines-between-class-members': 'off',\n      '@typescript-eslint/lines-between-class-members': ['error', 'always', {\n        exceptAfterSingleLine: true,\n      }],\n\n      // Naming\n      '@typescript-eslint/naming-convention': ['error',\n        { selector: 'default', format: ['camelCase'], leadingUnderscore: 'allow', trailingUnderscore: 'forbid' },\n        { selector: 'variable', format: ['camelCase', 'UPPER_CASE', 'PascalCase'], leadingUnderscore: 'allow' },\n        { selector: 'typeLike', format: ['PascalCase'] },\n        { selector: 'enumMember', format: ['PascalCase', 'UPPER_CASE'] },\n        { selector: 'import', format: ['camelCase', 'PascalCase'] },\n      ],\n\n      // Imports\n      'import/order': ['error', {\n        groups: ['builtin', 'external', 'internal', 'parent', 'sibling', 'index', 'object', 'type'],\n        'newlines-between': 'always',\n        alphabetize: { order: 'asc', caseInsensitive: true },\n      }],\n      'import/no-duplicates': 'error',\n      'import/no-extraneous-dependencies': ['error', {\n        devDependencies: [\n          '**/*.{test,spec}.ts',\n          '**/__tests__/**',\n          '**/vitest.config.{ts,js,cjs,mjs}',\n          '**/jest.config.{ts,js,cjs,mjs}',\n          '**/scripts/**',\n          '**/*.config.{ts,js,cjs,mjs}',\n        ],\n      }],\n      'import/prefer-default-export': 'off',\n      'import/no-default-export': 'error',\n      'import/extensions': ['error', 'ignorePackages', {\n        ts: 'never', tsx: 'never', js: 'never', mjs: 'never', cjs: 'never',\n      }],\n\n      // Unicorn\n      'unicorn/prevent-abbreviations': ['error', {\n        allowList: { args: true, env: true, params: true, props: true, Props: true, ref: true, Ref: true },\n      }],\n      'unicorn/filename-case': ['error', { cases: { kebabCase: true, pascalCase: true } }],\n      'unicorn/no-null': 'off',\n      'unicorn/prefer-module': 'off',\n      'unicorn/prefer-top-level-await': 'off',\n\n      // Security\n      'security/detect-object-injection': 'off',\n      'security/detect-non-literal-fs-filename': 'off',\n\n      // Sonar\n      'sonarjs/cognitive-complexity': ['error', 15],\n      'sonarjs/no-duplicate-string': ['error', { threshold: 5 }],\n\n      // Quality\n      'no-console': ['warn', { allow: ['warn', 'error', 'info', 'debug'] }],\n      'no-debugger': 'error',\n      'no-alert': 'error',\n      'no-var': 'error',\n      'prefer-const': 'error',\n      'prefer-arrow-callback': 'error',\n      'prefer-template': 'error',\n      'prefer-destructuring': ['error', { array: false, object: true }],\n      'no-nested-ternary': 'error',\n      'no-unneeded-ternary': 'error',\n      'no-param-reassign': ['error', {\n        props: true,\n        ignorePropertyModificationsFor: ['acc', 'accumulator', 'draft', 'state'],\n      }],\n      eqeqeq: ['error', 'always'],\n      curly: ['error', 'all'],\n\n      // Complexity\n      complexity: ['error', 10],\n      'max-depth': ['error', 4],\n      'max-lines': ['error', { max: 400, skipBlankLines: true, skipComments: true }],\n      'max-lines-per-function': ['error', { max: 80, skipBlankLines: true, skipComments: true }],\n      'max-params': ['error', 4],\n\n      // Comments\n      'spaced-comment': ['error', 'always', { markers: ['/'] }],\n    },\n  },\n  // Vitest-specific override\n  {\n    files: ['**/*.{test,spec}.ts', '**/__tests__/**/*.ts'],\n    languageOptions: {\n      env: { 'vitest/globals': true },\n    },\n    plugins: { vitest },\n    rules: {\n      '@typescript-eslint/no-explicit-any': 'off',\n      '@typescript-eslint/no-unsafe-assignment': 'off',\n      '@typescript-eslint/no-unsafe-member-access': 'off',\n      'sonarjs/no-duplicate-string': 'off',\n      'max-lines-per-function': 'off',\n    },\n  },\n  // Config files override\n  {\n    files: ['*.config.{ts,js,cjs,mjs}'],\n    rules: { 'import/no-default-export': 'off' },\n  },\n];\n\n\n"
        }
    ]
}