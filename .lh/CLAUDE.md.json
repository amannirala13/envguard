{
    "sourceFile": "CLAUDE.md",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1760747370748,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1760747370748,
            "name": "Commit-0",
            "content": "# CLAUDE.md\n\nThis file provides guidance to Claude Code (claude.ai/code) when working with code in this repository.\n\n## Project Overview\n\nEnvGuard is a **local-first secret management tool for developers** that stores secrets in the OS keychain (macOS Keychain, Windows Credential Manager, Linux Secret Service) and uses safe placeholders in Git repositories. The project is built as a TypeScript monorepo using pnpm workspaces.\n\n## Architecture\n\n### Monorepo Structure\n\nThis is a **pnpm workspace monorepo** with three main packages:\n\n- **`packages/cli/`** - Main EnvGuard CLI application (`@envguard/cli`)\n  - Contains the command-line interface and core logic\n  - Binary entry point: `envguard` command\n  - Core modules for keychain integration, secret storage, validation, and Git integration\n\n- **`packages/runner-node/`** - Node.js runtime integration (`@envguard/runner-node`)\n  - Provides runtime secret injection for Node.js applications\n  - Used as `envguard-node app.js` or via Node.js preload module\n\n- **`packages/runner-python/`** - Python runtime integration (planned)\n  - Python package for secret injection in Python applications\n\n### Core Concepts\n\n**Secret Storage Flow:**\n\n1. Secrets are defined in `.env.tpl` (JSON schema with validators)\n2. Actual values are stored via `envguard set` â†’ OS keychain\n3. Safe placeholders are written to `.env.redacted` (Git-safe format: `redacted:KEY:hash`)\n4. Runtime runners resolve placeholders from keychain when applications start\n\n**File Types:**\n\n- `.env.tpl` - Committed schema definition with validators (JSON)\n- `.env.redacted` - Committed placeholder file (safe for Git)\n- `.envguard/` - Local config directory (gitignored)\n- `.env` - Never created by EnvGuard (to avoid confusion)\n\n### Development Status\n\n**Current Phase:** Foundation (Week 1 of 4-week roadmap)\n\n- Project structure: âœ… Complete\n- Configuration: âœ… Complete\n- Keychain integration: ðŸš§ Not yet implemented\n- CLI commands: ðŸš§ Not yet implemented\n\nSee `.plan/implementation-guidebook.md` for the complete 4-week development roadmap with detailed implementation instructions for each module.\n\n## Common Commands\n\n### Development Workflow\n\n```bash\n# Install all dependencies (from root)\npnpm install\n\n# Build all packages\npnpm build\n\n# Run type checking across all packages\npnpm typecheck\n\n# Run tests across all packages\npnpm test\n\n# Run tests with coverage\npnpm test:coverage\n\n# Run tests in watch mode\npnpm test:watch\n\n# Run CLI in development mode (auto-reload)\npnpm dev\n\n# Lint all code\npnpm lint\n\n# Auto-fix linting issues\npnpm lint:fix\n\n# Format code with Prettier\npnpm format\n\n# Check formatting without changes\npnpm format:check\n\n# Run full validation (lint + typecheck + test)\npnpm validate\n\n# Clean all build artifacts and node_modules\npnpm clean\n```\n\n### Working on Specific Packages\n\n```bash\n# Run commands for a specific package\npnpm --filter @envguard/cli build\npnpm --filter @envguard/runner-node test\n\n# Run tests for CLI package only\ncd packages/cli && pnpm test\n\n# Watch mode for CLI development\ncd packages/cli && pnpm dev\n```\n\n### Testing\n\n```bash\n# Run all tests\npnpm test\n\n# Run tests for a single file\npnpm --filter @envguard/cli test src/core/keychain.test.ts\n\n# Run with coverage thresholds (80% required)\npnpm test:coverage\n\n# Watch mode\npnpm test:watch\n```\n\n## Build System\n\n### TypeScript Configuration\n\n- **`tsconfig.base.json`** - Shared base configuration with strict type checking\n  - Target: ES2022, CommonJS modules\n  - Strict mode enabled with comprehensive checks (`noUnusedLocals`, `noImplicitReturns`, etc.)\n  - Each package extends this with `\"extends\": \"../../tsconfig.base.json\"`\n\n### Build Tool (tsup)\n\nBoth `cli` and `runner-node` use **tsup** for building:\n\n- CLI builds: ESM format with CLI entry point\n- Runner-node builds: Both ESM and CJS formats for compatibility\n- Generates TypeScript declarations (`.d.ts`)\n- Source maps enabled for debugging\n\nBuild configs are in `packages/*/tsup.config.ts`\n\n### Testing (Vitest)\n\n- **Test framework:** Vitest with Node environment\n- **Coverage:** v8 provider with 80% threshold (lines, functions, branches, statements)\n- **Test files:** `**/*.test.ts`, `**/*.spec.ts`, `**/__tests__/**/*.test.ts`\n- **Config:** `vitest.config.ts` (root) + `vitest.workspace.ts` (workspace config)\n\n## Code Quality Tools\n\n### ESLint\n\n- Based on Airbnb TypeScript config\n- Additional plugins: prettier, security, sonarjs, unicorn, promise\n- Config: `.eslintrc.cjs`\n\n### Prettier\n\n- Single quotes, 2-space tabs, semicolons\n- Config: `.prettierrc.json`\n\n### Git Hooks (Husky)\n\n- Pre-commit: `lint-staged` (currently not initialized due to no Git repo)\n- Commitlint: Conventional commits format\n\n## Key Implementation Notes\n\n### Security Model (Not Yet Implemented)\n\nWhen implementing security features:\n\n- Secrets must **never** touch disk in plaintext\n- Use OS keychain APIs (keytar or similar library)\n- Placeholders use format: `redacted:KEY_NAME:short_hash`\n- All operations should be defensive (validate inputs, sanitize outputs)\n\n### CLI Command Structure (Planned)\n\nWhen implementing CLI commands:\n\n- Use Commander.js framework\n- Commands should be in `packages/cli/src/commands/`\n- Core logic should be in `packages/cli/src/core/`\n- Follow the command structure outlined in README.md\n\n### Validators (To Be Implemented)\n\nThe `.env.tpl` schema supports validators:\n\n- `url` - Valid URL format\n- `email` - Valid email format\n- `length` - String length constraints (minLength, maxLength)\n- `regex` - Custom regex patterns\n- `number` - Numeric range validation\n\n### Cross-Platform Considerations\n\nWhen implementing keychain integration:\n\n- macOS: Use Keychain Access API\n- Windows: Use Credential Manager\n- Linux: Use Secret Service (libsecret)\n- Must handle platform detection and fallbacks\n\n## Package Dependencies\n\n### CLI Package (`@envguard/cli`)\n\n- `commander` - CLI framework\n- `chalk` - Terminal colors\n- `inquirer` - Interactive prompts\n- `ora` - Loading spinners\n- `conf` - Config management\n- `dotenv` - Env file parsing\n\n### Runner-Node Package (`@envguard/runner-node`)\n\n- `dotenv` - Env file parsing (minimal dependencies)\n\n## Important Patterns\n\n### Workspace Commands\n\nAlways use `pnpm -r` (recursive) or `pnpm --filter` to run commands across packages:\n\n```bash\npnpm -r build          # Build all packages\npnpm -r --stream test  # Stream output from all package tests\n```\n\n### Type Safety\n\nThe codebase uses **strict TypeScript** with comprehensive checks:\n\n- All functions must have explicit return types when not obvious\n- No implicit `any` types allowed\n- Handle all nullable cases (`noUncheckedIndexedAccess`)\n- Use `exactOptionalPropertyTypes` for precise optional property handling\n\n### Module Resolution\n\n- CommonJS modules (`module: \"commonjs\"`)\n- Node module resolution\n- ESM interop enabled for modern npm packages\n\n## Reference Documentation\n\n- **Implementation Guide:** `.plan/implementation-guidebook.md` - Complete 28-day roadmap with detailed tasks\n- **README:** `README.md` - User-facing documentation and project overview\n- **Package Manager:** pnpm â‰¥8.0.0 required\n- **Node Version:** â‰¥18.0.0 required\n"
        }
    ]
}