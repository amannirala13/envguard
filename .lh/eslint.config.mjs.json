{
    "sourceFile": "eslint.config.mjs",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 39,
            "patches": [
                {
                    "date": 1760734274211,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1760734400906,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,28 +1,31 @@\n-// eslint.config.js\n+// eslint.config.mjs\n import path from 'node:path';\n+import { fileURLToPath } from 'node:url';\n+import { createRequire } from 'node:module';\n+import { FlatCompat } from '@eslint/eslintrc';\n \n-// Plugins\n import tseslint from '@typescript-eslint/eslint-plugin';\n import tsparser from '@typescript-eslint/parser';\n-import stylistic from '@stylistic/eslint-plugin';\n import importPlugin from 'eslint-plugin-import';\n import promise from 'eslint-plugin-promise';\n import security from 'eslint-plugin-security';\n import sonarjs from 'eslint-plugin-sonarjs';\n import unicorn from 'eslint-plugin-unicorn';\n import vitest from 'eslint-plugin-vitest';\n import prettier from 'eslint-plugin-prettier';\n \n-// Configs\n-import airbnbBase from 'eslint-config-airbnb-base';\n-import airbnbTsBase from 'eslint-config-airbnb-typescript/base';\n-import prettierConfig from 'eslint-config-prettier';\n+const __dirname = path.dirname(fileURLToPath(import.meta.url));\n+const require = createRequire(import.meta.url);\n \n-// Utility to merge configs\n-const merge = (...configs) => configs.flat();\n+const compat = new FlatCompat({\n+  baseDirectory: __dirname,\n+  // make plugin/extends resolution behave like legacy\n+  resolvePluginsRelativeTo: __dirname,\n+});\n \n export default [\n+  // Ignores (replaces .eslintignore)\n   {\n     ignores: [\n       'dist',\n       'build',\n@@ -38,39 +41,57 @@\n       '.vite',\n       '.cache',\n     ],\n   },\n+\n+  // Pull in legacy shareable configs via fully resolved paths\n+  ...compat.extends(\n+    require.resolve('eslint-config-airbnb-base'),\n+    require.resolve('eslint-config-airbnb-typescript/base'),\n+    require.resolve('eslint-plugin-import/config/recommended'),\n+    require.resolve('eslint-plugin-import/config/typescript'),\n+    require.resolve('eslint-plugin-promise/recommended'),\n+    require.resolve('eslint-plugin-security/flat/recommended-legacy.js'),\n+    require.resolve('eslint-plugin-sonarjs/configs/recommended'),\n+    require.resolve('eslint-plugin-unicorn/recommended'),\n+    require.resolve('eslint-config-prettier')\n+  ),\n+\n+  // Main rules (last-wins over compat chain)\n   {\n     files: ['**/*.{ts,tsx,js,jsx}'],\n     languageOptions: {\n       parser: tsparser,\n       parserOptions: {\n         ecmaVersion: 2022,\n         sourceType: 'module',\n         project: ['./tsconfig.json', './packages/*/tsconfig.json'],\n-        tsconfigRootDir: path.resolve(),\n+        tsconfigRootDir: __dirname,\n         projectService: true,\n       },\n-      globals: {\n-        NodeJS: true,\n-      },\n     },\n     plugins: {\n       '@typescript-eslint': tseslint,\n-      '@stylistic': stylistic,\n       import: importPlugin,\n       promise,\n       security,\n       sonarjs,\n       unicorn,\n       vitest,\n       prettier,\n     },\n+    settings: {\n+      'import/resolver': {\n+        typescript: {\n+          alwaysTryTypes: true,\n+          project: ['./tsconfig.json', './packages/*/tsconfig.json'],\n+        },\n+        node: true,\n+      },\n+    },\n     rules: {\n-      // Prettier\n       'prettier/prettier': 'error',\n \n-      // TS\n       '@typescript-eslint/explicit-function-return-type': ['error', {\n         allowExpressions: true,\n         allowTypedFunctionExpressions: true,\n         allowHigherOrderFunctions: true,\n@@ -92,27 +113,23 @@\n       }],\n       '@typescript-eslint/no-floating-promises': ['error', { ignoreVoid: true, ignoreIIFE: true }],\n       '@typescript-eslint/no-misused-promises': ['error', { checksVoidReturn: { attributes: false } }],\n       '@typescript-eslint/await-thenable': 'error',\n-      '@typescript-eslint/promise-function-async': 'error',\n+      '@typescript-eslint/promise-function-async': ['error', { allowAny: true }],\n \n-      // Style (brace style left to Prettier)\n+      // Let Prettier own formatting; donâ€™t fight it\n       'brace-style': 'off',\n       'lines-between-class-members': 'off',\n-      '@typescript-eslint/lines-between-class-members': ['error', 'always', {\n-        exceptAfterSingleLine: true,\n-      }],\n+      '@typescript-eslint/lines-between-class-members': ['error', 'always', { exceptAfterSingleLine: true }],\n \n-      // Naming\n       '@typescript-eslint/naming-convention': ['error',\n         { selector: 'default', format: ['camelCase'], leadingUnderscore: 'allow', trailingUnderscore: 'forbid' },\n         { selector: 'variable', format: ['camelCase', 'UPPER_CASE', 'PascalCase'], leadingUnderscore: 'allow' },\n         { selector: 'typeLike', format: ['PascalCase'] },\n         { selector: 'enumMember', format: ['PascalCase', 'UPPER_CASE'] },\n         { selector: 'import', format: ['camelCase', 'PascalCase'] },\n       ],\n \n-      // Imports\n       'import/order': ['error', {\n         groups: ['builtin', 'external', 'internal', 'parent', 'sibling', 'index', 'object', 'type'],\n         'newlines-between': 'always',\n         alphabetize: { order: 'asc', caseInsensitive: true },\n@@ -133,26 +150,22 @@\n       'import/extensions': ['error', 'ignorePackages', {\n         ts: 'never', tsx: 'never', js: 'never', mjs: 'never', cjs: 'never',\n       }],\n \n-      // Unicorn\n       'unicorn/prevent-abbreviations': ['error', {\n         allowList: { args: true, env: true, params: true, props: true, Props: true, ref: true, Ref: true },\n       }],\n       'unicorn/filename-case': ['error', { cases: { kebabCase: true, pascalCase: true } }],\n       'unicorn/no-null': 'off',\n       'unicorn/prefer-module': 'off',\n       'unicorn/prefer-top-level-await': 'off',\n \n-      // Security\n       'security/detect-object-injection': 'off',\n       'security/detect-non-literal-fs-filename': 'off',\n \n-      // Sonar\n       'sonarjs/cognitive-complexity': ['error', 15],\n       'sonarjs/no-duplicate-string': ['error', { threshold: 5 }],\n \n-      // Quality\n       'no-console': ['warn', { allow: ['warn', 'error', 'info', 'debug'] }],\n       'no-debugger': 'error',\n       'no-alert': 'error',\n       'no-var': 'error',\n@@ -168,36 +181,23 @@\n       }],\n       eqeqeq: ['error', 'always'],\n       curly: ['error', 'all'],\n \n-      // Complexity\n       complexity: ['error', 10],\n       'max-depth': ['error', 4],\n       'max-lines': ['error', { max: 400, skipBlankLines: true, skipComments: true }],\n       'max-lines-per-function': ['error', { max: 80, skipBlankLines: true, skipComments: true }],\n       'max-params': ['error', 4],\n \n-      // Comments\n       'spaced-comment': ['error', 'always', { markers: ['/'] }],\n     },\n   },\n-  // Vitest-specific override\n+\n+  // Vitest override\n   {\n     files: ['**/*.{test,spec}.ts', '**/__tests__/**/*.ts'],\n-    languageOptions: {\n-      env: { 'vitest/globals': true },\n-    },\n+    languageOptions: { env: { 'vitest/globals': true } },\n     plugins: { vitest },\n     rules: {\n       '@typescript-eslint/no-explicit-any': 'off',\n       '@typescript-eslint/no-unsafe-assignment': 'off',\n       '@typescript-eslint/no-unsafe-member-access': 'off',\n-      'sonarjs/no-duplicate-string': 'off',\n-      'max-lines-per-function': 'off',\n-    },\n-  },\n-  // Config files override\n-  {\n-    files: ['*.config.{ts,js,cjs,mjs}'],\n-    rules: { 'import/no-default-export': 'off' },\n-  },\n-];\n"
                },
                {
                    "date": 1760734420765,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,203 +0,0 @@\n-// eslint.config.mjs\n-import path from 'node:path';\n-import { fileURLToPath } from 'node:url';\n-import { createRequire } from 'node:module';\n-import { FlatCompat } from '@eslint/eslintrc';\n-\n-import tseslint from '@typescript-eslint/eslint-plugin';\n-import tsparser from '@typescript-eslint/parser';\n-import importPlugin from 'eslint-plugin-import';\n-import promise from 'eslint-plugin-promise';\n-import security from 'eslint-plugin-security';\n-import sonarjs from 'eslint-plugin-sonarjs';\n-import unicorn from 'eslint-plugin-unicorn';\n-import vitest from 'eslint-plugin-vitest';\n-import prettier from 'eslint-plugin-prettier';\n-\n-const __dirname = path.dirname(fileURLToPath(import.meta.url));\n-const require = createRequire(import.meta.url);\n-\n-const compat = new FlatCompat({\n-  baseDirectory: __dirname,\n-  // make plugin/extends resolution behave like legacy\n-  resolvePluginsRelativeTo: __dirname,\n-});\n-\n-export default [\n-  // Ignores (replaces .eslintignore)\n-  {\n-    ignores: [\n-      'dist',\n-      'build',\n-      'node_modules',\n-      'coverage',\n-      '*.d.ts',\n-      '*.min.js',\n-      '**/*.gen.ts',\n-      '**/*.generated.ts',\n-      '**/__generated__/**',\n-      '.turbo',\n-      '.next',\n-      '.vite',\n-      '.cache',\n-    ],\n-  },\n-\n-  // Pull in legacy shareable configs via fully resolved paths\n-  ...compat.extends(\n-    require.resolve('eslint-config-airbnb-base'),\n-    require.resolve('eslint-config-airbnb-typescript/base'),\n-    require.resolve('eslint-plugin-import/config/recommended'),\n-    require.resolve('eslint-plugin-import/config/typescript'),\n-    require.resolve('eslint-plugin-promise/recommended'),\n-    require.resolve('eslint-plugin-security/flat/recommended-legacy.js'),\n-    require.resolve('eslint-plugin-sonarjs/configs/recommended'),\n-    require.resolve('eslint-plugin-unicorn/recommended'),\n-    require.resolve('eslint-config-prettier')\n-  ),\n-\n-  // Main rules (last-wins over compat chain)\n-  {\n-    files: ['**/*.{ts,tsx,js,jsx}'],\n-    languageOptions: {\n-      parser: tsparser,\n-      parserOptions: {\n-        ecmaVersion: 2022,\n-        sourceType: 'module',\n-        project: ['./tsconfig.json', './packages/*/tsconfig.json'],\n-        tsconfigRootDir: __dirname,\n-        projectService: true,\n-      },\n-    },\n-    plugins: {\n-      '@typescript-eslint': tseslint,\n-      import: importPlugin,\n-      promise,\n-      security,\n-      sonarjs,\n-      unicorn,\n-      vitest,\n-      prettier,\n-    },\n-    settings: {\n-      'import/resolver': {\n-        typescript: {\n-          alwaysTryTypes: true,\n-          project: ['./tsconfig.json', './packages/*/tsconfig.json'],\n-        },\n-        node: true,\n-      },\n-    },\n-    rules: {\n-      'prettier/prettier': 'error',\n-\n-      '@typescript-eslint/explicit-function-return-type': ['error', {\n-        allowExpressions: true,\n-        allowTypedFunctionExpressions: true,\n-        allowHigherOrderFunctions: true,\n-      }],\n-      '@typescript-eslint/explicit-module-boundary-types': 'warn',\n-      '@typescript-eslint/no-explicit-any': 'error',\n-      '@typescript-eslint/only-throw-error': 'error',\n-      '@typescript-eslint/no-unused-vars': ['error', {\n-        argsIgnorePattern: '^_',\n-        varsIgnorePattern: '^_',\n-        caughtErrorsIgnorePattern: '^_',\n-      }],\n-      '@typescript-eslint/consistent-type-imports': ['error', {\n-        prefer: 'type-imports',\n-        fixStyle: 'separate-type-imports',\n-      }],\n-      '@typescript-eslint/consistent-type-exports': ['error', {\n-        fixMixedExportsWithInlineTypeSpecifier: true,\n-      }],\n-      '@typescript-eslint/no-floating-promises': ['error', { ignoreVoid: true, ignoreIIFE: true }],\n-      '@typescript-eslint/no-misused-promises': ['error', { checksVoidReturn: { attributes: false } }],\n-      '@typescript-eslint/await-thenable': 'error',\n-      '@typescript-eslint/promise-function-async': ['error', { allowAny: true }],\n-\n-      // Let Prettier own formatting; donâ€™t fight it\n-      'brace-style': 'off',\n-      'lines-between-class-members': 'off',\n-      '@typescript-eslint/lines-between-class-members': ['error', 'always', { exceptAfterSingleLine: true }],\n-\n-      '@typescript-eslint/naming-convention': ['error',\n-        { selector: 'default', format: ['camelCase'], leadingUnderscore: 'allow', trailingUnderscore: 'forbid' },\n-        { selector: 'variable', format: ['camelCase', 'UPPER_CASE', 'PascalCase'], leadingUnderscore: 'allow' },\n-        { selector: 'typeLike', format: ['PascalCase'] },\n-        { selector: 'enumMember', format: ['PascalCase', 'UPPER_CASE'] },\n-        { selector: 'import', format: ['camelCase', 'PascalCase'] },\n-      ],\n-\n-      'import/order': ['error', {\n-        groups: ['builtin', 'external', 'internal', 'parent', 'sibling', 'index', 'object', 'type'],\n-        'newlines-between': 'always',\n-        alphabetize: { order: 'asc', caseInsensitive: true },\n-      }],\n-      'import/no-duplicates': 'error',\n-      'import/no-extraneous-dependencies': ['error', {\n-        devDependencies: [\n-          '**/*.{test,spec}.ts',\n-          '**/__tests__/**',\n-          '**/vitest.config.{ts,js,cjs,mjs}',\n-          '**/jest.config.{ts,js,cjs,mjs}',\n-          '**/scripts/**',\n-          '**/*.config.{ts,js,cjs,mjs}',\n-        ],\n-      }],\n-      'import/prefer-default-export': 'off',\n-      'import/no-default-export': 'error',\n-      'import/extensions': ['error', 'ignorePackages', {\n-        ts: 'never', tsx: 'never', js: 'never', mjs: 'never', cjs: 'never',\n-      }],\n-\n-      'unicorn/prevent-abbreviations': ['error', {\n-        allowList: { args: true, env: true, params: true, props: true, Props: true, ref: true, Ref: true },\n-      }],\n-      'unicorn/filename-case': ['error', { cases: { kebabCase: true, pascalCase: true } }],\n-      'unicorn/no-null': 'off',\n-      'unicorn/prefer-module': 'off',\n-      'unicorn/prefer-top-level-await': 'off',\n-\n-      'security/detect-object-injection': 'off',\n-      'security/detect-non-literal-fs-filename': 'off',\n-\n-      'sonarjs/cognitive-complexity': ['error', 15],\n-      'sonarjs/no-duplicate-string': ['error', { threshold: 5 }],\n-\n-      'no-console': ['warn', { allow: ['warn', 'error', 'info', 'debug'] }],\n-      'no-debugger': 'error',\n-      'no-alert': 'error',\n-      'no-var': 'error',\n-      'prefer-const': 'error',\n-      'prefer-arrow-callback': 'error',\n-      'prefer-template': 'error',\n-      'prefer-destructuring': ['error', { array: false, object: true }],\n-      'no-nested-ternary': 'error',\n-      'no-unneeded-ternary': 'error',\n-      'no-param-reassign': ['error', {\n-        props: true,\n-        ignorePropertyModificationsFor: ['acc', 'accumulator', 'draft', 'state'],\n-      }],\n-      eqeqeq: ['error', 'always'],\n-      curly: ['error', 'all'],\n-\n-      complexity: ['error', 10],\n-      'max-depth': ['error', 4],\n-      'max-lines': ['error', { max: 400, skipBlankLines: true, skipComments: true }],\n-      'max-lines-per-function': ['error', { max: 80, skipBlankLines: true, skipComments: true }],\n-      'max-params': ['error', 4],\n-\n-      'spaced-comment': ['error', 'always', { markers: ['/'] }],\n-    },\n-  },\n-\n-  // Vitest override\n-  {\n-    files: ['**/*.{test,spec}.ts', '**/__tests__/**/*.ts'],\n-    languageOptions: { env: { 'vitest/globals': true } },\n-    plugins: { vitest },\n-    rules: {\n-      '@typescript-eslint/no-explicit-any': 'off',\n-      '@typescript-eslint/no-unsafe-assignment': 'off',\n-      '@typescript-eslint/no-unsafe-member-access': 'off',\n\\ No newline at end of file\n"
                },
                {
                    "date": 1760734562711,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,1 +1,213 @@\n+// eslint.config.mjs\n+import path from 'node:path';\n+import { fileURLToPath } from 'node:url';\n+import { createRequire } from 'node:module';\n+import { FlatCompat } from '@eslint/eslintrc';\n \n+import tseslint from '@typescript-eslint/eslint-plugin';\n+import tsparser from '@typescript-eslint/parser';\n+import importPlugin from 'eslint-plugin-import';\n+import promise from 'eslint-plugin-promise';\n+import security from 'eslint-plugin-security';\n+import sonarjs from 'eslint-plugin-sonarjs';\n+import unicorn from 'eslint-plugin-unicorn';\n+import vitest from 'eslint-plugin-vitest';\n+import prettier from 'eslint-plugin-prettier';\n+\n+const __dirname = path.dirname(fileURLToPath(import.meta.url));\n+const require = createRequire(import.meta.url);\n+\n+const compat = new FlatCompat({\n+  baseDirectory: __dirname,\n+  // make plugin/extends resolution behave like legacy\n+  resolvePluginsRelativeTo: __dirname,\n+});\n+\n+export default [\n+  // Ignores (replaces .eslintignore)\n+  {\n+    ignores: [\n+      'dist',\n+      'build',\n+      'node_modules',\n+      'coverage',\n+      '*.d.ts',\n+      '*.min.js',\n+      '**/*.gen.ts',\n+      '**/*.generated.ts',\n+      '**/__generated__/**',\n+      '.turbo',\n+      '.next',\n+      '.vite',\n+      '.cache',\n+    ],\n+  },\n+\n+  // Pull in legacy shareable configs via fully resolved paths\n+  ...compat.extends(\n+    require.resolve('eslint-config-airbnb-base'),\n+    require.resolve('eslint-config-airbnb-typescript/base'),\n+    require.resolve('eslint-plugin-import/config/recommended'),\n+    require.resolve('eslint-plugin-import/config/typescript'),\n+    require.resolve('eslint-plugin-security/flat/recommended-legacy.js'),\n+    require.resolve('eslint-plugin-sonarjs/configs/recommended'),\n+    require.resolve('eslint-plugin-unicorn/recommended'),\n+    require.resolve('eslint-config-prettier')\n+  ),\n+\n+  // Main rules (last-wins over compat chain)\n+  {\n+    files: ['**/*.{ts,tsx,js,jsx}'],\n+    languageOptions: {\n+      parser: tsparser,\n+      parserOptions: {\n+        ecmaVersion: 2022,\n+        sourceType: 'module',\n+        project: ['./tsconfig.json', './packages/*/tsconfig.json'],\n+        tsconfigRootDir: __dirname,\n+        projectService: true,\n+      },\n+    },\n+    plugins: {\n+      '@typescript-eslint': tseslint,\n+      import: importPlugin,\n+      promise,\n+      security,\n+      sonarjs,\n+      unicorn,\n+      vitest,\n+      prettier,\n+    },\n+    settings: {\n+      'import/resolver': {\n+        typescript: {\n+          alwaysTryTypes: true,\n+          project: ['./tsconfig.json', './packages/*/tsconfig.json'],\n+        },\n+        node: true,\n+      },\n+    },\n+    rules: {\n+      'prettier/prettier': 'error',\n+\n+      '@typescript-eslint/explicit-function-return-type': ['error', {\n+        allowExpressions: true,\n+        allowTypedFunctionExpressions: true,\n+        allowHigherOrderFunctions: true,\n+      }],\n+      '@typescript-eslint/explicit-module-boundary-types': 'warn',\n+      '@typescript-eslint/no-explicit-any': 'error',\n+      '@typescript-eslint/only-throw-error': 'error',\n+      '@typescript-eslint/no-unused-vars': ['error', {\n+        argsIgnorePattern: '^_',\n+        varsIgnorePattern: '^_',\n+        caughtErrorsIgnorePattern: '^_',\n+      }],\n+      '@typescript-eslint/consistent-type-imports': ['error', {\n+        prefer: 'type-imports',\n+        fixStyle: 'separate-type-imports',\n+      }],\n+      '@typescript-eslint/consistent-type-exports': ['error', {\n+        fixMixedExportsWithInlineTypeSpecifier: true,\n+      }],\n+      '@typescript-eslint/no-floating-promises': ['error', { ignoreVoid: true, ignoreIIFE: true }],\n+      '@typescript-eslint/no-misused-promises': ['error', { checksVoidReturn: { attributes: false } }],\n+      '@typescript-eslint/await-thenable': 'error',\n+      '@typescript-eslint/promise-function-async': ['error', { allowAny: true }],\n+\n+      // Let Prettier own formatting; donâ€™t fight it\n+      'brace-style': 'off',\n+      'lines-between-class-members': 'off',\n+      '@typescript-eslint/lines-between-class-members': ['error', 'always', { exceptAfterSingleLine: true }],\n+\n+      '@typescript-eslint/naming-convention': ['error',\n+        { selector: 'default', format: ['camelCase'], leadingUnderscore: 'allow', trailingUnderscore: 'forbid' },\n+        { selector: 'variable', format: ['camelCase', 'UPPER_CASE', 'PascalCase'], leadingUnderscore: 'allow' },\n+        { selector: 'typeLike', format: ['PascalCase'] },\n+        { selector: 'enumMember', format: ['PascalCase', 'UPPER_CASE'] },\n+        { selector: 'import', format: ['camelCase', 'PascalCase'] },\n+      ],\n+\n+      'import/order': ['error', {\n+        groups: ['builtin', 'external', 'internal', 'parent', 'sibling', 'index', 'object', 'type'],\n+        'newlines-between': 'always',\n+        alphabetize: { order: 'asc', caseInsensitive: true },\n+      }],\n+      'import/no-duplicates': 'error',\n+      'import/no-extraneous-dependencies': ['error', {\n+        devDependencies: [\n+          '**/*.{test,spec}.ts',\n+          '**/__tests__/**',\n+          '**/vitest.config.{ts,js,cjs,mjs}',\n+          '**/jest.config.{ts,js,cjs,mjs}',\n+          '**/scripts/**',\n+          '**/*.config.{ts,js,cjs,mjs}',\n+        ],\n+      }],\n+      'import/prefer-default-export': 'off',\n+      'import/no-default-export': 'error',\n+      'import/extensions': ['error', 'ignorePackages', {\n+        ts: 'never', tsx: 'never', js: 'never', mjs: 'never', cjs: 'never',\n+      }],\n+\n+      'unicorn/prevent-abbreviations': ['error', {\n+        allowList: { args: true, env: true, params: true, props: true, Props: true, ref: true, Ref: true },\n+      }],\n+      'unicorn/filename-case': ['error', { cases: { kebabCase: true, pascalCase: true } }],\n+      'unicorn/no-null': 'off',\n+      'unicorn/prefer-module': 'off',\n+      'unicorn/prefer-top-level-await': 'off',\n+\n+      'security/detect-object-injection': 'off',\n+      'security/detect-non-literal-fs-filename': 'off',\n+\n+      'sonarjs/cognitive-complexity': ['error', 15],\n+      'sonarjs/no-duplicate-string': ['error', { threshold: 5 }],\n+\n+      'no-console': ['warn', { allow: ['warn', 'error', 'info', 'debug'] }],\n+      'no-debugger': 'error',\n+      'no-alert': 'error',\n+      'no-var': 'error',\n+      'prefer-const': 'error',\n+      'prefer-arrow-callback': 'error',\n+      'prefer-template': 'error',\n+      'prefer-destructuring': ['error', { array: false, object: true }],\n+      'no-nested-ternary': 'error',\n+      'no-unneeded-ternary': 'error',\n+      'no-param-reassign': ['error', {\n+        props: true,\n+        ignorePropertyModificationsFor: ['acc', 'accumulator', 'draft', 'state'],\n+      }],\n+      eqeqeq: ['error', 'always'],\n+      curly: ['error', 'all'],\n+\n+      complexity: ['error', 10],\n+      'max-depth': ['error', 4],\n+      'max-lines': ['error', { max: 400, skipBlankLines: true, skipComments: true }],\n+      'max-lines-per-function': ['error', { max: 80, skipBlankLines: true, skipComments: true }],\n+      'max-params': ['error', 4],\n+\n+      'spaced-comment': ['error', 'always', { markers: ['/'] }],\n+    },\n+  },\n+\n+  // Vitest override\n+  {\n+    files: ['**/*.{test,spec}.ts', '**/__tests__/**/*.ts'],\n+    languageOptions: { env: { 'vitest/globals': true } },\n+    plugins: { vitest },\n+    rules: {\n+      '@typescript-eslint/no-explicit-any': 'off',\n+      '@typescript-eslint/no-unsafe-assignment': 'off',\n+      '@typescript-eslint/no-unsafe-member-access': 'off',\n+      'sonarjs/no-duplicate-string': 'off',\n+      'max-lines-per-function': 'off',\n+    },\n+  },\n+\n+  // Config/tooling files: allow default export\n+  {\n+    files: ['*.config.{ts,js,cjs,mjs}'],\n+    rules: { 'import/no-default-export': 'off' },\n+  },\n+];\n"
                },
                {
                    "date": 1760734634534,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -42,19 +42,18 @@\n       '.cache',\n     ],\n   },\n \n-  // Pull in legacy shareable configs via fully resolved paths\n-  ...compat.extends(\n-    require.resolve('eslint-config-airbnb-base'),\n-    require.resolve('eslint-config-airbnb-typescript/base'),\n-    require.resolve('eslint-plugin-import/config/recommended'),\n-    require.resolve('eslint-plugin-import/config/typescript'),\n-    require.resolve('eslint-plugin-security/flat/recommended-legacy.js'),\n-    require.resolve('eslint-plugin-sonarjs/configs/recommended'),\n-    require.resolve('eslint-plugin-unicorn/recommended'),\n-    require.resolve('eslint-config-prettier')\n-  ),\n+    // Pull in legacy shareable configs via fully resolved paths\n+    ...compat.extends(\n+      require.resolve('eslint-config-airbnb-base'),\n+      require.resolve('eslint-config-airbnb-typescript/base'),\n+      require.resolve('eslint-plugin-import/config/recommended'),\n+      require.resolve('eslint-plugin-import/config/typescript'),\n+      require.resolve('eslint-plugin-sonarjs/configs/recommended'),\n+      require.resolve('eslint-plugin-unicorn/recommended'),\n+      require.resolve('eslint-config-prettier')\n+    ),\n \n   // Main rules (last-wins over compat chain)\n   {\n     files: ['**/*.{ts,tsx,js,jsx}'],\n"
                },
                {
                    "date": 1760734650475,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -48,9 +48,8 @@\n       require.resolve('eslint-config-airbnb-base'),\n       require.resolve('eslint-config-airbnb-typescript/base'),\n       require.resolve('eslint-plugin-import/config/recommended'),\n       require.resolve('eslint-plugin-import/config/typescript'),\n-      require.resolve('eslint-plugin-sonarjs/configs/recommended'),\n       require.resolve('eslint-plugin-unicorn/recommended'),\n       require.resolve('eslint-config-prettier')\n     ),\n \n"
                },
                {
                    "date": 1760734677435,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -42,17 +42,16 @@\n       '.cache',\n     ],\n   },\n \n-    // Pull in legacy shareable configs via fully resolved paths\n-    ...compat.extends(\n-      require.resolve('eslint-config-airbnb-base'),\n-      require.resolve('eslint-config-airbnb-typescript/base'),\n-      require.resolve('eslint-plugin-import/config/recommended'),\n-      require.resolve('eslint-plugin-import/config/typescript'),\n-      require.resolve('eslint-plugin-unicorn/recommended'),\n-      require.resolve('eslint-config-prettier')\n-    ),\n+  // Pull in legacy shareable configs via fully resolved paths\n+  ...compat.extends(\n+    require.resolve('eslint-config-airbnb-base'),\n+    require.resolve('eslint-config-airbnb-typescript/base'),\n+    require.resolve('eslint-plugin-import/config/recommended'),\n+    require.resolve('eslint-plugin-import/config/typescript'),\n+    require.resolve('eslint-config-prettier')\n+  ),\n \n   // Main rules (last-wins over compat chain)\n   {\n     files: ['**/*.{ts,tsx,js,jsx}'],\n"
                },
                {
                    "date": 1760734701287,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -114,10 +114,10 @@\n \n       // Let Prettier own formatting; donâ€™t fight it\n       'brace-style': 'off',\n       'lines-between-class-members': 'off',\n-      '@typescript-eslint/lines-between-class-members': ['error', 'always', { exceptAfterSingleLine: true }],\n \n+\n       '@typescript-eslint/naming-convention': ['error',\n         { selector: 'default', format: ['camelCase'], leadingUnderscore: 'allow', trailingUnderscore: 'forbid' },\n         { selector: 'variable', format: ['camelCase', 'UPPER_CASE', 'PascalCase'], leadingUnderscore: 'allow' },\n         { selector: 'typeLike', format: ['PascalCase'] },\n"
                },
                {
                    "date": 1760734812961,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -69,9 +69,8 @@\n       '@typescript-eslint': tseslint,\n       import: importPlugin,\n       promise,\n       security,\n-      sonarjs,\n       unicorn,\n       vitest,\n       prettier,\n     },\n"
                },
                {
                    "date": 1760734839331,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -107,16 +107,15 @@\n         fixMixedExportsWithInlineTypeSpecifier: true,\n       }],\n       '@typescript-eslint/no-floating-promises': ['error', { ignoreVoid: true, ignoreIIFE: true }],\n       '@typescript-eslint/no-misused-promises': ['error', { checksVoidReturn: { attributes: false } }],\n-      '@typescript-eslint/await-thenable': 'error',\n-      '@typescript-eslint/promise-function-async': ['error', { allowAny: true }],\n+      '@typescript-eslint/await-thenable': 'error',      '@typescript-eslint/promise-function-async': ['error', { allowAny: true }],\n \n       // Let Prettier own formatting; donâ€™t fight it\n       'brace-style': 'off',\n       'lines-between-class-members': 'off',\n+      '@typescript-eslint/lines-between-class-members': 'off',\n \n-\n       '@typescript-eslint/naming-convention': ['error',\n         { selector: 'default', format: ['camelCase'], leadingUnderscore: 'allow', trailingUnderscore: 'forbid' },\n         { selector: 'variable', format: ['camelCase', 'UPPER_CASE', 'PascalCase'], leadingUnderscore: 'allow' },\n         { selector: 'typeLike', format: ['PascalCase'] },\n"
                },
                {
                    "date": 1760734870480,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -8,9 +8,8 @@\n import tsparser from '@typescript-eslint/parser';\n import importPlugin from 'eslint-plugin-import';\n import promise from 'eslint-plugin-promise';\n import security from 'eslint-plugin-security';\n-import sonarjs from 'eslint-plugin-sonarjs';\n import unicorn from 'eslint-plugin-unicorn';\n import vitest from 'eslint-plugin-vitest';\n import prettier from 'eslint-plugin-prettier';\n \n"
                },
                {
                    "date": 1760734876915,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -154,11 +154,10 @@\n \n       'security/detect-object-injection': 'off',\n       'security/detect-non-literal-fs-filename': 'off',\n \n-      'sonarjs/cognitive-complexity': ['error', 15],\n-      'sonarjs/no-duplicate-string': ['error', { threshold: 5 }],\n \n+\n       'no-console': ['warn', { allow: ['warn', 'error', 'info', 'debug'] }],\n       'no-debugger': 'error',\n       'no-alert': 'error',\n       'no-var': 'error',\n"
                },
                {
                    "date": 1760734883331,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -192,9 +192,8 @@\n     rules: {\n       '@typescript-eslint/no-explicit-any': 'off',\n       '@typescript-eslint/no-unsafe-assignment': 'off',\n       '@typescript-eslint/no-unsafe-member-access': 'off',\n-      'sonarjs/no-duplicate-string': 'off',\n       'max-lines-per-function': 'off',\n     },\n   },\n \n"
                },
                {
                    "date": 1760735033579,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -111,9 +111,9 @@\n \n       // Let Prettier own formatting; donâ€™t fight it\n       'brace-style': 'off',\n       'lines-between-class-members': 'off',\n-      '@typescript-eslint/lines-between-class-members': 'off',\n+      '@stylistic/lines-between-class-members': 'off',\n \n       '@typescript-eslint/naming-convention': ['error',\n         { selector: 'default', format: ['camelCase'], leadingUnderscore: 'allow', trailingUnderscore: 'forbid' },\n         { selector: 'variable', format: ['camelCase', 'UPPER_CASE', 'PascalCase'], leadingUnderscore: 'allow' },\n"
                },
                {
                    "date": 1760735060121,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -110,8 +110,9 @@\n       '@typescript-eslint/await-thenable': 'error',      '@typescript-eslint/promise-function-async': ['error', { allowAny: true }],\n \n       // Let Prettier own formatting; donâ€™t fight it\n       'brace-style': 'off',\n+      '@stylistic/brace-style': 'off',\n       'lines-between-class-members': 'off',\n       '@stylistic/lines-between-class-members': 'off',\n \n       '@typescript-eslint/naming-convention': ['error',\n"
                },
                {
                    "date": 1760735180001,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,206 +1,237 @@\n-// eslint.config.mjs\n-import path from 'node:path';\n-import { fileURLToPath } from 'node:url';\n-import { createRequire } from 'node:module';\n-import { FlatCompat } from '@eslint/eslintrc';\n-\n-import tseslint from '@typescript-eslint/eslint-plugin';\n-import tsparser from '@typescript-eslint/parser';\n-import importPlugin from 'eslint-plugin-import';\n-import promise from 'eslint-plugin-promise';\n-import security from 'eslint-plugin-security';\n-import unicorn from 'eslint-plugin-unicorn';\n+import js from '@eslint/js';\n+import * as tseslint from '@typescript-eslint/eslint-plugin';\n+import tsParser from '@typescript-eslint/parser';\n import vitest from 'eslint-plugin-vitest';\n-import prettier from 'eslint-plugin-prettier';\n+import globals from 'globals';\n+import tseslintConfigs from 'typescript-eslint';\n \n-const __dirname = path.dirname(fileURLToPath(import.meta.url));\n-const require = createRequire(import.meta.url);\n-\n-const compat = new FlatCompat({\n-  baseDirectory: __dirname,\n-  // make plugin/extends resolution behave like legacy\n-  resolvePluginsRelativeTo: __dirname,\n-});\n-\n export default [\n-  // Ignores (replaces .eslintignore)\n-  {\n-    ignores: [\n-      'dist',\n-      'build',\n-      'node_modules',\n-      'coverage',\n-      '*.d.ts',\n-      '*.min.js',\n-      '**/*.gen.ts',\n-      '**/*.generated.ts',\n-      '**/__generated__/**',\n-      '.turbo',\n-      '.next',\n-      '.vite',\n-      '.cache',\n-    ],\n-  },\n+  // Base JS recommended\n+  js.configs.recommended,\n \n-  // Pull in legacy shareable configs via fully resolved paths\n-  ...compat.extends(\n-    require.resolve('eslint-config-airbnb-base'),\n-    require.resolve('eslint-config-airbnb-typescript/base'),\n-    require.resolve('eslint-plugin-import/config/recommended'),\n-    require.resolve('eslint-plugin-import/config/typescript'),\n-    require.resolve('eslint-config-prettier')\n-  ),\n+  // Apply TS-ESLint presets first (for TypeScript files), so custom rules can override them\n+  ...tseslintConfigs.configs.recommended.map((config) => ({\n+    ...config,\n+    files: ['**/*.ts', '**/*.tsx'],\n+  })),\n+  ...tseslintConfigs.configs.recommendedTypeChecked.map((config) => ({\n+    ...config,\n+    files: ['**/*.ts', '**/*.tsx'],\n+  })),\n \n-  // Main rules (last-wins over compat chain)\n+  // TypeScript: apply to TS files with type-aware rules\n   {\n-    files: ['**/*.{ts,tsx,js,jsx}'],\n+    files: ['**/*.ts', '**/*.tsx'],\n     languageOptions: {\n-      parser: tsparser,\n+      parser: tsParser,\n       parserOptions: {\n         ecmaVersion: 2022,\n         sourceType: 'module',\n-        project: ['./tsconfig.json', './packages/*/tsconfig.json'],\n-        tsconfigRootDir: __dirname,\n-        projectService: true,\n+        // Enable type-aware linting; respects your ./tsconfig.json\n+        project: './tsconfig.json',\n+        tsconfigRootDir: process.cwd(),\n       },\n-    },\n-    plugins: {\n-      '@typescript-eslint': tseslint,\n-      import: importPlugin,\n-      promise,\n-      security,\n-      unicorn,\n-      vitest,\n-      prettier,\n-    },\n-    settings: {\n-      'import/resolver': {\n-        typescript: {\n-          alwaysTryTypes: true,\n-          project: ['./tsconfig.json', './packages/*/tsconfig.json'],\n-        },\n-        node: true,\n+      // Bring in Node globals; don't hand-maintain a giant list\n+      globals: {\n+        ...globals.node,\n       },\n     },\n+    // Custom rules that override the presets above\n     rules: {\n-      'prettier/prettier': 'error',\n-\n-      '@typescript-eslint/explicit-function-return-type': ['error', {\n-        allowExpressions: true,\n-        allowTypedFunctionExpressions: true,\n-        allowHigherOrderFunctions: true,\n-      }],\n+      // --- Your curated rules (kept, with one removal noted) ---\n+      '@typescript-eslint/no-unused-vars': [\n+        'warn',\n+        {\n+          argsIgnorePattern: '^_',\n+          varsIgnorePattern: '^_',\n+          caughtErrorsIgnorePattern: '^_',\n+        },\n+      ],\n+      '@typescript-eslint/no-explicit-any': 'warn',\n+      '@typescript-eslint/no-unsafe-argument': 'warn',\n+      '@typescript-eslint/no-unsafe-assignment': 'warn',\n+      '@typescript-eslint/no-unsafe-call': 'warn',\n+      '@typescript-eslint/no-unsafe-member-access': 'warn',\n+      '@typescript-eslint/no-unsafe-return': 'warn',\n+      // Allow Function type for dynamic proxy systems where exact signatures vary\n+      '@typescript-eslint/no-unsafe-function-type': 'off',\n+      '@typescript-eslint/explicit-function-return-type': [\n+        'warn',\n+        {\n+          allowExpressions: true,\n+          allowTypedFunctionExpressions: true,\n+        },\n+      ],\n       '@typescript-eslint/explicit-module-boundary-types': 'warn',\n-      '@typescript-eslint/no-explicit-any': 'error',\n-      '@typescript-eslint/only-throw-error': 'error',\n-      '@typescript-eslint/no-unused-vars': ['error', {\n-        argsIgnorePattern: '^_',\n-        varsIgnorePattern: '^_',\n-        caughtErrorsIgnorePattern: '^_',\n-      }],\n-      '@typescript-eslint/consistent-type-imports': ['error', {\n-        prefer: 'type-imports',\n-        fixStyle: 'separate-type-imports',\n-      }],\n-      '@typescript-eslint/consistent-type-exports': ['error', {\n-        fixMixedExportsWithInlineTypeSpecifier: true,\n-      }],\n-      '@typescript-eslint/no-floating-promises': ['error', { ignoreVoid: true, ignoreIIFE: true }],\n-      '@typescript-eslint/no-misused-promises': ['error', { checksVoidReturn: { attributes: false } }],\n-      '@typescript-eslint/await-thenable': 'error',      '@typescript-eslint/promise-function-async': ['error', { allowAny: true }],\n+      '@typescript-eslint/no-floating-promises': 'error',\n+      '@typescript-eslint/await-thenable': 'error',\n+      '@typescript-eslint/no-misused-promises': 'error',\n+      // Relaxed: Google, Airbnb, and Microsoft codebases allow async without await for interface consistency\n+      '@typescript-eslint/require-await': 'warn',\n+      '@typescript-eslint/prefer-promise-reject-errors': 'error',\n+      // Relaxed: Industry standard (AWS SDK, Google Cloud, Pino logger) allows unknown in templates for logging\n+      '@typescript-eslint/restrict-template-expressions': [\n+        'warn',\n+        {\n+          allowNumber: true,\n+          allowBoolean: true,\n+          allowAny: false,\n+          allowNullish: true,\n+          allowRegExp: false,\n+        },\n+      ],\n+      // Relaxed: Stripe and Shopify treat as warning; intentional in logging contexts\n+      '@typescript-eslint/no-base-to-string': 'warn',\n+      '@typescript-eslint/strict-boolean-expressions': [\n+        'warn',\n+        {\n+          allowString: true,\n+          allowNumber: true,\n+          allowNullableObject: true,\n+        },\n+      ],\n+      '@typescript-eslint/prefer-readonly': 'error',\n+      '@typescript-eslint/no-unnecessary-condition': [\n+        'error',\n+        { allowConstantLoopConditions: true },\n+      ],\n+      '@typescript-eslint/no-unnecessary-type-assertion': 'error',\n+      '@typescript-eslint/prefer-nullish-coalescing': 'error',\n+      '@typescript-eslint/prefer-optional-chain': 'error',\n+      '@typescript-eslint/prefer-string-starts-ends-with': 'error',\n+      '@typescript-eslint/prefer-includes': 'error',\n+      '@typescript-eslint/switch-exhaustiveness-check': 'error',\n \n-      // Let Prettier own formatting; donâ€™t fight it\n-      'brace-style': 'off',\n-      '@stylistic/brace-style': 'off',\n-      'lines-between-class-members': 'off',\n-      '@stylistic/lines-between-class-members': 'off',\n-\n-      '@typescript-eslint/naming-convention': ['error',\n-        { selector: 'default', format: ['camelCase'], leadingUnderscore: 'allow', trailingUnderscore: 'forbid' },\n-        { selector: 'variable', format: ['camelCase', 'UPPER_CASE', 'PascalCase'], leadingUnderscore: 'allow' },\n+      // Naming conventions (relaxed)\n+      '@typescript-eslint/naming-convention': [\n+        'warn',\n+        { selector: 'default', format: ['camelCase'] },\n+        {\n+          selector: 'variable',\n+          format: ['camelCase', 'UPPER_CASE', 'PascalCase'],\n+          leadingUnderscore: 'allow',\n+        },\n+        { selector: 'parameter', format: ['camelCase'], leadingUnderscore: 'allow' },\n+        { selector: 'property', format: null },\n+        { selector: 'method', format: ['camelCase'], leadingUnderscore: 'allow' },\n         { selector: 'typeLike', format: ['PascalCase'] },\n-        { selector: 'enumMember', format: ['PascalCase', 'UPPER_CASE'] },\n-        { selector: 'import', format: ['camelCase', 'PascalCase'] },\n+        { selector: 'interface', format: ['PascalCase'], prefix: ['I'] },\n+        { selector: 'typeAlias', format: ['PascalCase'], prefix: ['T'] },\n+        { selector: 'enum', format: ['PascalCase'] },\n+        { selector: 'enumMember', format: ['UPPER_CASE'] },\n       ],\n \n-      'import/order': ['error', {\n-        groups: ['builtin', 'external', 'internal', 'parent', 'sibling', 'index', 'object', 'type'],\n-        'newlines-between': 'always',\n-        alphabetize: { order: 'asc', caseInsensitive: true },\n-      }],\n-      'import/no-duplicates': 'error',\n-      'import/no-extraneous-dependencies': ['error', {\n-        devDependencies: [\n-          '**/*.{test,spec}.ts',\n-          '**/__tests__/**',\n-          '**/vitest.config.{ts,js,cjs,mjs}',\n-          '**/jest.config.{ts,js,cjs,mjs}',\n-          '**/scripts/**',\n-          '**/*.config.{ts,js,cjs,mjs}',\n-        ],\n-      }],\n-      'import/prefer-default-export': 'off',\n-      'import/no-default-export': 'error',\n-      'import/extensions': ['error', 'ignorePackages', {\n-        ts: 'never', tsx: 'never', js: 'never', mjs: 'never', cjs: 'never',\n-      }],\n-\n-      'unicorn/prevent-abbreviations': ['error', {\n-        allowList: { args: true, env: true, params: true, props: true, Props: true, ref: true, Ref: true },\n-      }],\n-      'unicorn/filename-case': ['error', { cases: { kebabCase: true, pascalCase: true } }],\n-      'unicorn/no-null': 'off',\n-      'unicorn/prefer-module': 'off',\n-      'unicorn/prefer-top-level-await': 'off',\n-\n-      'security/detect-object-injection': 'off',\n-      'security/detect-non-literal-fs-filename': 'off',\n-\n-\n-\n-      'no-console': ['warn', { allow: ['warn', 'error', 'info', 'debug'] }],\n+      // JS/General\n+      'no-console': ['off', { allow: ['warn', 'error'] }], // Off during dev\n       'no-debugger': 'error',\n       'no-alert': 'error',\n       'no-var': 'error',\n       'prefer-const': 'error',\n       'prefer-arrow-callback': 'error',\n       'prefer-template': 'error',\n-      'prefer-destructuring': ['error', { array: false, object: true }],\n-      'no-nested-ternary': 'error',\n-      'no-unneeded-ternary': 'error',\n-      'no-param-reassign': ['error', {\n-        props: true,\n-        ignorePropertyModificationsFor: ['acc', 'accumulator', 'draft', 'state'],\n-      }],\n-      eqeqeq: ['error', 'always'],\n-      curly: ['error', 'all'],\n+      'prefer-destructuring': [\n+        'error',\n+        {\n+          VariableDeclarator: { array: false, object: true },\n+          AssignmentExpression: { array: false, object: false },\n+        },\n+      ],\n+      'no-duplicate-imports': 'error',\n+      'no-useless-concat': 'error',\n+      'no-useless-return': 'error',\n+      'no-useless-rename': 'error',\n+      'object-shorthand': 'error',\n+      'prefer-rest-params': 'error',\n+      'prefer-spread': 'error',\n \n-      complexity: ['error', 10],\n-      'max-depth': ['error', 4],\n-      'max-lines': ['error', { max: 400, skipBlankLines: true, skipComments: true }],\n-      'max-lines-per-function': ['error', { max: 80, skipBlankLines: true, skipComments: true }],\n-      'max-params': ['error', 4],\n+      // Error prevention\n+      'no-throw-literal': 'error',\n+      'no-return-await': 'error',\n+      'no-async-promise-executor': 'error',\n+      'no-promise-executor-return': 'error',\n+      'require-atomic-updates': 'error',\n \n-      'spaced-comment': ['error', 'always', { markers: ['/'] }],\n+      // Complexity\n+      complexity: ['warn', 20],\n+      'max-depth': ['warn', 4],\n+      'max-lines-per-function': ['warn', { max: 200, skipBlankLines: true, skipComments: true }],\n+      'max-params': ['warn', 5],\n+\n+      // Security-ish\n+      'no-eval': 'error',\n+      'no-implied-eval': 'error',\n+      'no-new-func': 'error',\n+      'no-script-url': 'error',\n+\n+      // Best practices\n+      eqeqeq: ['error', 'always', { null: 'ignore' }], // Allow == null for checking both null and undefined\n+      'no-param-reassign': ['error', { props: false }],\n+      'no-shadow': 'off',\n+      // Airbnb and StandardJS allow shadowing common parameter names like 'error', 'err', 'data'\n+      '@typescript-eslint/no-shadow': [\n+        'error',\n+        {\n+          allow: ['error', 'err', 'resolve', 'reject', 'done', 'next', 'callback'],\n+        },\n+      ],\n+      'no-undef': 'off',\n+      'consistent-return': 'off', // TypeScript's type system handles return consistency\n+      'default-case': 'off', // Redundant with @typescript-eslint/switch-exhaustiveness-check\n+      'default-case-last': 'error',\n+      'no-fallthrough': 'error',\n+\n+      // Imports\n+      'sort-imports': [\n+        'warn',\n+        {\n+          ignoreCase: false,\n+          ignoreDeclarationSort: true,\n+          ignoreMemberSort: false,\n+          memberSyntaxSortOrder: ['none', 'all', 'multiple', 'single'],\n+          allowSeparatedGroups: false,\n+        },\n+      ],\n     },\n   },\n \n-  // Vitest override\n+  // Tests: apply Vitest env + relax strict rules in tests\n   {\n-    files: ['**/*.{test,spec}.ts', '**/__tests__/**/*.ts'],\n-    languageOptions: { env: { 'vitest/globals': true } },\n+    files: ['**/*.test.ts', '**/*.spec.ts', '**/tests/**/*.ts'],\n     plugins: { vitest },\n+    languageOptions: {\n+      globals: vitest.environments.env.globals,\n+    },\n     rules: {\n       '@typescript-eslint/no-explicit-any': 'off',\n+      '@typescript-eslint/no-unsafe-argument': 'off',\n       '@typescript-eslint/no-unsafe-assignment': 'off',\n+      '@typescript-eslint/no-unsafe-call': 'off',\n       '@typescript-eslint/no-unsafe-member-access': 'off',\n+      '@typescript-eslint/no-unsafe-return': 'off',\n+      'no-magic-numbers': 'off',\n       'max-lines-per-function': 'off',\n     },\n   },\n \n-  // Config/tooling files: allow default export\n+  // Config files: allow CJS interop and console\n   {\n-    files: ['*.config.{ts,js,cjs,mjs}'],\n-    rules: { 'import/no-default-export': 'off' },\n+    files: ['*.config.js', '*.config.ts', '*.config.mjs'],\n+    rules: {\n+      '@typescript-eslint/no-require-imports': 'off',\n+      'no-console': 'off',\n+    },\n   },\n+\n+  // Ignores\n+  {\n+    ignores: [\n+      'dist/**',\n+      'build/**',\n+      'coverage/**',\n+      'node_modules/**',\n+      '*.d.ts',\n+      '*.config.js',\n+      '*.config.mjs',\n+    ],\n+  },\n ];\n"
                },
                {
                    "date": 1760735222304,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -27,9 +27,9 @@\n       parserOptions: {\n         ecmaVersion: 2022,\n         sourceType: 'module',\n         // Enable type-aware linting; respects your ./tsconfig.json\n-        project: './tsconfig.json',\n+        project: ['./tsconfig.json', './packages/*/tsconfig.json'],\n         tsconfigRootDir: process.cwd(),\n       },\n       // Bring in Node globals; don't hand-maintain a giant list\n       globals: {\n"
                },
                {
                    "date": 1760735272044,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -231,7 +231,9 @@\n       'node_modules/**',\n       '*.d.ts',\n       '*.config.js',\n       '*.config.mjs',\n+      'packages/*/dist/**',\n+      'packages/*/build/**',\n     ],\n   },\n ];\n"
                },
                {
                    "date": 1760735297340,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -29,8 +29,10 @@\n         sourceType: 'module',\n         // Enable type-aware linting; respects your ./tsconfig.json\n         project: ['./tsconfig.json', './packages/*/tsconfig.json'],\n         tsconfigRootDir: process.cwd(),\n+        // Allow for config files that might not be included in tsconfig\n+        projectService: true,\n       },\n       // Bring in Node globals; don't hand-maintain a giant list\n       globals: {\n         ...globals.node,\n"
                },
                {
                    "date": 1760735334048,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -31,8 +31,9 @@\n         project: ['./tsconfig.json', './packages/*/tsconfig.json'],\n         tsconfigRootDir: process.cwd(),\n         // Allow for config files that might not be included in tsconfig\n         projectService: true,\n+        allowDefaultProject: ['*.config.ts', '*.config.js', '*.config.mjs', 'vitest.config.ts', 'vitest.workspace.ts'],\n       },\n       // Bring in Node globals; don't hand-maintain a giant list\n       globals: {\n         ...globals.node,\n"
                },
                {
                    "date": 1760735353490,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -31,9 +31,9 @@\n         project: ['./tsconfig.json', './packages/*/tsconfig.json'],\n         tsconfigRootDir: process.cwd(),\n         // Allow for config files that might not be included in tsconfig\n         projectService: true,\n-        allowDefaultProject: ['*.config.ts', '*.config.js', '*.config.mjs', 'vitest.config.ts', 'vitest.workspace.ts'],\n+        allowDefaultProject: ['*.config.ts', '*.config.js', '*.config.mjs', 'vitest.config.ts', 'vitest.workspace.ts', 'packages/cli/tsup.config.ts', 'packages/runner-node/tsup.config.ts'],\n       },\n       // Bring in Node globals; don't hand-maintain a giant list\n       globals: {\n         ...globals.node,\n"
                },
                {
                    "date": 1760735405623,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -27,13 +27,10 @@\n       parserOptions: {\n         ecmaVersion: 2022,\n         sourceType: 'module',\n         // Enable type-aware linting; respects your ./tsconfig.json\n-        project: ['./tsconfig.json', './packages/*/tsconfig.json'],\n+        project: ['./tsconfig.json', './packages/*/tsconfig.json', './config-tsconfig.json'],\n         tsconfigRootDir: process.cwd(),\n-        // Allow for config files that might not be included in tsconfig\n-        projectService: true,\n-        allowDefaultProject: ['*.config.ts', '*.config.js', '*.config.mjs', 'vitest.config.ts', 'vitest.workspace.ts', 'packages/cli/tsup.config.ts', 'packages/runner-node/tsup.config.ts'],\n       },\n       // Bring in Node globals; don't hand-maintain a giant list\n       globals: {\n         ...globals.node,\n"
                },
                {
                    "date": 1760735866774,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,239 +1,217 @@\n-import js from '@eslint/js';\n-import * as tseslint from '@typescript-eslint/eslint-plugin';\n-import tsParser from '@typescript-eslint/parser';\n+// eslint.config.js\n+import path from 'node:path';\n+\n+// Plugins\n+import tseslint from '@typescript-eslint/eslint-plugin';\n+import tsparser from '@typescript-eslint/parser';\n+import stylistic from '@stylistic/eslint-plugin';\n+import importPlugin from 'eslint-plugin-import';\n+import promise from 'eslint-plugin-promise';\n+import security from 'eslint-plugin-security';\n+import sonarjs from 'eslint-plugin-sonarjs';\n+import unicorn from 'eslint-plugin-unicorn';\n import vitest from 'eslint-plugin-vitest';\n-import globals from 'globals';\n-import tseslintConfigs from 'typescript-eslint';\n+import prettier from 'eslint-plugin-prettier';\n \n-export default [\n-  // Base JS recommended\n-  js.configs.recommended,\n+{\n+  ignores: [\n+    'dist',\n+    'build',\n+    'node_modules',\n+    'coverage',\n+    '*.d.ts',\n+    '*.min.js',\n+    '**/*.gen.ts',\n+    '**/*.generated.ts',\n+    '**/__generated__/**',\n+    '.turbo',\n+    '.next',\n+    '.vite',\n+    '.cache',\n+  ],\n+};\n+import prettierConfig from 'eslint-config-prettier';\n \n-  // Apply TS-ESLint presets first (for TypeScript files), so custom rules can override them\n-  ...tseslintConfigs.configs.recommended.map((config) => ({\n-    ...config,\n-    files: ['**/*.ts', '**/*.tsx'],\n-  })),\n-  ...tseslintConfigs.configs.recommendedTypeChecked.map((config) => ({\n-    ...config,\n-    files: ['**/*.ts', '**/*.tsx'],\n-  })),\n+// Utility to merge configs\n+const merge = (...configs) => configs.flat();\n \n-  // TypeScript: apply to TS files with type-aware rules\n+export default [\n   {\n-    files: ['**/*.ts', '**/*.tsx'],\n+    ignores: [\n+      'dist',\n+      'build',\n+      'node_modules',\n+      'coverage',\n+      '*.d.ts',\n+      '*.min.js',\n+      '**/*.gen.ts',\n+      '**/*.generated.ts',\n+      '**/__generated__/**',\n+      '.turbo',\n+      '.next',\n+      '.vite',\n+      '.cache',\n+    ],\n+  },\n+  {\n+    files: ['**/*.{ts,tsx,js,jsx}'],\n     languageOptions: {\n-      parser: tsParser,\n+      parser: tsparser,\n       parserOptions: {\n         ecmaVersion: 2022,\n         sourceType: 'module',\n-        // Enable type-aware linting; respects your ./tsconfig.json\n-        project: ['./tsconfig.json', './packages/*/tsconfig.json', './config-tsconfig.json'],\n-        tsconfigRootDir: process.cwd(),\n+        project: ['./tsconfig.json', './packages/*/tsconfig.json'],\n+        tsconfigRootDir: path.resolve(),\n+        projectService: true,\n       },\n-      // Bring in Node globals; don't hand-maintain a giant list\n       globals: {\n-        ...globals.node,\n+        NodeJS: true,\n       },\n     },\n-    // Custom rules that override the presets above\n+    plugins: {\n+      '@typescript-eslint': tseslint,\n+      '@stylistic': stylistic,\n+      import: importPlugin,\n+      promise,\n+      security,\n+      sonarjs,\n+      unicorn,\n+      vitest,\n+      prettier,\n+    },\n     rules: {\n-      // --- Your curated rules (kept, with one removal noted) ---\n-      '@typescript-eslint/no-unused-vars': [\n-        'warn',\n-        {\n-          argsIgnorePattern: '^_',\n-          varsIgnorePattern: '^_',\n-          caughtErrorsIgnorePattern: '^_',\n-        },\n-      ],\n-      '@typescript-eslint/no-explicit-any': 'warn',\n-      '@typescript-eslint/no-unsafe-argument': 'warn',\n-      '@typescript-eslint/no-unsafe-assignment': 'warn',\n-      '@typescript-eslint/no-unsafe-call': 'warn',\n-      '@typescript-eslint/no-unsafe-member-access': 'warn',\n-      '@typescript-eslint/no-unsafe-return': 'warn',\n-      // Allow Function type for dynamic proxy systems where exact signatures vary\n-      '@typescript-eslint/no-unsafe-function-type': 'off',\n-      '@typescript-eslint/explicit-function-return-type': [\n-        'warn',\n-        {\n-          allowExpressions: true,\n-          allowTypedFunctionExpressions: true,\n-        },\n-      ],\n+      // Prettier\n+      'prettier/prettier': 'error',\n+\n+      // TS\n+      '@typescript-eslint/explicit-function-return-type': ['error', {\n+        allowExpressions: true,\n+        allowTypedFunctionExpressions: true,\n+        allowHigherOrderFunctions: true,\n+      }],\n       '@typescript-eslint/explicit-module-boundary-types': 'warn',\n-      '@typescript-eslint/no-floating-promises': 'error',\n+      '@typescript-eslint/no-explicit-any': 'error',\n+      '@typescript-eslint/only-throw-error': 'error',\n+      '@typescript-eslint/no-unused-vars': ['error', {\n+        argsIgnorePattern: '^_',\n+        varsIgnorePattern: '^_',\n+        caughtErrorsIgnorePattern: '^_',\n+      }],\n+      '@typescript-eslint/consistent-type-imports': ['error', {\n+        prefer: 'type-imports',\n+        fixStyle: 'separate-type-imports',\n+      }],\n+      '@typescript-eslint/consistent-type-exports': ['error', {\n+        fixMixedExportsWithInlineTypeSpecifier: true,\n+      }],\n+      '@typescript-eslint/no-floating-promises': ['error', { ignoreVoid: true, ignoreIIFE: true }],\n+      '@typescript-eslint/no-misused-promises': ['error', { checksVoidReturn: { attributes: false } }],\n       '@typescript-eslint/await-thenable': 'error',\n-      '@typescript-eslint/no-misused-promises': 'error',\n-      // Relaxed: Google, Airbnb, and Microsoft codebases allow async without await for interface consistency\n-      '@typescript-eslint/require-await': 'warn',\n-      '@typescript-eslint/prefer-promise-reject-errors': 'error',\n-      // Relaxed: Industry standard (AWS SDK, Google Cloud, Pino logger) allows unknown in templates for logging\n-      '@typescript-eslint/restrict-template-expressions': [\n-        'warn',\n-        {\n-          allowNumber: true,\n-          allowBoolean: true,\n-          allowAny: false,\n-          allowNullish: true,\n-          allowRegExp: false,\n-        },\n-      ],\n-      // Relaxed: Stripe and Shopify treat as warning; intentional in logging contexts\n-      '@typescript-eslint/no-base-to-string': 'warn',\n-      '@typescript-eslint/strict-boolean-expressions': [\n-        'warn',\n-        {\n-          allowString: true,\n-          allowNumber: true,\n-          allowNullableObject: true,\n-        },\n-      ],\n-      '@typescript-eslint/prefer-readonly': 'error',\n-      '@typescript-eslint/no-unnecessary-condition': [\n-        'error',\n-        { allowConstantLoopConditions: true },\n-      ],\n-      '@typescript-eslint/no-unnecessary-type-assertion': 'error',\n-      '@typescript-eslint/prefer-nullish-coalescing': 'error',\n-      '@typescript-eslint/prefer-optional-chain': 'error',\n-      '@typescript-eslint/prefer-string-starts-ends-with': 'error',\n-      '@typescript-eslint/prefer-includes': 'error',\n-      '@typescript-eslint/switch-exhaustiveness-check': 'error',\n+      '@typescript-eslint/promise-function-async': 'error',\n \n-      // Naming conventions (relaxed)\n-      '@typescript-eslint/naming-convention': [\n-        'warn',\n-        { selector: 'default', format: ['camelCase'] },\n-        {\n-          selector: 'variable',\n-          format: ['camelCase', 'UPPER_CASE', 'PascalCase'],\n-          leadingUnderscore: 'allow',\n-        },\n-        { selector: 'parameter', format: ['camelCase'], leadingUnderscore: 'allow' },\n-        { selector: 'property', format: null },\n-        { selector: 'method', format: ['camelCase'], leadingUnderscore: 'allow' },\n+      // Style (brace style left to Prettier)\n+      'brace-style': 'off',\n+      'lines-between-class-members': 'off',\n+      '@typescript-eslint/lines-between-class-members': ['error', 'always', {\n+        exceptAfterSingleLine: true,\n+      }],\n+\n+      // Naming\n+      '@typescript-eslint/naming-convention': ['error',\n+        { selector: 'default', format: ['camelCase'], leadingUnderscore: 'allow', trailingUnderscore: 'forbid' },\n+        { selector: 'variable', format: ['camelCase', 'UPPER_CASE', 'PascalCase'], leadingUnderscore: 'allow' },\n         { selector: 'typeLike', format: ['PascalCase'] },\n-        { selector: 'interface', format: ['PascalCase'], prefix: ['I'] },\n-        { selector: 'typeAlias', format: ['PascalCase'], prefix: ['T'] },\n-        { selector: 'enum', format: ['PascalCase'] },\n-        { selector: 'enumMember', format: ['UPPER_CASE'] },\n+        { selector: 'enumMember', format: ['PascalCase', 'UPPER_CASE'] },\n+        { selector: 'import', format: ['camelCase', 'PascalCase'] },\n       ],\n \n-      // JS/General\n-      'no-console': ['off', { allow: ['warn', 'error'] }], // Off during dev\n+      // Imports\n+      'import/order': ['error', {\n+        groups: ['builtin', 'external', 'internal', 'parent', 'sibling', 'index', 'object', 'type'],\n+        'newlines-between': 'always',\n+        alphabetize: { order: 'asc', caseInsensitive: true },\n+      }],\n+      'import/no-duplicates': 'error',\n+      'import/no-extraneous-dependencies': ['error', {\n+        devDependencies: [\n+          '**/*.{test,spec}.ts',\n+          '**/__tests__/**',\n+          '**/vitest.config.{ts,js,cjs,mjs}',\n+          '**/jest.config.{ts,js,cjs,mjs}',\n+          '**/scripts/**',\n+          '**/*.config.{ts,js,cjs,mjs}',\n+        ],\n+      }],\n+      'import/prefer-default-export': 'off',\n+      'import/no-default-export': 'error',\n+      'import/extensions': ['error', 'ignorePackages', {\n+        ts: 'never', tsx: 'never', js: 'never', mjs: 'never', cjs: 'never',\n+      }],\n+\n+      // Unicorn\n+      'unicorn/prevent-abbreviations': ['error', {\n+        allowList: { args: true, env: true, params: true, props: true, Props: true, ref: true, Ref: true },\n+      }],\n+      'unicorn/filename-case': ['error', { cases: { kebabCase: true, pascalCase: true } }],\n+      'unicorn/no-null': 'off',\n+      'unicorn/prefer-module': 'off',\n+      'unicorn/prefer-top-level-await': 'off',\n+\n+      // Security\n+      'security/detect-object-injection': 'off',\n+      'security/detect-non-literal-fs-filename': 'off',\n+\n+      // Sonar\n+      'sonarjs/cognitive-complexity': ['error', 15],\n+      'sonarjs/no-duplicate-string': ['error', { threshold: 5 }],\n+\n+      // Quality\n+      'no-console': ['warn', { allow: ['warn', 'error', 'info', 'debug'] }],\n       'no-debugger': 'error',\n       'no-alert': 'error',\n       'no-var': 'error',\n       'prefer-const': 'error',\n       'prefer-arrow-callback': 'error',\n       'prefer-template': 'error',\n-      'prefer-destructuring': [\n-        'error',\n-        {\n-          VariableDeclarator: { array: false, object: true },\n-          AssignmentExpression: { array: false, object: false },\n-        },\n-      ],\n-      'no-duplicate-imports': 'error',\n-      'no-useless-concat': 'error',\n-      'no-useless-return': 'error',\n-      'no-useless-rename': 'error',\n-      'object-shorthand': 'error',\n-      'prefer-rest-params': 'error',\n-      'prefer-spread': 'error',\n+      'prefer-destructuring': ['error', { array: false, object: true }],\n+      'no-nested-ternary': 'error',\n+      'no-unneeded-ternary': 'error',\n+      'no-param-reassign': ['error', {\n+        props: true,\n+        ignorePropertyModificationsFor: ['acc', 'accumulator', 'draft', 'state'],\n+      }],\n+      eqeqeq: ['error', 'always'],\n+      curly: ['error', 'all'],\n \n-      // Error prevention\n-      'no-throw-literal': 'error',\n-      'no-return-await': 'error',\n-      'no-async-promise-executor': 'error',\n-      'no-promise-executor-return': 'error',\n-      'require-atomic-updates': 'error',\n-\n       // Complexity\n-      complexity: ['warn', 20],\n-      'max-depth': ['warn', 4],\n-      'max-lines-per-function': ['warn', { max: 200, skipBlankLines: true, skipComments: true }],\n-      'max-params': ['warn', 5],\n+      complexity: ['error', 10],\n+      'max-depth': ['error', 4],\n+      'max-lines': ['error', { max: 400, skipBlankLines: true, skipComments: true }],\n+      'max-lines-per-function': ['error', { max: 80, skipBlankLines: true, skipComments: true }],\n+      'max-params': ['error', 4],\n \n-      // Security-ish\n-      'no-eval': 'error',\n-      'no-implied-eval': 'error',\n-      'no-new-func': 'error',\n-      'no-script-url': 'error',\n-\n-      // Best practices\n-      eqeqeq: ['error', 'always', { null: 'ignore' }], // Allow == null for checking both null and undefined\n-      'no-param-reassign': ['error', { props: false }],\n-      'no-shadow': 'off',\n-      // Airbnb and StandardJS allow shadowing common parameter names like 'error', 'err', 'data'\n-      '@typescript-eslint/no-shadow': [\n-        'error',\n-        {\n-          allow: ['error', 'err', 'resolve', 'reject', 'done', 'next', 'callback'],\n-        },\n-      ],\n-      'no-undef': 'off',\n-      'consistent-return': 'off', // TypeScript's type system handles return consistency\n-      'default-case': 'off', // Redundant with @typescript-eslint/switch-exhaustiveness-check\n-      'default-case-last': 'error',\n-      'no-fallthrough': 'error',\n-\n-      // Imports\n-      'sort-imports': [\n-        'warn',\n-        {\n-          ignoreCase: false,\n-          ignoreDeclarationSort: true,\n-          ignoreMemberSort: false,\n-          memberSyntaxSortOrder: ['none', 'all', 'multiple', 'single'],\n-          allowSeparatedGroups: false,\n-        },\n-      ],\n+      // Comments\n+      'spaced-comment': ['error', 'always', { markers: ['/'] }],\n     },\n   },\n-\n-  // Tests: apply Vitest env + relax strict rules in tests\n+  // Vitest-specific override\n   {\n-    files: ['**/*.test.ts', '**/*.spec.ts', '**/tests/**/*.ts'],\n-    plugins: { vitest },\n+    files: ['**/*.{test,spec}.ts', '**/__tests__/**/*.ts'],\n     languageOptions: {\n-      globals: vitest.environments.env.globals,\n+      env: { 'vitest/globals': true },\n     },\n+    plugins: { vitest },\n     rules: {\n       '@typescript-eslint/no-explicit-any': 'off',\n-      '@typescript-eslint/no-unsafe-argument': 'off',\n       '@typescript-eslint/no-unsafe-assignment': 'off',\n-      '@typescript-eslint/no-unsafe-call': 'off',\n       '@typescript-eslint/no-unsafe-member-access': 'off',\n-      '@typescript-eslint/no-unsafe-return': 'off',\n-      'no-magic-numbers': 'off',\n+      'sonarjs/no-duplicate-string': 'off',\n       'max-lines-per-function': 'off',\n     },\n   },\n-\n-  // Config files: allow CJS interop and console\n+  // Config files override\n   {\n-    files: ['*.config.js', '*.config.ts', '*.config.mjs'],\n-    rules: {\n-      '@typescript-eslint/no-require-imports': 'off',\n-      'no-console': 'off',\n-    },\n+    files: ['*.config.{ts,js,cjs,mjs}'],\n+    rules: { 'import/no-default-export': 'off' },\n   },\n-\n-  // Ignores\n-  {\n-    ignores: [\n-      'dist/**',\n-      'build/**',\n-      'coverage/**',\n-      'node_modules/**',\n-      '*.d.ts',\n-      '*.config.js',\n-      '*.config.mjs',\n-      'packages/*/dist/**',\n-      'packages/*/build/**',\n-    ],\n-  },\n ];\n"
                },
                {
                    "date": 1760735875545,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -12,25 +12,8 @@\n import unicorn from 'eslint-plugin-unicorn';\n import vitest from 'eslint-plugin-vitest';\n import prettier from 'eslint-plugin-prettier';\n \n-{\n-  ignores: [\n-    'dist',\n-    'build',\n-    'node_modules',\n-    'coverage',\n-    '*.d.ts',\n-    '*.min.js',\n-    '**/*.gen.ts',\n-    '**/*.generated.ts',\n-    '**/__generated__/**',\n-    '.turbo',\n-    '.next',\n-    '.vite',\n-    '.cache',\n-  ],\n-};\n import prettierConfig from 'eslint-config-prettier';\n \n // Utility to merge configs\n const merge = (...configs) => configs.flat();\n"
                },
                {
                    "date": 1760735888739,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -94,12 +94,10 @@\n \n       // Style (brace style left to Prettier)\n       'brace-style': 'off',\n       'lines-between-class-members': 'off',\n-      '@typescript-eslint/lines-between-class-members': ['error', 'always', {\n-        exceptAfterSingleLine: true,\n-      }],\n \n+\n       // Naming\n       '@typescript-eslint/naming-convention': ['error',\n         { selector: 'default', format: ['camelCase'], leadingUnderscore: 'allow', trailingUnderscore: 'forbid' },\n         { selector: 'variable', format: ['camelCase', 'UPPER_CASE', 'PascalCase'], leadingUnderscore: 'allow' },\n"
                },
                {
                    "date": 1760735912826,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,198 +1,192 @@\n-// eslint.config.js\n-import path from 'node:path';\n-\n-// Plugins\n-import tseslint from '@typescript-eslint/eslint-plugin';\n-import tsparser from '@typescript-eslint/parser';\n-import stylistic from '@stylistic/eslint-plugin';\n-import importPlugin from 'eslint-plugin-import';\n-import promise from 'eslint-plugin-promise';\n-import security from 'eslint-plugin-security';\n-import sonarjs from 'eslint-plugin-sonarjs';\n-import unicorn from 'eslint-plugin-unicorn';\n+import js from '@eslint/js';\n+import * as tseslint from '@typescript-eslint/eslint-plugin';\n+import tsParser from '@typescript-eslint/parser';\n import vitest from 'eslint-plugin-vitest';\n-import prettier from 'eslint-plugin-prettier';\n+import globals from 'globals';\n+import tseslintConfigs from 'typescript-eslint';\n \n-import prettierConfig from 'eslint-config-prettier';\n+export default [\n+  // Base JS recommended\n+  js.configs.recommended,\n \n-// Utility to merge configs\n-const merge = (...configs) => configs.flat();\n+  // Apply TS-ESLint presets first (for TypeScript files), so custom rules can override them\n+  ...tseslintConfigs.configs.recommended.map((config) => ({\n+    ...config,\n+    files: ['**/*.ts', '**/*.tsx'],\n+  })),\n+  ...tseslintConfigs.configs.recommendedTypeChecked.map((config) => ({\n+    ...config,\n+    files: ['**/*.ts', '**/*.tsx'],\n+  })),\n \n-export default [\n+  // TypeScript: apply to TS files with type-aware rules\n   {\n-    ignores: [\n-      'dist',\n-      'build',\n-      'node_modules',\n-      'coverage',\n-      '*.d.ts',\n-      '*.min.js',\n-      '**/*.gen.ts',\n-      '**/*.generated.ts',\n-      '**/__generated__/**',\n-      '.turbo',\n-      '.next',\n-      '.vite',\n-      '.cache',\n-    ],\n-  },\n-  {\n-    files: ['**/*.{ts,tsx,js,jsx}'],\n+    files: ['**/*.ts', '**/*.tsx'],\n     languageOptions: {\n-      parser: tsparser,\n+      parser: tsParser,\n       parserOptions: {\n         ecmaVersion: 2022,\n         sourceType: 'module',\n-        project: ['./tsconfig.json', './packages/*/tsconfig.json'],\n-        tsconfigRootDir: path.resolve(),\n-        projectService: true,\n+        // Enable type-aware linting; respects your ./tsconfig.json\n+        project: ['./tsconfig.json', './packages/*/tsconfig.json', './config-tsconfig.json'],\n+        tsconfigRootDir: process.cwd(),\n       },\n+      // Bring in Node globals; don't hand-maintain a giant list\n       globals: {\n-        NodeJS: true,\n+        ...globals.node,\n       },\n     },\n-    plugins: {\n-      '@typescript-eslint': tseslint,\n-      '@stylistic': stylistic,\n-      import: importPlugin,\n-      promise,\n-      security,\n-      sonarjs,\n-      unicorn,\n-      vitest,\n-      prettier,\n-    },\n+    // Custom rules that override the presets above\n     rules: {\n-      // Prettier\n-      'prettier/prettier': 'error',\n-\n-      // TS\n-      '@typescript-eslint/explicit-function-return-type': ['error', {\n-        allowExpressions: true,\n-        allowTypedFunctionExpressions: true,\n-        allowHigherOrderFunctions: true,\n-      }],\n+      // --- Your curated rules (kept, with one removal noted) ---\n+      '@typescript-eslint/no-unused-vars': [\n+        'warn',\n+        {\n+          argsIgnorePattern: '^_',\n+          varsIgnorePattern: '^_',\n+          caughtErrorsIgnorePattern: '^_',\n+        },\n+      ],\n+      '@typescript-eslint/no-explicit-any': 'warn',\n+      '@typescript-eslint/no-unsafe-argument': 'warn',\n+      '@typescript-eslint/no-unsafe-assignment': 'warn',\n+      '@typescript-eslint/no-unsafe-call': 'warn',\n+      '@typescript-eslint/no-unsafe-member-access': 'warn',\n+      '@typescript-eslint/no-unsafe-return': 'warn',\n+      '@typescript-eslint/explicit-function-return-type': [\n+        'warn',\n+        {\n+          allowExpressions: true,\n+          allowTypedFunctionExpressions: true,\n+        },\n+      ],\n       '@typescript-eslint/explicit-module-boundary-types': 'warn',\n-      '@typescript-eslint/no-explicit-any': 'error',\n-      '@typescript-eslint/only-throw-error': 'error',\n-      '@typescript-eslint/no-unused-vars': ['error', {\n-        argsIgnorePattern: '^_',\n-        varsIgnorePattern: '^_',\n-        caughtErrorsIgnorePattern: '^_',\n-      }],\n-      '@typescript-eslint/consistent-type-imports': ['error', {\n-        prefer: 'type-imports',\n-        fixStyle: 'separate-type-imports',\n-      }],\n-      '@typescript-eslint/consistent-type-exports': ['error', {\n-        fixMixedExportsWithInlineTypeSpecifier: true,\n-      }],\n-      '@typescript-eslint/no-floating-promises': ['error', { ignoreVoid: true, ignoreIIFE: true }],\n-      '@typescript-eslint/no-misused-promises': ['error', { checksVoidReturn: { attributes: false } }],\n+      '@typescript-eslint/no-floating-promises': 'error',\n       '@typescript-eslint/await-thenable': 'error',\n-      '@typescript-eslint/promise-function-async': 'error',\n+      '@typescript-eslint/no-misused-promises': 'error',\n+      // Relaxed: Google, Airbnb, and Microsoft codebases allow async without await for interface consistency\n+      '@typescript-eslint/require-await': 'warn',\n \n-      // Style (brace style left to Prettier)\n-      'brace-style': 'off',\n-      'lines-between-class-members': 'off',\n-\n-\n-      // Naming\n-      '@typescript-eslint/naming-convention': ['error',\n-        { selector: 'default', format: ['camelCase'], leadingUnderscore: 'allow', trailingUnderscore: 'forbid' },\n-        { selector: 'variable', format: ['camelCase', 'UPPER_CASE', 'PascalCase'], leadingUnderscore: 'allow' },\n+      // Naming conventions (relaxed)\n+      '@typescript-eslint/naming-convention': [\n+        'warn',\n+        { selector: 'default', format: ['camelCase'] },\n+        {\n+          selector: 'variable',\n+          format: ['camelCase', 'UPPER_CASE', 'PascalCase'],\n+          leadingUnderscore: 'allow',\n+        },\n+        { selector: 'parameter', format: ['camelCase'], leadingUnderscore: 'allow' },\n+        { selector: 'property', format: null },\n+        { selector: 'method', format: ['camelCase'], leadingUnderscore: 'allow' },\n         { selector: 'typeLike', format: ['PascalCase'] },\n-        { selector: 'enumMember', format: ['PascalCase', 'UPPER_CASE'] },\n-        { selector: 'import', format: ['camelCase', 'PascalCase'] },\n+        { selector: 'interface', format: ['PascalCase'], prefix: ['I'] },\n+        { selector: 'typeAlias', format: ['PascalCase'], prefix: ['T'] },\n+        { selector: 'enum', format: ['PascalCase'] },\n+        { selector: 'enumMember', format: ['UPPER_CASE'] },\n       ],\n \n-      // Imports\n-      'import/order': ['error', {\n-        groups: ['builtin', 'external', 'internal', 'parent', 'sibling', 'index', 'object', 'type'],\n-        'newlines-between': 'always',\n-        alphabetize: { order: 'asc', caseInsensitive: true },\n-      }],\n-      'import/no-duplicates': 'error',\n-      'import/no-extraneous-dependencies': ['error', {\n-        devDependencies: [\n-          '**/*.{test,spec}.ts',\n-          '**/__tests__/**',\n-          '**/vitest.config.{ts,js,cjs,mjs}',\n-          '**/jest.config.{ts,js,cjs,mjs}',\n-          '**/scripts/**',\n-          '**/*.config.{ts,js,cjs,mjs}',\n-        ],\n-      }],\n-      'import/prefer-default-export': 'off',\n-      'import/no-default-export': 'error',\n-      'import/extensions': ['error', 'ignorePackages', {\n-        ts: 'never', tsx: 'never', js: 'never', mjs: 'never', cjs: 'never',\n-      }],\n-\n-      // Unicorn\n-      'unicorn/prevent-abbreviations': ['error', {\n-        allowList: { args: true, env: true, params: true, props: true, Props: true, ref: true, Ref: true },\n-      }],\n-      'unicorn/filename-case': ['error', { cases: { kebabCase: true, pascalCase: true } }],\n-      'unicorn/no-null': 'off',\n-      'unicorn/prefer-module': 'off',\n-      'unicorn/prefer-top-level-await': 'off',\n-\n-      // Security\n-      'security/detect-object-injection': 'off',\n-      'security/detect-non-literal-fs-filename': 'off',\n-\n-      // Sonar\n-      'sonarjs/cognitive-complexity': ['error', 15],\n-      'sonarjs/no-duplicate-string': ['error', { threshold: 5 }],\n-\n-      // Quality\n-      'no-console': ['warn', { allow: ['warn', 'error', 'info', 'debug'] }],\n+      // JS/General\n+      'no-console': ['off', { allow: ['warn', 'error'] }], // Off during dev\n       'no-debugger': 'error',\n       'no-alert': 'error',\n       'no-var': 'error',\n       'prefer-const': 'error',\n       'prefer-arrow-callback': 'error',\n       'prefer-template': 'error',\n-      'prefer-destructuring': ['error', { array: false, object: true }],\n-      'no-nested-ternary': 'error',\n-      'no-unneeded-ternary': 'error',\n-      'no-param-reassign': ['error', {\n-        props: true,\n-        ignorePropertyModificationsFor: ['acc', 'accumulator', 'draft', 'state'],\n-      }],\n-      eqeqeq: ['error', 'always'],\n-      curly: ['error', 'all'],\n+      'prefer-destructuring': [\n+        'error',\n+        {\n+          VariableDeclarator: { array: false, object: true },\n+          AssignmentExpression: { array: false, object: false },\n+        },\n+      ],\n+      'no-duplicate-imports': 'error',\n+      'no-useless-concat': 'error',\n+      'no-useless-return': 'error',\n+      'no-useless-rename': 'error',\n+      'object-shorthand': 'error',\n+      'prefer-rest-params': 'error',\n+      'prefer-spread': 'error',\n \n+      // Error prevention\n+      'no-throw-literal': 'error',\n+      'no-return-await': 'error',\n+      'no-async-promise-executor': 'error',\n+      'no-promise-executor-return': 'error',\n+      'require-atomic-updates': 'error',\n+\n       // Complexity\n-      complexity: ['error', 10],\n-      'max-depth': ['error', 4],\n-      'max-lines': ['error', { max: 400, skipBlankLines: true, skipComments: true }],\n-      'max-lines-per-function': ['error', { max: 80, skipBlankLines: true, skipComments: true }],\n-      'max-params': ['error', 4],\n+      complexity: ['warn', 20],\n+      'max-depth': ['warn', 4],\n+      'max-lines-per-function': ['warn', { max: 200, skipBlankLines: true, skipComments: true }],\n+      'max-params': ['warn', 5],\n \n-      // Comments\n-      'spaced-comment': ['error', 'always', { markers: ['/'] }],\n+      // Security-ish\n+      'no-eval': 'error',\n+      'no-implied-eval': 'error',\n+      'no-new-func': 'error',\n+      'no-script-url': 'error',\n+\n+      // Best practices\n+      eqeqeq: ['error', 'always', { null: 'ignore' }], // Allow == null for checking both null and undefined\n+      'no-param-reassign': ['error', { props: false }],\n+      'no-shadow': 'off',\n+      // Airbnb and StandardJS allow shadowing common parameter names like 'error', 'err', 'data'\n+      '@typescript-eslint/no-shadow': [\n+        'error',\n+        {\n+          allow: ['error', 'err', 'resolve', 'reject', 'done', 'next', 'callback'],\n+        },\n+      ],\n+      'no-undef': 'off',\n+      'consistent-return': 'off', // TypeScript's type system handles return consistency\n+      'default-case': 'off', // Redundant with @typescript-eslint/switch-exhaustiveness-check\n+      'default-case-last': 'error',\n+      'no-fallthrough': 'error',\n     },\n   },\n-  // Vitest-specific override\n+\n+  // Tests: apply Vitest env + relax strict rules in tests\n   {\n-    files: ['**/*.{test,spec}.ts', '**/__tests__/**/*.ts'],\n+    files: ['**/*.test.ts', '**/*.spec.ts', '**/tests/**/*.ts'],\n+    plugins: { vitest },\n     languageOptions: {\n-      env: { 'vitest/globals': true },\n+      globals: vitest.environments.env.globals,\n     },\n-    plugins: { vitest },\n     rules: {\n       '@typescript-eslint/no-explicit-any': 'off',\n+      '@typescript-eslint/no-unsafe-argument': 'off',\n       '@typescript-eslint/no-unsafe-assignment': 'off',\n+      '@typescript-eslint/no-unsafe-call': 'off',\n       '@typescript-eslint/no-unsafe-member-access': 'off',\n-      'sonarjs/no-duplicate-string': 'off',\n+      '@typescript-eslint/no-unsafe-return': 'off',\n+      'no-magic-numbers': 'off',\n       'max-lines-per-function': 'off',\n     },\n   },\n-  // Config files override\n+\n+  // Config files: allow CJS interop and console\n   {\n-    files: ['*.config.{ts,js,cjs,mjs}'],\n-    rules: { 'import/no-default-export': 'off' },\n+    files: ['*.config.js', '*.config.ts', '*.config.mjs'],\n+    rules: {\n+      '@typescript-eslint/no-require-imports': 'off',\n+      'no-console': 'off',\n+    },\n   },\n+\n+  // Ignores\n+  {\n+    ignores: [\n+      'dist/**',\n+      'build/**',\n+      'coverage/**',\n+      'node_modules/**',\n+      '*.d.ts',\n+      '*.config.js',\n+      '*.config.mjs',\n+      'packages/*/dist/**',\n+      'packages/*/build/**',\n+    ],\n+  },\n ];\n"
                },
                {
                    "date": 1760736208571,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -182,10 +182,15 @@\n       'build/**',\n       'coverage/**',\n       'node_modules/**',\n       '*.d.ts',\n-      '*.config.js',\n-      '*.config.mjs',\n+      '*.min.js',\n+      '.pnpm-store/**',\n+      '.turbo/**',\n+      '.cache/**',\n+      'packages/*/tsup.config.ts',\n+      'vitest.config.ts',\n+      'vitest.workspace.ts',\n       'packages/*/dist/**',\n       'packages/*/build/**',\n     ],\n   },\n"
                },
                {
                    "date": 1760736223131,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,6 +1,5 @@\n import js from '@eslint/js';\n-import * as tseslint from '@typescript-eslint/eslint-plugin';\n import tsParser from '@typescript-eslint/parser';\n import vitest from 'eslint-plugin-vitest';\n import globals from 'globals';\n import tseslintConfigs from 'typescript-eslint';\n"
                },
                {
                    "date": 1760736232106,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -27,9 +27,9 @@\n         ecmaVersion: 2022,\n         sourceType: 'module',\n         // Enable type-aware linting; respects your ./tsconfig.json\n         project: ['./tsconfig.json', './packages/*/tsconfig.json', './config-tsconfig.json'],\n-        tsconfigRootDir: process.cwd(),\n+        tsconfigRootDir: import.meta.dirname || process.cwd(),\n       },\n       // Bring in Node globals; don't hand-maintain a giant list\n       globals: {\n         ...globals.node,\n"
                },
                {
                    "date": 1760736240682,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -27,9 +27,8 @@\n         ecmaVersion: 2022,\n         sourceType: 'module',\n         // Enable type-aware linting; respects your ./tsconfig.json\n         project: ['./tsconfig.json', './packages/*/tsconfig.json', './config-tsconfig.json'],\n-        tsconfigRootDir: import.meta.dirname || process.cwd(),\n       },\n       // Bring in Node globals; don't hand-maintain a giant list\n       globals: {\n         ...globals.node,\n"
                },
                {
                    "date": 1760738857341,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,195 +1,62 @@\n-import js from '@eslint/js';\n-import tsParser from '@typescript-eslint/parser';\n-import vitest from 'eslint-plugin-vitest';\n-import globals from 'globals';\n-import tseslintConfigs from 'typescript-eslint';\n-\n export default [\n-  // Base JS recommended\n-  js.configs.recommended,\n-\n-  // Apply TS-ESLint presets first (for TypeScript files), so custom rules can override them\n-  ...tseslintConfigs.configs.recommended.map((config) => ({\n-    ...config,\n-    files: ['**/*.ts', '**/*.tsx'],\n-  })),\n-  ...tseslintConfigs.configs.recommendedTypeChecked.map((config) => ({\n-    ...config,\n-    files: ['**/*.ts', '**/*.tsx'],\n-  })),\n-\n-  // TypeScript: apply to TS files with type-aware rules\n   {\n-    files: ['**/*.ts', '**/*.tsx'],\n+    files: ['**/*.{ts,tsx,js,jsx}'],\n     languageOptions: {\n-      parser: tsParser,\n+      parser: '@typescript-eslint/parser',\n       parserOptions: {\n         ecmaVersion: 2022,\n         sourceType: 'module',\n-        // Enable type-aware linting; respects your ./tsconfig.json\n-        project: ['./tsconfig.json', './packages/*/tsconfig.json', './config-tsconfig.json'],\n+        project: ['./tsconfig.json', './packages/*/tsconfig.json'],\n+        tsconfigRootDir: process.cwd(),\n       },\n-      // Bring in Node globals; don't hand-maintain a giant list\n       globals: {\n-        ...globals.node,\n+        console: 'readonly',\n+        process: 'readonly',\n+        Buffer: 'readonly',\n+        __dirname: 'readonly',\n+        __filename: 'readonly',\n       },\n     },\n-    // Custom rules that override the presets above\n     rules: {\n-      // --- Your curated rules (kept, with one removal noted) ---\n+      // TypeScript strict rules\n       '@typescript-eslint/no-unused-vars': [\n         'warn',\n         {\n           argsIgnorePattern: '^_',\n           varsIgnorePattern: '^_',\n-          caughtErrorsIgnorePattern: '^_',\n         },\n       ],\n       '@typescript-eslint/no-explicit-any': 'warn',\n-      '@typescript-eslint/no-unsafe-argument': 'warn',\n-      '@typescript-eslint/no-unsafe-assignment': 'warn',\n-      '@typescript-eslint/no-unsafe-call': 'warn',\n-      '@typescript-eslint/no-unsafe-member-access': 'warn',\n-      '@typescript-eslint/no-unsafe-return': 'warn',\n-      '@typescript-eslint/explicit-function-return-type': [\n-        'warn',\n-        {\n-          allowExpressions: true,\n-          allowTypedFunctionExpressions: true,\n-        },\n-      ],\n-      '@typescript-eslint/explicit-module-boundary-types': 'warn',\n-      '@typescript-eslint/no-floating-promises': 'error',\n-      '@typescript-eslint/await-thenable': 'error',\n-      '@typescript-eslint/no-misused-promises': 'error',\n-      // Relaxed: Google, Airbnb, and Microsoft codebases allow async without await for interface consistency\n-      '@typescript-eslint/require-await': 'warn',\n+      '@typescript-eslint/explicit-function-return-type': 'off',\n \n-      // Naming conventions (relaxed)\n-      '@typescript-eslint/naming-convention': [\n-        'warn',\n-        { selector: 'default', format: ['camelCase'] },\n-        {\n-          selector: 'variable',\n-          format: ['camelCase', 'UPPER_CASE', 'PascalCase'],\n-          leadingUnderscore: 'allow',\n-        },\n-        { selector: 'parameter', format: ['camelCase'], leadingUnderscore: 'allow' },\n-        { selector: 'property', format: null },\n-        { selector: 'method', format: ['camelCase'], leadingUnderscore: 'allow' },\n-        { selector: 'typeLike', format: ['PascalCase'] },\n-        { selector: 'interface', format: ['PascalCase'], prefix: ['I'] },\n-        { selector: 'typeAlias', format: ['PascalCase'], prefix: ['T'] },\n-        { selector: 'enum', format: ['PascalCase'] },\n-        { selector: 'enumMember', format: ['UPPER_CASE'] },\n-      ],\n-\n-      // JS/General\n-      'no-console': ['off', { allow: ['warn', 'error'] }], // Off during dev\n+      // Code quality\n+      'no-console': 'off', // Allow console for CLI tools\n       'no-debugger': 'error',\n-      'no-alert': 'error',\n-      'no-var': 'error',\n       'prefer-const': 'error',\n-      'prefer-arrow-callback': 'error',\n-      'prefer-template': 'error',\n-      'prefer-destructuring': [\n-        'error',\n-        {\n-          VariableDeclarator: { array: false, object: true },\n-          AssignmentExpression: { array: false, object: false },\n-        },\n-      ],\n-      'no-duplicate-imports': 'error',\n-      'no-useless-concat': 'error',\n-      'no-useless-return': 'error',\n-      'no-useless-rename': 'error',\n-      'object-shorthand': 'error',\n-      'prefer-rest-params': 'error',\n-      'prefer-spread': 'error',\n-\n-      // Error prevention\n-      'no-throw-literal': 'error',\n-      'no-return-await': 'error',\n-      'no-async-promise-executor': 'error',\n-      'no-promise-executor-return': 'error',\n-      'require-atomic-updates': 'error',\n-\n-      // Complexity\n-      complexity: ['warn', 20],\n-      'max-depth': ['warn', 4],\n-      'max-lines-per-function': ['warn', { max: 200, skipBlankLines: true, skipComments: true }],\n-      'max-params': ['warn', 5],\n-\n-      // Security-ish\n-      'no-eval': 'error',\n-      'no-implied-eval': 'error',\n-      'no-new-func': 'error',\n-      'no-script-url': 'error',\n-\n-      // Best practices\n-      eqeqeq: ['error', 'always', { null: 'ignore' }], // Allow == null for checking both null and undefined\n-      'no-param-reassign': ['error', { props: false }],\n-      'no-shadow': 'off',\n-      // Airbnb and StandardJS allow shadowing common parameter names like 'error', 'err', 'data'\n-      '@typescript-eslint/no-shadow': [\n-        'error',\n-        {\n-          allow: ['error', 'err', 'resolve', 'reject', 'done', 'next', 'callback'],\n-        },\n-      ],\n-      'no-undef': 'off',\n-      'consistent-return': 'off', // TypeScript's type system handles return consistency\n-      'default-case': 'off', // Redundant with @typescript-eslint/switch-exhaustiveness-check\n-      'default-case-last': 'error',\n-      'no-fallthrough': 'error',\n+      'no-unused-vars': 'off', // Handled by TypeScript rule\n     },\n   },\n \n-  // Tests: apply Vitest env + relax strict rules in tests\n+  // Tests\n   {\n-    files: ['**/*.test.ts', '**/*.spec.ts', '**/tests/**/*.ts'],\n-    plugins: { vitest },\n-    languageOptions: {\n-      globals: vitest.environments.env.globals,\n-    },\n+    files: ['**/*.test.ts', '**/*.spec.ts'],\n     rules: {\n       '@typescript-eslint/no-explicit-any': 'off',\n-      '@typescript-eslint/no-unsafe-argument': 'off',\n-      '@typescript-eslint/no-unsafe-assignment': 'off',\n-      '@typescript-eslint/no-unsafe-call': 'off',\n-      '@typescript-eslint/no-unsafe-member-access': 'off',\n-      '@typescript-eslint/no-unsafe-return': 'off',\n-      'no-magic-numbers': 'off',\n       'max-lines-per-function': 'off',\n     },\n   },\n \n-  // Config files: allow CJS interop and console\n-  {\n-    files: ['*.config.js', '*.config.ts', '*.config.mjs'],\n-    rules: {\n-      '@typescript-eslint/no-require-imports': 'off',\n-      'no-console': 'off',\n-    },\n-  },\n-\n   // Ignores\n   {\n     ignores: [\n       'dist/**',\n       'build/**',\n+      'node_modules/**',\n       'coverage/**',\n-      'node_modules/**',\n       '*.d.ts',\n-      '*.min.js',\n-      '.pnpm-store/**',\n-      '.turbo/**',\n-      '.cache/**',\n       'packages/*/tsup.config.ts',\n       'vitest.config.ts',\n       'vitest.workspace.ts',\n-      'packages/*/dist/**',\n-      'packages/*/build/**',\n     ],\n   },\n ];\n"
                },
                {
                    "date": 1760738928406,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,16 +1,17 @@\n+import globals from 'globals';\n+\n export default [\n   {\n     files: ['**/*.{ts,tsx,js,jsx}'],\n     languageOptions: {\n       parser: '@typescript-eslint/parser',\n       parserOptions: {\n         ecmaVersion: 2022,\n         sourceType: 'module',\n-        project: ['./tsconfig.json', './packages/*/tsconfig.json'],\n-        tsconfigRootDir: process.cwd(),\n       },\n       globals: {\n+        ...globals.node,\n         console: 'readonly',\n         process: 'readonly',\n         Buffer: 'readonly',\n         __dirname: 'readonly',\n"
                },
                {
                    "date": 1760738942407,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,63 +1,16 @@\n-import globals from 'globals';\n-\n export default [\n   {\n-    files: ['**/*.{ts,tsx,js,jsx}'],\n-    languageOptions: {\n-      parser: '@typescript-eslint/parser',\n-      parserOptions: {\n-        ecmaVersion: 2022,\n-        sourceType: 'module',\n-      },\n-      globals: {\n-        ...globals.node,\n-        console: 'readonly',\n-        process: 'readonly',\n-        Buffer: 'readonly',\n-        __dirname: 'readonly',\n-        __filename: 'readonly',\n-      },\n-    },\n+    files: ['**/*.ts'],\n     rules: {\n-      // TypeScript strict rules\n-      '@typescript-eslint/no-unused-vars': [\n-        'warn',\n-        {\n-          argsIgnorePattern: '^_',\n-          varsIgnorePattern: '^_',\n-        },\n-      ],\n-      '@typescript-eslint/no-explicit-any': 'warn',\n-      '@typescript-eslint/explicit-function-return-type': 'off',\n-\n-      // Code quality\n-      'no-console': 'off', // Allow console for CLI tools\n-      'no-debugger': 'error',\n-      'prefer-const': 'error',\n-      'no-unused-vars': 'off', // Handled by TypeScript rule\n+      '@typescript-eslint/no-unused-vars': 'warn',\n+      '@typescript-eslint/no-explicit-any': 'off',\n+      'no-console': 'off',\n     },\n   },\n-\n-  // Tests\n   {\n-    files: ['**/*.test.ts', '**/*.spec.ts'],\n+    files: ['**/*.js'],\n     rules: {\n-      '@typescript-eslint/no-explicit-any': 'off',\n-      'max-lines-per-function': 'off',\n+      'no-console': 'off',\n     },\n   },\n-\n-  // Ignores\n-  {\n-    ignores: [\n-      'dist/**',\n-      'build/**',\n-      'node_modules/**',\n-      'coverage/**',\n-      '*.d.ts',\n-      'packages/*/tsup.config.ts',\n-      'vitest.config.ts',\n-      'vitest.workspace.ts',\n-    ],\n-  },\n ];\n"
                },
                {
                    "date": 1760738958782,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,7 +1,13 @@\n export default [\n   {\n     files: ['**/*.ts'],\n+    languageOptions: {\n+      parser: '@typescript-eslint/parser',\n+    },\n+    plugins: {\n+      '@typescript-eslint': require('@typescript-eslint/eslint-plugin'),\n+    },\n     rules: {\n       '@typescript-eslint/no-unused-vars': 'warn',\n       '@typescript-eslint/no-explicit-any': 'off',\n       'no-console': 'off',\n"
                },
                {
                    "date": 1760738977776,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,12 +1,15 @@\n+import tsParser from '@typescript-eslint/parser';\n+import tsPlugin from '@typescript-eslint/eslint-plugin';\n+\n export default [\n   {\n     files: ['**/*.ts'],\n     languageOptions: {\n-      parser: '@typescript-eslint/parser',\n+      parser: tsParser,\n     },\n     plugins: {\n-      '@typescript-eslint': require('@typescript-eslint/eslint-plugin'),\n+      '@typescript-eslint': tsPlugin,\n     },\n     rules: {\n       '@typescript-eslint/no-unused-vars': 'warn',\n       '@typescript-eslint/no-explicit-any': 'off',\n"
                },
                {
                    "date": 1760739007271,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -10,9 +10,9 @@\n     plugins: {\n       '@typescript-eslint': tsPlugin,\n     },\n     rules: {\n-      '@typescript-eslint/no-unused-vars': 'warn',\n+      '@typescript-eslint/no-unused-vars': 'off',\n       '@typescript-eslint/no-explicit-any': 'off',\n       'no-console': 'off',\n     },\n   },\n"
                },
                {
                    "date": 1760748297917,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -3,8 +3,9 @@\n \n export default [\n   {\n     files: ['**/*.ts'],\n+    ignores: ['docs/**/*', '**/vite.config.ts'],\n     languageOptions: {\n       parser: tsParser,\n     },\n     plugins: {\n@@ -17,8 +18,9 @@\n     },\n   },\n   {\n     files: ['**/*.js'],\n+    ignores: ['docs/**/*'],\n     rules: {\n       'no-console': 'off',\n     },\n   },\n"
                },
                {
                    "date": 1760748321946,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -3,9 +3,9 @@\n \n export default [\n   {\n     files: ['**/*.ts'],\n-    ignores: ['docs/**/*', '**/vite.config.ts'],\n+    ignores: ['docs/**/*', '**/node_modules/**', '**/vite.config.ts', '**/*.d.ts'],\n     languageOptions: {\n       parser: tsParser,\n     },\n     plugins: {\n@@ -18,9 +18,9 @@\n     },\n   },\n   {\n     files: ['**/*.js'],\n-    ignores: ['docs/**/*'],\n+    ignores: ['docs/**/*', '**/node_modules/**'],\n     rules: {\n       'no-console': 'off',\n     },\n   },\n"
                },
                {
                    "date": 1760754060385,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -3,9 +3,16 @@\n \n export default [\n   {\n     files: ['**/*.ts'],\n-    ignores: ['docs/**/*', '**/node_modules/**', '**/vite.config.ts', '**/*.d.ts'],\n+    ignores: [\n+      'docs/**/*',\n+      'docs/.vitepress/cache/**',\n+      'docs/reference/**',\n+      '**/node_modules/**',\n+      '**/vite.config.ts',\n+      '**/*.d.ts',\n+    ],\n     languageOptions: {\n       parser: tsParser,\n     },\n     plugins: {\n@@ -18,9 +25,9 @@\n     },\n   },\n   {\n     files: ['**/*.js'],\n-    ignores: ['docs/**/*', '**/node_modules/**'],\n+    ignores: ['docs/**/*', 'docs/.vitepress/cache/**', 'docs/reference/**', '**/node_modules/**'],\n     rules: {\n       'no-console': 'off',\n     },\n   },\n"
                },
                {
                    "date": 1760754210297,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -2,8 +2,11 @@\n import tsPlugin from '@typescript-eslint/eslint-plugin';\n \n export default [\n   {\n+    ignores: ['docs/**', 'docs/.vitepress/**', 'docs/reference/**'],\n+  },\n+  {\n     files: ['**/*.ts'],\n     ignores: [\n       'docs/**/*',\n       'docs/.vitepress/cache/**',\n"
                }
            ],
            "date": 1760734274211,
            "name": "Commit-0",
            "content": "// eslint.config.js\nimport path from 'node:path';\n\n// Plugins\nimport tseslint from '@typescript-eslint/eslint-plugin';\nimport tsparser from '@typescript-eslint/parser';\nimport stylistic from '@stylistic/eslint-plugin';\nimport importPlugin from 'eslint-plugin-import';\nimport promise from 'eslint-plugin-promise';\nimport security from 'eslint-plugin-security';\nimport sonarjs from 'eslint-plugin-sonarjs';\nimport unicorn from 'eslint-plugin-unicorn';\nimport vitest from 'eslint-plugin-vitest';\nimport prettier from 'eslint-plugin-prettier';\n\n// Configs\nimport airbnbBase from 'eslint-config-airbnb-base';\nimport airbnbTsBase from 'eslint-config-airbnb-typescript/base';\nimport prettierConfig from 'eslint-config-prettier';\n\n// Utility to merge configs\nconst merge = (...configs) => configs.flat();\n\nexport default [\n  {\n    ignores: [\n      'dist',\n      'build',\n      'node_modules',\n      'coverage',\n      '*.d.ts',\n      '*.min.js',\n      '**/*.gen.ts',\n      '**/*.generated.ts',\n      '**/__generated__/**',\n      '.turbo',\n      '.next',\n      '.vite',\n      '.cache',\n    ],\n  },\n  {\n    files: ['**/*.{ts,tsx,js,jsx}'],\n    languageOptions: {\n      parser: tsparser,\n      parserOptions: {\n        ecmaVersion: 2022,\n        sourceType: 'module',\n        project: ['./tsconfig.json', './packages/*/tsconfig.json'],\n        tsconfigRootDir: path.resolve(),\n        projectService: true,\n      },\n      globals: {\n        NodeJS: true,\n      },\n    },\n    plugins: {\n      '@typescript-eslint': tseslint,\n      '@stylistic': stylistic,\n      import: importPlugin,\n      promise,\n      security,\n      sonarjs,\n      unicorn,\n      vitest,\n      prettier,\n    },\n    rules: {\n      // Prettier\n      'prettier/prettier': 'error',\n\n      // TS\n      '@typescript-eslint/explicit-function-return-type': ['error', {\n        allowExpressions: true,\n        allowTypedFunctionExpressions: true,\n        allowHigherOrderFunctions: true,\n      }],\n      '@typescript-eslint/explicit-module-boundary-types': 'warn',\n      '@typescript-eslint/no-explicit-any': 'error',\n      '@typescript-eslint/only-throw-error': 'error',\n      '@typescript-eslint/no-unused-vars': ['error', {\n        argsIgnorePattern: '^_',\n        varsIgnorePattern: '^_',\n        caughtErrorsIgnorePattern: '^_',\n      }],\n      '@typescript-eslint/consistent-type-imports': ['error', {\n        prefer: 'type-imports',\n        fixStyle: 'separate-type-imports',\n      }],\n      '@typescript-eslint/consistent-type-exports': ['error', {\n        fixMixedExportsWithInlineTypeSpecifier: true,\n      }],\n      '@typescript-eslint/no-floating-promises': ['error', { ignoreVoid: true, ignoreIIFE: true }],\n      '@typescript-eslint/no-misused-promises': ['error', { checksVoidReturn: { attributes: false } }],\n      '@typescript-eslint/await-thenable': 'error',\n      '@typescript-eslint/promise-function-async': 'error',\n\n      // Style (brace style left to Prettier)\n      'brace-style': 'off',\n      'lines-between-class-members': 'off',\n      '@typescript-eslint/lines-between-class-members': ['error', 'always', {\n        exceptAfterSingleLine: true,\n      }],\n\n      // Naming\n      '@typescript-eslint/naming-convention': ['error',\n        { selector: 'default', format: ['camelCase'], leadingUnderscore: 'allow', trailingUnderscore: 'forbid' },\n        { selector: 'variable', format: ['camelCase', 'UPPER_CASE', 'PascalCase'], leadingUnderscore: 'allow' },\n        { selector: 'typeLike', format: ['PascalCase'] },\n        { selector: 'enumMember', format: ['PascalCase', 'UPPER_CASE'] },\n        { selector: 'import', format: ['camelCase', 'PascalCase'] },\n      ],\n\n      // Imports\n      'import/order': ['error', {\n        groups: ['builtin', 'external', 'internal', 'parent', 'sibling', 'index', 'object', 'type'],\n        'newlines-between': 'always',\n        alphabetize: { order: 'asc', caseInsensitive: true },\n      }],\n      'import/no-duplicates': 'error',\n      'import/no-extraneous-dependencies': ['error', {\n        devDependencies: [\n          '**/*.{test,spec}.ts',\n          '**/__tests__/**',\n          '**/vitest.config.{ts,js,cjs,mjs}',\n          '**/jest.config.{ts,js,cjs,mjs}',\n          '**/scripts/**',\n          '**/*.config.{ts,js,cjs,mjs}',\n        ],\n      }],\n      'import/prefer-default-export': 'off',\n      'import/no-default-export': 'error',\n      'import/extensions': ['error', 'ignorePackages', {\n        ts: 'never', tsx: 'never', js: 'never', mjs: 'never', cjs: 'never',\n      }],\n\n      // Unicorn\n      'unicorn/prevent-abbreviations': ['error', {\n        allowList: { args: true, env: true, params: true, props: true, Props: true, ref: true, Ref: true },\n      }],\n      'unicorn/filename-case': ['error', { cases: { kebabCase: true, pascalCase: true } }],\n      'unicorn/no-null': 'off',\n      'unicorn/prefer-module': 'off',\n      'unicorn/prefer-top-level-await': 'off',\n\n      // Security\n      'security/detect-object-injection': 'off',\n      'security/detect-non-literal-fs-filename': 'off',\n\n      // Sonar\n      'sonarjs/cognitive-complexity': ['error', 15],\n      'sonarjs/no-duplicate-string': ['error', { threshold: 5 }],\n\n      // Quality\n      'no-console': ['warn', { allow: ['warn', 'error', 'info', 'debug'] }],\n      'no-debugger': 'error',\n      'no-alert': 'error',\n      'no-var': 'error',\n      'prefer-const': 'error',\n      'prefer-arrow-callback': 'error',\n      'prefer-template': 'error',\n      'prefer-destructuring': ['error', { array: false, object: true }],\n      'no-nested-ternary': 'error',\n      'no-unneeded-ternary': 'error',\n      'no-param-reassign': ['error', {\n        props: true,\n        ignorePropertyModificationsFor: ['acc', 'accumulator', 'draft', 'state'],\n      }],\n      eqeqeq: ['error', 'always'],\n      curly: ['error', 'all'],\n\n      // Complexity\n      complexity: ['error', 10],\n      'max-depth': ['error', 4],\n      'max-lines': ['error', { max: 400, skipBlankLines: true, skipComments: true }],\n      'max-lines-per-function': ['error', { max: 80, skipBlankLines: true, skipComments: true }],\n      'max-params': ['error', 4],\n\n      // Comments\n      'spaced-comment': ['error', 'always', { markers: ['/'] }],\n    },\n  },\n  // Vitest-specific override\n  {\n    files: ['**/*.{test,spec}.ts', '**/__tests__/**/*.ts'],\n    languageOptions: {\n      env: { 'vitest/globals': true },\n    },\n    plugins: { vitest },\n    rules: {\n      '@typescript-eslint/no-explicit-any': 'off',\n      '@typescript-eslint/no-unsafe-assignment': 'off',\n      '@typescript-eslint/no-unsafe-member-access': 'off',\n      'sonarjs/no-duplicate-string': 'off',\n      'max-lines-per-function': 'off',\n    },\n  },\n  // Config files override\n  {\n    files: ['*.config.{ts,js,cjs,mjs}'],\n    rules: { 'import/no-default-export': 'off' },\n  },\n];\n"
        }
    ]
}