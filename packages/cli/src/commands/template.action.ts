/**
 * @module @envguard/cli/commands
 * @file template.action.ts
 * @description Generate/update .env.template from keychain
 */

import fs from 'fs/promises';
import path from 'path';
import { ConfigManager } from '../core/config/config.manager';
import { ManifestManager } from '../core/manifest/manifest.manager';
import { error, success, verbose, info, LogTag } from '../utils/logger';

export interface TemplateOptions {
  verbose?: boolean;
  force?: boolean;
}

export async function templateAction(options: TemplateOptions): Promise<void> {
  const configManager = new ConfigManager();
  const manifestManager = new ManifestManager();

  verbose(options.verbose === true, LogTag.LOG, 'options:', options);

  // Check if EnvGuard is initialized
  const config = await configManager.load();
  if (!config) {
    error('EnvGuard not initialized. Run "envg init" first.');
    process.exit(1);
  }

  const packageName = config.getPackage();
  const templatePath = path.join(process.cwd(), '.env.template');

  // Check if template exists
  try {
    await fs.access(templatePath);
    if (!options.force) {
      error('.env.template already exists. Use --force to overwrite.');
      process.exit(1);
    }
  } catch {
    // File doesn't exist, that's fine
  }

  // Get all keys from manifest
  const allKeys = await manifestManager.listKeys(packageName);
  const requiredKeys = await manifestManager.getRequiredKeys(packageName);
  const optionalKeys = await manifestManager.getOptionalKeys(packageName);

  if (allKeys.length === 0) {
    error('No secrets found in manifest.');
    info('Add secrets with: envg set KEY value');
    process.exit(1);
  }

  // Generate template content
  const lines: string[] = [];
  lines.push('# EnvGuard Environment Template');
  lines.push(
    '# This file documents the required environment variables for this project'
  );
  lines.push('# Generated by EnvGuard - DO NOT store actual secrets here!');
  lines.push('');

  if (requiredKeys.length > 0) {
    lines.push('# Required Variables');
    requiredKeys.forEach((key) => {
      lines.push(`${key}=`);
    });
  }

  if (optionalKeys.length > 0) {
    lines.push('');
    lines.push('# Optional Variables');
    optionalKeys.forEach((key) => {
      lines.push(`# ${key}=`);
    });
  }

  // Write template file
  await fs.writeFile(templatePath, lines.join('\n') + '\n');

  success(`âœ“ Generated .env.template with ${allKeys.length} variable(s)`);
  info(`  - ${requiredKeys.length} required`);
  info(`  - ${optionalKeys.length} optional`);
  info('\nCommit this file to version control:');
  info('  git add .env.template');
  info('  git commit -m "docs: add environment template"');
}
